#if 0
#elif defined(__arm64__) && __arm64__
// Generated by Apple Swift version 5.9 (swiftlang-5.9.0.128.108 clang-1500.0.40.1)
#ifndef OLAMAPNAVIGATIONSDK_SWIFT_H
#define OLAMAPNAVIGATIONSDK_SWIFT_H
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wgcc-compat"

#if !defined(__has_include)
# define __has_include(x) 0
#endif
#if !defined(__has_attribute)
# define __has_attribute(x) 0
#endif
#if !defined(__has_feature)
# define __has_feature(x) 0
#endif
#if !defined(__has_warning)
# define __has_warning(x) 0
#endif

#if __has_include(<swift/objc-prologue.h>)
# include <swift/objc-prologue.h>
#endif

#pragma clang diagnostic ignored "-Wauto-import"
#if defined(__OBJC__)
#include <Foundation/Foundation.h>
#endif
#if defined(__cplusplus)
#include <cstdint>
#include <cstddef>
#include <cstdbool>
#include <cstring>
#include <stdlib.h>
#include <new>
#include <type_traits>
#else
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>
#include <string.h>
#endif
#if defined(__cplusplus)
#if defined(__arm64e__) && __has_include(<ptrauth.h>)
# include <ptrauth.h>
#else
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wreserved-macro-identifier"
# ifndef __ptrauth_swift_value_witness_function_pointer
#  define __ptrauth_swift_value_witness_function_pointer(x)
# endif
# ifndef __ptrauth_swift_class_method_pointer
#  define __ptrauth_swift_class_method_pointer(x)
# endif
#pragma clang diagnostic pop
#endif
#endif

#if !defined(SWIFT_TYPEDEFS)
# define SWIFT_TYPEDEFS 1
# if __has_include(<uchar.h>)
#  include <uchar.h>
# elif !defined(__cplusplus)
typedef uint_least16_t char16_t;
typedef uint_least32_t char32_t;
# endif
typedef float swift_float2  __attribute__((__ext_vector_type__(2)));
typedef float swift_float3  __attribute__((__ext_vector_type__(3)));
typedef float swift_float4  __attribute__((__ext_vector_type__(4)));
typedef double swift_double2  __attribute__((__ext_vector_type__(2)));
typedef double swift_double3  __attribute__((__ext_vector_type__(3)));
typedef double swift_double4  __attribute__((__ext_vector_type__(4)));
typedef int swift_int2  __attribute__((__ext_vector_type__(2)));
typedef int swift_int3  __attribute__((__ext_vector_type__(3)));
typedef int swift_int4  __attribute__((__ext_vector_type__(4)));
typedef unsigned int swift_uint2  __attribute__((__ext_vector_type__(2)));
typedef unsigned int swift_uint3  __attribute__((__ext_vector_type__(3)));
typedef unsigned int swift_uint4  __attribute__((__ext_vector_type__(4)));
#endif

#if !defined(SWIFT_PASTE)
# define SWIFT_PASTE_HELPER(x, y) x##y
# define SWIFT_PASTE(x, y) SWIFT_PASTE_HELPER(x, y)
#endif
#if !defined(SWIFT_METATYPE)
# define SWIFT_METATYPE(X) Class
#endif
#if !defined(SWIFT_CLASS_PROPERTY)
# if __has_feature(objc_class_property)
#  define SWIFT_CLASS_PROPERTY(...) __VA_ARGS__
# else
#  define SWIFT_CLASS_PROPERTY(...) 
# endif
#endif
#if !defined(SWIFT_RUNTIME_NAME)
# if __has_attribute(objc_runtime_name)
#  define SWIFT_RUNTIME_NAME(X) __attribute__((objc_runtime_name(X)))
# else
#  define SWIFT_RUNTIME_NAME(X) 
# endif
#endif
#if !defined(SWIFT_COMPILE_NAME)
# if __has_attribute(swift_name)
#  define SWIFT_COMPILE_NAME(X) __attribute__((swift_name(X)))
# else
#  define SWIFT_COMPILE_NAME(X) 
# endif
#endif
#if !defined(SWIFT_METHOD_FAMILY)
# if __has_attribute(objc_method_family)
#  define SWIFT_METHOD_FAMILY(X) __attribute__((objc_method_family(X)))
# else
#  define SWIFT_METHOD_FAMILY(X) 
# endif
#endif
#if !defined(SWIFT_NOESCAPE)
# if __has_attribute(noescape)
#  define SWIFT_NOESCAPE __attribute__((noescape))
# else
#  define SWIFT_NOESCAPE 
# endif
#endif
#if !defined(SWIFT_RELEASES_ARGUMENT)
# if __has_attribute(ns_consumed)
#  define SWIFT_RELEASES_ARGUMENT __attribute__((ns_consumed))
# else
#  define SWIFT_RELEASES_ARGUMENT 
# endif
#endif
#if !defined(SWIFT_WARN_UNUSED_RESULT)
# if __has_attribute(warn_unused_result)
#  define SWIFT_WARN_UNUSED_RESULT __attribute__((warn_unused_result))
# else
#  define SWIFT_WARN_UNUSED_RESULT 
# endif
#endif
#if !defined(SWIFT_NORETURN)
# if __has_attribute(noreturn)
#  define SWIFT_NORETURN __attribute__((noreturn))
# else
#  define SWIFT_NORETURN 
# endif
#endif
#if !defined(SWIFT_CLASS_EXTRA)
# define SWIFT_CLASS_EXTRA 
#endif
#if !defined(SWIFT_PROTOCOL_EXTRA)
# define SWIFT_PROTOCOL_EXTRA 
#endif
#if !defined(SWIFT_ENUM_EXTRA)
# define SWIFT_ENUM_EXTRA 
#endif
#if !defined(SWIFT_CLASS)
# if __has_attribute(objc_subclassing_restricted)
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# else
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# endif
#endif
#if !defined(SWIFT_RESILIENT_CLASS)
# if __has_attribute(objc_class_stub)
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME) __attribute__((objc_class_stub))
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_class_stub)) SWIFT_CLASS_NAMED(SWIFT_NAME)
# else
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME)
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) SWIFT_CLASS_NAMED(SWIFT_NAME)
# endif
#endif
#if !defined(SWIFT_PROTOCOL)
# define SWIFT_PROTOCOL(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
# define SWIFT_PROTOCOL_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
#endif
#if !defined(SWIFT_EXTENSION)
# define SWIFT_EXTENSION(M) SWIFT_PASTE(M##_Swift_, __LINE__)
#endif
#if !defined(OBJC_DESIGNATED_INITIALIZER)
# if __has_attribute(objc_designated_initializer)
#  define OBJC_DESIGNATED_INITIALIZER __attribute__((objc_designated_initializer))
# else
#  define OBJC_DESIGNATED_INITIALIZER 
# endif
#endif
#if !defined(SWIFT_ENUM_ATTR)
# if __has_attribute(enum_extensibility)
#  define SWIFT_ENUM_ATTR(_extensibility) __attribute__((enum_extensibility(_extensibility)))
# else
#  define SWIFT_ENUM_ATTR(_extensibility) 
# endif
#endif
#if !defined(SWIFT_ENUM)
# define SWIFT_ENUM(_type, _name, _extensibility) enum _name : _type _name; enum SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# if __has_feature(generalized_swift_name)
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) enum _name : _type _name SWIFT_COMPILE_NAME(SWIFT_NAME); enum SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# else
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) SWIFT_ENUM(_type, _name, _extensibility)
# endif
#endif
#if !defined(SWIFT_UNAVAILABLE)
# define SWIFT_UNAVAILABLE __attribute__((unavailable))
#endif
#if !defined(SWIFT_UNAVAILABLE_MSG)
# define SWIFT_UNAVAILABLE_MSG(msg) __attribute__((unavailable(msg)))
#endif
#if !defined(SWIFT_AVAILABILITY)
# define SWIFT_AVAILABILITY(plat, ...) __attribute__((availability(plat, __VA_ARGS__)))
#endif
#if !defined(SWIFT_WEAK_IMPORT)
# define SWIFT_WEAK_IMPORT __attribute__((weak_import))
#endif
#if !defined(SWIFT_DEPRECATED)
# define SWIFT_DEPRECATED __attribute__((deprecated))
#endif
#if !defined(SWIFT_DEPRECATED_MSG)
# define SWIFT_DEPRECATED_MSG(...) __attribute__((deprecated(__VA_ARGS__)))
#endif
#if !defined(SWIFT_DEPRECATED_OBJC)
# if __has_feature(attribute_diagnose_if_objc)
#  define SWIFT_DEPRECATED_OBJC(Msg) __attribute__((diagnose_if(1, Msg, "warning")))
# else
#  define SWIFT_DEPRECATED_OBJC(Msg) SWIFT_DEPRECATED_MSG(Msg)
# endif
#endif
#if defined(__OBJC__)
#if !defined(IBSegueAction)
# define IBSegueAction 
#endif
#endif
#if !defined(SWIFT_EXTERN)
# if defined(__cplusplus)
#  define SWIFT_EXTERN extern "C"
# else
#  define SWIFT_EXTERN extern
# endif
#endif
#if !defined(SWIFT_CALL)
# define SWIFT_CALL __attribute__((swiftcall))
#endif
#if !defined(SWIFT_INDIRECT_RESULT)
# define SWIFT_INDIRECT_RESULT __attribute__((swift_indirect_result))
#endif
#if !defined(SWIFT_CONTEXT)
# define SWIFT_CONTEXT __attribute__((swift_context))
#endif
#if !defined(SWIFT_ERROR_RESULT)
# define SWIFT_ERROR_RESULT __attribute__((swift_error_result))
#endif
#if defined(__cplusplus)
# define SWIFT_NOEXCEPT noexcept
#else
# define SWIFT_NOEXCEPT 
#endif
#if !defined(SWIFT_C_INLINE_THUNK)
# if __has_attribute(always_inline)
# if __has_attribute(nodebug)
#  define SWIFT_C_INLINE_THUNK inline __attribute__((always_inline)) __attribute__((nodebug))
# else
#  define SWIFT_C_INLINE_THUNK inline __attribute__((always_inline))
# endif
# else
#  define SWIFT_C_INLINE_THUNK inline
# endif
#endif
#if defined(_WIN32)
#if !defined(SWIFT_IMPORT_STDLIB_SYMBOL)
# define SWIFT_IMPORT_STDLIB_SYMBOL __declspec(dllimport)
#endif
#else
#if !defined(SWIFT_IMPORT_STDLIB_SYMBOL)
# define SWIFT_IMPORT_STDLIB_SYMBOL 
#endif
#endif
#if defined(__OBJC__)
#if __has_feature(objc_modules)
#if __has_warning("-Watimport-in-framework-header")
#pragma clang diagnostic ignored "-Watimport-in-framework-header"
#endif
@import AVFAudio;
@import CarPlay;
@import CoreFoundation;
@import CoreLocation;
@import Foundation;
@import Mapbox;
@import ObjectiveC;
@import OlaMapDirectionFramework;
@import UIKit;
#endif

#endif
#pragma clang diagnostic ignored "-Wproperty-attribute-mismatch"
#pragma clang diagnostic ignored "-Wduplicate-method-arg"
#if __has_warning("-Wpragma-clang-attribute")
# pragma clang diagnostic ignored "-Wpragma-clang-attribute"
#endif
#pragma clang diagnostic ignored "-Wunknown-pragmas"
#pragma clang diagnostic ignored "-Wnullability"
#pragma clang diagnostic ignored "-Wdollar-in-identifier-extension"

#if __has_attribute(external_source_symbol)
# pragma push_macro("any")
# undef any
# pragma clang attribute push(__attribute__((external_source_symbol(language="Swift", defined_in="OlaMapNavigationSDK",generated_declaration))), apply_to=any(function,enum,objc_interface,objc_category,objc_protocol))
# pragma pop_macro("any")
#endif

#if defined(__OBJC__)
@class UIColor;
@class UIFont;
@class NSCoder;

/// :nodoc:
SWIFT_CLASS_NAMED("StylableLabel")
@interface MBStylableLabel : UILabel
@property (nonatomic, strong) UIColor * _Nonnull normalTextColor;
@property (nonatomic, strong) UIFont * _Nonnull normalFont;
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
@end


/// :nodoc:
SWIFT_CLASS_NAMED("ArrivalTimeLabel")
@interface MBArrivalTimeLabel : MBStylableLabel
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
@end

typedef SWIFT_ENUM_NAMED(NSUInteger, MBAudioFormat, "AudioFormat", open) {
  MBAudioFormatMp3 = 0,
};

@class MBVisualInstructionBanner;

/// :nodoc:
SWIFT_CLASS("_TtC19OlaMapNavigationSDK26BaseInstructionsBannerView")
@interface BaseInstructionsBannerView : UIControl
- (nonnull instancetype)initWithFrame:(CGRect)frame SWIFT_UNAVAILABLE;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
/// Updates the instructions banner info with a given <code>VisualInstructionBanner</code>.
- (void)updateForVisualInstructionBanner:(MBVisualInstructionBanner * _Nullable)instruction;
- (void)prepareForInterfaceBuilder;
@end


@class NSString;
@protocol MGLAnnotation;

SWIFT_CLASS("_TtC19OlaMapNavigationSDK17OlaAnnotationView")
@interface OlaAnnotationView : MGLAnnotationView
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
- (void)prepareForReuse;
- (nonnull instancetype)initWithReuseIdentifier:(NSString * _Nullable)reuseIdentifier SWIFT_UNAVAILABLE;
- (nonnull instancetype)initWithAnnotation:(id <MGLAnnotation> _Nullable)annotation reuseIdentifier:(NSString * _Nullable)reuseIdentifier SWIFT_UNAVAILABLE;
- (nonnull instancetype)initWithFrame:(CGRect)frame SWIFT_UNAVAILABLE;
@end


SWIFT_CLASS("_TtC19OlaMapNavigationSDK18BikeAnnotationView")
@interface BikeAnnotationView : OlaAnnotationView
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder SWIFT_UNAVAILABLE;
- (void)layoutSubviews;
- (void)setSelected:(BOOL)selected animated:(BOOL)animated;
@end


/// A cache consists of both in-memory and on-disk components, both of which can be reset.
SWIFT_PROTOCOL_NAMED("BimodalCache")
@protocol MBBimodalCache
- (void)clearMemory;
- (void)clearDiskWithCompletion:(void (^ _Nullable)(void))completion;
@end

@class NSData;

/// A cache which supports storing data
SWIFT_PROTOCOL_NAMED("BimodalDataCache")
@protocol MBBimodalDataCache <MBBimodalCache>
- (void)store:(NSData * _Nonnull)data forKey:(NSString * _Nonnull)key toDisk:(BOOL)toDisk completion:(void (^ _Nullable)(void))completionBlock;
- (NSData * _Nullable)dataForKey:(NSString * _Nullable)forKey SWIFT_WARN_UNUSED_RESULT;
@end

@class UIImage;

/// A cache which supports storing images
SWIFT_PROTOCOL_NAMED("BimodalImageCache")
@protocol MBBimodalImageCache <MBBimodalCache>
- (void)store:(UIImage * _Nonnull)image forKey:(NSString * _Nonnull)key toDisk:(BOOL)toDisk completion:(void (^ _Nullable)(void))completionBlock;
- (UIImage * _Nullable)imageForKey:(NSString * _Nullable)forKey SWIFT_WARN_UNUSED_RESULT;
@end


/// :nodoc:
SWIFT_CLASS_NAMED("BottomBannerContentView")
@interface MBBottomBannerContentView : UIView
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
@end


/// :nodoc:
IB_DESIGNABLE
SWIFT_CLASS_NAMED("BottomBannerView")
@interface MBBottomBannerView : UIView
- (nonnull instancetype)initWithFrame:(CGRect)frame SWIFT_UNAVAILABLE;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
- (void)prepareForInterfaceBuilder;
@end

@class UITraitCollection;

@interface MBBottomBannerView (SWIFT_EXTENSION(OlaMapNavigationSDK))
- (void)traitCollectionDidChange:(UITraitCollection * _Nullable)previousTraitCollection;
@end





/// :nodoc:
SWIFT_CLASS_NAMED("StylableButton")
@interface MBStylableButton : UIButton
@property (nonatomic, strong) UIFont * _Nonnull textFont;
@property (nonatomic, strong) UIColor * _Nonnull textColor;
@property (nonatomic, strong) UIColor * _Nonnull borderColor;
@property (nonatomic) CGFloat borderWidth;
@property (nonatomic) CGFloat cornerRadius;
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
@end


/// :nodoc:
/// <code>MBButton</code> sets the tintColor according to the style.
SWIFT_CLASS_NAMED("Button")
@interface MBButton : MBStylableButton
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
@end




SWIFT_CLASS("_TtC19OlaMapNavigationSDK17CabAnnotationView")
@interface CabAnnotationView : OlaAnnotationView
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder SWIFT_UNAVAILABLE;
- (void)layoutSubviews;
- (void)setSelected:(BOOL)selected animated:(BOOL)animated;
@end


/// :nodoc:
SWIFT_CLASS_NAMED("CancelButton")
@interface MBCancelButton : MBButton
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
@end

/// The activity during which a <code>CPTemplate</code> is displayed. This enumeration is used to distinguish between different templates during different phases of user interaction.
typedef SWIFT_ENUM_NAMED(NSInteger, MBCarPlayActivity, "CarPlayActivity", open) {
/// The user is browsing the map or searching for a destination.
  MBCarPlayActivityBrowsing = 0,
/// The user is previewing a route or selecting among multiple routes.
  MBCarPlayActivityPreviewing = 1,
/// The user is actively navigating along a route.
  MBCarPlayActivityNavigating = 2,
};

@protocol MBCarPlayManagerDelegate;

/// <code>CarPlayManager</code> is the main object responsible for orchestrating interactions with a Mapbox map on CarPlay.
/// You do not create instances of this object yourself; instead, use the <code>CarPlayManager.shared</code> class property.
/// Messages declared in the <code>CPApplicationDelegate</code> protocol should be sent to this object in the containing application’s application delegate. Implement <code>CarPlayManagerDelegate</code> in the containing application and assign an instance to the <code>delegate</code> property of the <code>CarPlayManager</code> shared instance.
SWIFT_CLASS_NAMED("CarPlayManager") SWIFT_AVAILABILITY(ios,introduced=12.0)
@interface MBCarPlayManager : NSObject
/// Developers should assign their own object as a delegate implementing the CarPlayManagerDelegate protocol for customization.
@property (nonatomic, weak) id <MBCarPlayManagerDelegate> _Nullable delegate;
/// If set to <code>true</code>, turn-by-turn directions will simulate the user traveling along the selected route when initiated from CarPlay.
@property (nonatomic) BOOL simulatesLocations;
/// This property specifies a multiplier to be applied to the user’s speed in simulation mode.
@property (nonatomic) double simulatedSpeedMultiplier;
/// The shared CarPlay manager.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, strong) MBCarPlayManager * _Nonnull sharedManager;)
+ (MBCarPlayManager * _Nonnull)sharedManager SWIFT_WARN_UNUSED_RESULT;
+ (void)setSharedManager:(MBCarPlayManager * _Nonnull)value;
/// A Boolean value indicating whether the phone is connected to CarPlay.
@property (nonatomic) BOOL isConnectedToCarPlay;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

@class MBCarPlayNavigationViewController;

/// The <code>CarPlayNavigationDelegate</code> protocol provides methods for reacting to significant events during turn-by-turn navigation with <code>CarPlayNavigationViewController</code>.
SWIFT_PROTOCOL_NAMED("CarPlayNavigationDelegate") SWIFT_AVAILABILITY(ios,introduced=12.0)
@protocol MBNavigationCarPlayDelegate
/// Called when the CarPlay navigation view controller is dismissed, such as when the user ends a trip.
/// \param carPlayNavigationViewController The CarPlay navigation view controller that was dismissed.
///
/// \param canceled True if the user dismissed the CarPlay navigation view controller by tapping the Cancel button; false if the navigation view controller dismissed by some other means.
///
- (void)carPlayNavigationViewControllerDidDismiss:(MBCarPlayNavigationViewController * _Nonnull)carPlayNavigationViewController byCanceling:(BOOL)canceled;
/// Called when the CarPlay navigation view controller detects an arrival.
/// \param carPlayNavigationViewController The CarPlay navigation view controller that was dismissed.
///
- (void)carPlayNavigationViewControllerDidArrive:(MBCarPlayNavigationViewController * _Nonnull)carPlayNavigationViewController;
@end


SWIFT_AVAILABILITY(ios,introduced=12.0)
@interface MBCarPlayManager (SWIFT_EXTENSION(OlaMapNavigationSDK)) <MBNavigationCarPlayDelegate>
- (void)carPlayNavigationViewControllerDidArrive:(MBCarPlayNavigationViewController * _Nonnull)_;
- (void)carPlayNavigationViewControllerDidDismiss:(MBCarPlayNavigationViewController * _Nonnull)carPlayNavigationViewController byCanceling:(BOOL)canceled;
@end

@class CPTemplate;

SWIFT_AVAILABILITY(ios,introduced=12.0)
@interface MBCarPlayManager (SWIFT_EXTENSION(OlaMapNavigationSDK)) <CPInterfaceControllerDelegate>
- (void)templateWillAppear:(CPTemplate * _Nonnull)template_ animated:(BOOL)animated;
- (void)templateDidAppear:(CPTemplate * _Nonnull)template_ animated:(BOOL)animated;
- (void)templateWillDisappear:(CPTemplate * _Nonnull)template_ animated:(BOOL)animated;
@end

@class CPListTemplate;
@class CPListItem;

SWIFT_AVAILABILITY(ios,introduced=12.0)
@interface MBCarPlayManager (SWIFT_EXTENSION(OlaMapNavigationSDK)) <CPListTemplateDelegate>
- (void)listTemplate:(CPListTemplate * _Nonnull)listTemplate didSelectListItem:(CPListItem * _Nonnull)item completionHandler:(void (^ _Nonnull)(void))completionHandler;
@end

@class UIApplication;
@class CPInterfaceController;
@class CPWindow;

SWIFT_AVAILABILITY(ios,introduced=12.0)
@interface MBCarPlayManager (SWIFT_EXTENSION(OlaMapNavigationSDK)) <CPApplicationDelegate>
- (void)application:(UIApplication * _Nonnull)application didConnectCarInterfaceController:(CPInterfaceController * _Nonnull)interfaceController toWindow:(CPWindow * _Nonnull)window;
- (void)application:(UIApplication * _Nonnull)application didDisconnectCarInterfaceController:(CPInterfaceController * _Nonnull)interfaceController fromWindow:(CPWindow * _Nonnull)window;
@end

@class CPMapTemplate;
@class CPTrip;
@class CPRouteChoice;

SWIFT_AVAILABILITY(ios,introduced=12.0)
@interface MBCarPlayManager (SWIFT_EXTENSION(OlaMapNavigationSDK)) <CPMapTemplateDelegate>
- (void)mapTemplate:(CPMapTemplate * _Nonnull)mapTemplate startedTrip:(CPTrip * _Nonnull)trip usingRouteChoice:(CPRouteChoice * _Nonnull)routeChoice;
- (void)mapTemplate:(CPMapTemplate * _Nonnull)mapTemplate selectedPreviewForTrip:(CPTrip * _Nonnull)trip usingRouteChoice:(CPRouteChoice * _Nonnull)routeChoice;
- (void)mapTemplateDidCancelNavigation:(CPMapTemplate * _Nonnull)mapTemplate;
- (void)mapTemplateDidBeginPanGesture:(CPMapTemplate * _Nonnull)mapTemplate;
- (void)mapTemplate:(CPMapTemplate * _Nonnull)mapTemplate didEndPanGestureWithVelocity:(CGPoint)velocity;
- (void)mapTemplateWillDismissPanningInterface:(CPMapTemplate * _Nonnull)mapTemplate;
- (void)mapTemplate:(CPMapTemplate * _Nonnull)mapTemplate didUpdatePanGestureWithTranslation:(CGPoint)translation velocity:(CGPoint)velocity;
- (void)mapTemplate:(CPMapTemplate * _Nonnull)mapTemplate panWithDirection:(CPPanDirection)direction;
@end

@class CPBarButton;
@class CPMapButton;
@class MBRoute;
@class MBRouteController;
@class CPSearchTemplate;

/// <code>CarPlayManagerDelegate</code> is the main integration point for Mapbox CarPlay support.
/// Implement this protocol and assign an instance to the <code>delegate</code> property of the shared instance of <code>CarPlayManager</code>.
SWIFT_PROTOCOL_NAMED("CarPlayManagerDelegate") SWIFT_AVAILABILITY(ios,introduced=12.0)
@protocol MBCarPlayManagerDelegate
@optional
/// Offers the delegate an opportunity to provide a customized list of leading bar buttons.
/// These buttons’ tap handlers encapsulate the action to be taken, so it is up to the developer to ensure the hierarchy of templates is adequately navigable.
/// If this method is not implemented, or if nil is returned, an implementation of CPSearchTemplate will be provided which uses the Mapbox Geocoder.
/// \param carPlayManager The shared CarPlay manager.
///
/// \param traitCollection The trait collection of the view controller being shown in the CarPlay window.
///
/// \param template The template into which the returned bar buttons will be inserted.
///
/// \param activity What the user is currently doing on the CarPlay screen. Use this parameter to distinguish between multiple templates of the same kind, such as multiple <code>CPMapTemplate</code>s.
///
///
/// returns:
/// An array of bar buttons to display on the leading side of the navigation bar while <code>template</code> is visible.
- (NSArray<CPBarButton *> * _Nullable)carPlayManager:(MBCarPlayManager * _Nonnull)carPlayManager leadingNavigationBarButtonsWithTraitCollection:(UITraitCollection * _Nonnull)traitCollection inTemplate:(CPTemplate * _Nonnull)template_ forActivity:(enum MBCarPlayActivity)activity SWIFT_WARN_UNUSED_RESULT;
/// Offers the delegate an opportunity to provide a customized list of trailing bar buttons.
/// These buttons’ tap handlers encapsulate the action to be taken, so it is up to the developer to ensure the hierarchy of templates is adequately navigable.
/// \param carPlayManager The shared CarPlay manager.
///
/// \param traitCollection The trait collection of the view controller being shown in the CarPlay window.
///
/// \param template The template into which the returned bar buttons will be inserted.
///
/// \param activity What the user is currently doing on the CarPlay screen. Use this parameter to distinguish between multiple templates of the same kind, such as multiple <code>CPMapTemplate</code>s.
///
///
/// returns:
/// An array of bar buttons to display on the trailing side of the navigation bar while <code>template</code> is visible.
- (NSArray<CPBarButton *> * _Nullable)carPlayManager:(MBCarPlayManager * _Nonnull)carPlayManager trailingNavigationBarButtonsWithTraitCollection:(UITraitCollection * _Nonnull)traitCollection inTemplate:(CPTemplate * _Nonnull)template_ forActivity:(enum MBCarPlayActivity)activity SWIFT_WARN_UNUSED_RESULT;
/// Offers the delegate an opportunity to provide a customized list of buttons displayed on the map.
/// These buttons handle the gestures on the map view, so it is up to the developer to ensure the map template is interactive.
/// If this method is not implemented, or if nil is returned, a default set of zoom and pan buttons will be provided.
/// \param carPlayManager The shared CarPlay manager.
///
/// \param traitCollection The trait collection of the view controller being shown in the CarPlay window.
///
/// \param template The template into which the returned map buttons will be inserted.
///
/// \param activity What the user is currently doing on the CarPlay screen. Use this parameter to distinguish between multiple templates of the same kind, such as multiple <code>CPMapTemplate</code>s.
///
///
/// returns:
/// An array of map buttons to display on the map while <code>template</code> is visible.
- (NSArray<CPMapButton *> * _Nullable)carPlayManager:(MBCarPlayManager * _Nonnull)carplayManager mapButtonsCompatibleWithTraitCollection:(UITraitCollection * _Nonnull)traitCollection inTemplate:(CPTemplate * _Nonnull)template_ forActivity:(enum MBCarPlayActivity)activity SWIFT_WARN_UNUSED_RESULT;
/// Offers the delegate an opportunity to provide an alternate navigator, otherwise a default built-in RouteController will be created and used.
/// \param carPlayManager The shared CarPlay manager.
///
/// \param route The route for which the returned route controller will manage location updates.
///
///
/// returns:
/// A route controller that manages location updates along <code>route</code>.
- (MBRouteController * _Nonnull)carPlayManager:(MBCarPlayManager * _Nonnull)carPlayManager routeControllerAlongRoute:(MBRoute * _Nonnull)route SWIFT_WARN_UNUSED_RESULT;
/// Offers the delegate an opportunity to react to updates in the search text.
/// postcondition:
/// You must call <code>completionHandler</code> within this method.
/// \param carPlayManager The shared CarPlay manager.
///
/// \param searchTemplate The search template currently accepting user input.
///
/// \param searchText The updated search text in <code>searchTemplate</code>.
///
/// \param completionHandler Called when the search is complete. Accepts a list of search results.
///
- (void)carPlayManager:(MBCarPlayManager * _Nonnull)carPlayManager searchTemplate:(CPSearchTemplate * _Nonnull)searchTemplate updatedSearchText:(NSString * _Nonnull)searchText completionHandler:(void (^ _Nonnull)(NSArray<CPListItem *> * _Nonnull))completionHandler;
/// Offers the delegate an opportunity to react to selection of a search result.
/// postcondition:
/// You must call <code>completionHandler</code> within this method.
/// \param carPlayManager The shared CarPlay manager.
///
/// \param searchTemplate The search template currently accepting user input.
///
/// \param item The search result the user has selected.
///
/// \param completionHandler Called when the delegate is done responding to the selection.
///
- (void)carPlayManager:(MBCarPlayManager * _Nonnull)carPlayManager searchTemplate:(CPSearchTemplate * _Nonnull)searchTemplate selectedResult:(CPListItem * _Nonnull)item completionHandler:(void (^ _Nonnull)(void))completionHandler;
@required
/// Called when navigation begins so that the containing app can update accordingly.
/// \param carPlayManager The shared CarPlay manager.
///
/// \param routeController The route controller that has begun managing location updates for a navigation session.
///
- (void)carPlayManager:(MBCarPlayManager * _Nonnull)carPlayManager didBeginNavigationWithRouteController:(MBRouteController * _Nonnull)routeController;
/// Called when navigation ends so that the containing app can update accordingly.
/// \param carPlayManager The shared CarPlay manager.
///
- (void)carPlayManagerDidEndNavigation:(MBCarPlayManager * _Nonnull)carPlayManager;
@optional
/// Called when the carplay manager will disable the idle timer.
/// Implementing this method will allow developers to change whether idle timer is disabled when carplay is connected and the vice-versa when disconnected.
/// \param carPlayManager The shared CarPlay manager.
///
///
/// returns:
/// A Boolean value indicating whether to disable idle timer when carplay is connected and enable when disconnected.
- (BOOL)carplayManagerShouldDisableIdleTimer:(MBCarPlayManager * _Nonnull)carPlayManager SWIFT_WARN_UNUSED_RESULT;
@end


@class MGLMapView;
@class MGLStyle;
@class NSBundle;

/// <code>CarPlayNavigationViewController</code> is a fully-featured turn-by-turn navigation UI for CarPlay.
/// seealso:
/// NavigationViewController
SWIFT_CLASS_NAMED("CarPlayNavigationViewController") SWIFT_AVAILABILITY(ios,introduced=12.0)
@interface MBCarPlayNavigationViewController : UIViewController <MGLMapViewDelegate>
/// The view controller’s delegate.
@property (nonatomic, weak) id <MBNavigationCarPlayDelegate> _Nullable carPlayNavigationDelegate;
@property (nonatomic) enum MBDrivingSide drivingSide;
/// Creates a new CarPlay navigation view controller for the given route controller and user interface.
/// postcondition:
/// Call <code>startNavigationSession(for:)</code> after initializing this object to begin navigation.
/// \param routeController The route controller managing location updates for the navigation session.
///
/// \param mapTemplate The map template visible during the navigation session.
///
/// \param interfaceController The interface controller for CarPlay.
///
- (nonnull instancetype)initForRouteController:(MBRouteController * _Nonnull)routeController mapTemplate:(CPMapTemplate * _Nonnull)mapTemplate interfaceController:(CPInterfaceController * _Nonnull)interfaceController OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder SWIFT_UNAVAILABLE;
- (void)viewDidLoad;
- (void)viewWillDisappear:(BOOL)animated;
- (void)viewSafeAreaInsetsDidChange;
/// Begins a navigation session along the given trip.
/// \param trip The trip to begin navigating along.
///
- (void)startNavigationSessionForTrip:(CPTrip * _Nonnull)trip;
/// Ends the current navigation session.
/// \param canceled A Boolean value indicating whether this method is being called because the user intends to cancel the trip, as opposed to letting it run to completion.
///
- (void)exitNavigationByCanceling:(BOOL)canceled;
/// Shows the interface for providing feedback about the route.
- (void)showFeedback;
/// A Boolean value indicating whether the map should follow the user’s location and rotate when the course changes.
/// When this property is true, the map follows the user’s location and rotates when their course changes. Otherwise, the map shows an overview of the route.
@property (nonatomic) BOOL tracksUserCourse;
- (void)mapView:(MGLMapView * _Nonnull)mapView didFinishLoadingStyle:(MGLStyle * _Nonnull)style;
- (nonnull instancetype)initWithNibName:(NSString * _Nullable)nibNameOrNil bundle:(NSBundle * _Nullable)nibBundleOrNil SWIFT_UNAVAILABLE;
@end

@class CLLocation;
enum RerouteReason : NSInteger;
@class MBWaypoint;

/// The <code>RouteControllerDelegate</code> protocol provides methods for responding to significant events during the user’s traversal of a route monitored by a <code>RouteController</code>.
SWIFT_PROTOCOL_NAMED("RouteControllerDelegate")
@protocol MBRouteControllerDelegate
@optional
/// Returns whether the route controller should be allowed to calculate a new route.
/// If implemented, this method is called as soon as the route controller detects that the user is off the predetermined route. Implement this method to conditionally prevent rerouting. If this method returns <code>true</code>, <code>routeController(_:willRerouteFrom:)</code> will be called immediately afterwards.
/// \param routeController The route controller that has detected the need to calculate a new route.
///
/// \param location The user’s current location.
///
///
/// returns:
/// True to allow the route controller to calculate a new route; false to keep tracking the current route.
- (BOOL)routeController:(MBRouteController * _Nonnull)routeController shouldRerouteFromLocation:(CLLocation * _Nonnull)location SWIFT_WARN_UNUSED_RESULT;
/// Called immediately before the route controller calculates a new route.
/// This method is called after <code>routeController(_:shouldRerouteFrom:)</code> is called, simultaneously with the <code>RouteControllerWillReroute</code> notification being posted, and before <code>routeController(_:didRerouteAlong:)</code> is called.
/// \param routeController The route controller that will calculate a new route.
///
/// \param location The user’s current location.
///
- (void)routeController:(MBRouteController * _Nonnull)routeController willRerouteFromLocation:(CLLocation * _Nonnull)location;
/// Called when a location has been identified as unqualified to navigate on.
/// See <code>CLLocation.isQualified</code> for more information about what qualifies a location.
/// <ul>
///   <li>
///     return: If <code>true</code>, the location is discarded and the <code>RouteController</code> will not consider it. If <code>false</code>, the location will not be thrown out.
///   </li>
/// </ul>
/// \param routeController The route controller that discarded the location.
///
/// \param location The location that will be discarded.
///
- (BOOL)routeController:(MBRouteController * _Nonnull)routeController shouldDiscardLocation:(CLLocation * _Nonnull)location SWIFT_WARN_UNUSED_RESULT;
/// Called immediately after the route controller receives a new route.
/// This method is called after <code>routeController(_:willRerouteFrom:)</code> and simultaneously with the <code>RouteControllerDidReroute</code> notification being posted.
/// \param routeController The route controller that has calculated a new route.
///
/// \param route The new route.
///
/// \param reason Describes the reason of the reroute. Could be due to a faster route / updating ETA or when the user diverted from the suggested route
///
- (void)routeController:(MBRouteController * _Nonnull)routeController didRerouteAlongRoute:(MBRoute * _Nonnull)route reason:(enum RerouteReason)reason;
/// Called when the route controller fails to receive a new route.
/// This method is called after <code>routeController(_:willRerouteFrom:)</code> and simultaneously with the <code>RouteControllerDidFailToReroute</code> notification being posted.
/// \param routeController The route controller that has calculated a new route.
///
/// \param error An error raised during the process of obtaining a new route.
///
- (void)routeController:(MBRouteController * _Nonnull)routeController didFailToRerouteWithError:(NSError * _Nonnull)error;
/// Called when the route controller’s location manager receives a location update.
/// These locations may be modified due to replay or simulation and can
/// also derive from regular location updates from a <code>CLLocationManager</code>.
/// \param routeController The route controller that received the new locations.
///
/// \param locations The locations that were received from the associated location manager.
///
- (void)routeController:(MBRouteController * _Nonnull)routeController didUpdateLocations:(NSArray<CLLocation *> * _Nonnull)locations;
/// Called when the route controller arrives at a waypoint.
/// You can implement this method to prevent the route controller from automatically advancing to the next leg. For example, you can and show an interstitial sheet upon arrival and pause navigation by returning <code>false</code>, then continue the route when the user dismisses the sheet. If this method is unimplemented, the route controller automatically advances to the next leg when arriving at a waypoint.
/// postcondition:
/// If you return false, you must manually advance to the next leg: obtain the value of the <code>routeProgress</code> property, then increment the <code>RouteProgress.legIndex</code> property.
/// \param routeController The route controller that has arrived at a waypoint.
///
/// \param waypoint The waypoint that the controller has arrived at.
///
///
/// returns:
/// True to advance to the next leg, if any, or false to remain on the completed leg.
- (BOOL)routeController:(MBRouteController * _Nonnull)routeController didArriveAtWaypoint:(MBWaypoint * _Nonnull)waypoint SWIFT_WARN_UNUSED_RESULT;
/// Called when the route controller arrives at a waypoint.
/// You can implement this method to allow the route controller to continue check and reroute the user if needed. By default, the user will not be rerouted when arriving at a waypoint.
/// \param routeController The route controller that has arrived at a waypoint.
///
/// \param waypoint The waypoint that the controller has arrived at.
///
///
/// returns:
/// True to prevent the route controller from checking if the user should be rerouted.
- (BOOL)routeController:(MBRouteController * _Nonnull)routeController shouldPreventReroutesWhenArrivingAtWaypoint:(MBWaypoint * _Nonnull)waypoint SWIFT_WARN_UNUSED_RESULT;
/// Called when the route controller will disable battery monitoring.
/// Implementing this method will allow developers to change whether battery monitoring is disabled when <code>RouteController</code> is deinited.
/// \param routeController The route controller that will change the state of battery monitoring.
///
///
/// returns:
/// A bool indicating whether to disable battery monitoring when the RouteController is deinited.
- (BOOL)routeControllerShouldDisableBatteryMonitoring:(MBRouteController * _Nonnull)routeController SWIFT_WARN_UNUSED_RESULT;
- (void)routeController:(MBRouteController * _Nonnull)routeController didUpdateUserLocation:(CLLocation * _Nonnull)locations;
@end


SWIFT_AVAILABILITY(ios,introduced=12.0)
@interface MBCarPlayNavigationViewController (SWIFT_EXTENSION(OlaMapNavigationSDK)) <MBRouteControllerDelegate>
- (BOOL)routeController:(MBRouteController * _Nonnull)routeController didArriveAtWaypoint:(MBWaypoint * _Nonnull)waypoint SWIFT_WARN_UNUSED_RESULT;
@end

@class MBStyleManager;
@class MBStyle;

/// The <code>StyleManagerDelegate</code> protocol defines a set of methods used for controlling the style.
SWIFT_PROTOCOL_NAMED("StyleManagerDelegate")
@protocol MBStyleManagerDelegate <NSObject>
/// Asks the delegate for a location to use when calculating sunset and sunrise.
- (CLLocation * _Nullable)locationForStyleManager:(MBStyleManager * _Nonnull)styleManager SWIFT_WARN_UNUSED_RESULT;
@optional
/// Informs the delegate that a style was applied.
- (void)styleManager:(MBStyleManager * _Nonnull)styleManager didApply:(MBStyle * _Nonnull)style;
/// Informs the delegate that the manager forcefully refreshed UIAppearance.
- (void)styleManagerDidRefreshAppearance:(MBStyleManager * _Nonnull)styleManager;
@end


SWIFT_AVAILABILITY(ios,introduced=12.0)
@interface MBCarPlayNavigationViewController (SWIFT_EXTENSION(OlaMapNavigationSDK)) <MBStyleManagerDelegate>
- (CLLocation * _Nullable)locationForStyleManager:(MBStyleManager * _Nonnull)styleManager SWIFT_WARN_UNUSED_RESULT;
- (void)styleManager:(MBStyleManager * _Nonnull)styleManager didApply:(MBStyle * _Nonnull)style;
- (void)styleManagerDidRefreshAppearance:(MBStyleManager * _Nonnull)styleManager;
@end


/// :nodoc:
SWIFT_CLASS_NAMED("LineView")
@interface MBLineView : UIView
@property (nonatomic, strong) UIColor * _Nonnull lineColor;
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
@end


/// :nodoc:
IB_DESIGNABLE
SWIFT_CLASS_NAMED("DashedLineView")
@interface MBDashedLineView : MBLineView
@property (nonatomic) IBInspectable CGFloat dashedLength;
@property (nonatomic) IBInspectable CGFloat dashedGap;
- (void)layoutSubviews;
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS_NAMED("DataCache")
@interface MBDataCache : NSObject <MBBimodalDataCache>
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
- (void)store:(NSData * _Nonnull)data forKey:(NSString * _Nonnull)key toDisk:(BOOL)toDisk completion:(void (^ _Nullable)(void))completion;
- (NSData * _Nullable)dataForKey:(NSString * _Nullable)key SWIFT_WARN_UNUSED_RESULT;
- (void)clearMemory;
- (void)clearDiskWithCompletion:(void (^ _Nullable)(void))completion;
@end

enum MBStyleType : NSInteger;
@class NSURL;

/// <code>Style</code> is a convenient wrapper for styling the appearance of various interface components throughout the Navigation UI.
/// Styles are applied globally using <code>UIAppearance</code>. You should call <code>Style.apply()</code> to apply the style to the <code>NavigationViewController</code>.
SWIFT_CLASS_NAMED("Style")
@interface MBStyle : NSObject
/// Sets the tint color for guidance arrow, highlighted text, progress bar and more.
@property (nonatomic, strong) UIColor * _Nullable tintColor;
/// Sets the font family for all labels.
@property (nonatomic, copy) NSString * _Nullable fontFamily;
/// Describes the situations in which the style should be used. By default, the style will be used during the daytime.
@property (nonatomic) enum MBStyleType styleType;
/// URL of the style to display on the map during turn-by-turn navigation.
@property (nonatomic, copy) NSURL * _Nonnull mapStyleURL;
/// URL of the style to display on the map when previewing a route, for example on CarPlay.
@property (nonatomic, copy) NSURL * _Nonnull previewMapStyleURL;
/// Applies the style for all changed properties.
- (void)apply;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/// <code>DefaultStyle</code> is default style for Mapbox Navigation SDK.
SWIFT_CLASS_NAMED("DayStyle")
@interface MBDayStyle : MBStyle
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
- (void)apply;
@end


/// :nodoc:
SWIFT_CLASS_NAMED("DismissButton")
@interface MBDismissButton : MBButton
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
@end

@class NSUnitLength;
@class NSAttributedString;

/// Provides appropriately formatted, localized descriptions of linear distances.
SWIFT_CLASS_NAMED("DistanceFormatter")
@interface MBDistanceFormatter : NSLengthFormatter
/// Intializes a new <code>DistanceFormatter</code>.
/// \param approximate approximates the distances.
///
- (nonnull instancetype)initWithApproximate:(BOOL)approximate OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)decoder OBJC_DESIGNATED_INITIALIZER;
- (void)encodeWithCoder:(NSCoder * _Nonnull)aCoder;
/// Returns a more human readable <code>String</code> from a given <code>CLLocationDistance</code>.
/// The user’s <code>Locale</code> is used here to set the units.
- (NSString * _Nonnull)stringFrom:(CLLocationDistance)distance SWIFT_WARN_UNUSED_RESULT;
- (NSString * _Nonnull)stringFromMeters:(double)numberInMeters SWIFT_WARN_UNUSED_RESULT;
- (NSMeasurement<NSUnitLength *> * _Nonnull)measurementOfDistance:(CLLocationDistance)distance SWIFT_WARN_UNUSED_RESULT SWIFT_AVAILABILITY(ios,introduced=10.0);
/// Returns an attributed string containing the formatted, converted distance.
/// <code>NSAttributedStringKey.quantity</code> is applied to the numeric quantity.
- (NSAttributedString * _Nullable)attributedStringForObjectValue:(id _Nonnull)obj withDefaultAttributes:(NSDictionary<NSAttributedStringKey, id> * _Nullable)attrs SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// :nodoc:
SWIFT_CLASS_NAMED("DistanceLabel")
@interface MBDistanceLabel : MBStylableLabel
@property (nonatomic, strong) UIColor * _Nonnull valueTextColor;
@property (nonatomic, strong) UIColor * _Nonnull unitTextColor;
@property (nonatomic, strong) UIFont * _Nonnull valueFont;
@property (nonatomic, strong) UIFont * _Nonnull unitFont;
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
@end


/// :nodoc:
SWIFT_CLASS_NAMED("DistanceRemainingLabel")
@interface MBDistanceRemainingLabel : MBStylableLabel
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
@end


/// :nodoc:
SWIFT_CLASS_NAMED("EndOfRouteButton")
@interface MBEndOfRouteButton : MBStylableButton
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
@end

@class NSTextContainer;

/// :nodoc:
SWIFT_CLASS_NAMED("StylableTextView")
@interface MBStylableTextView : UITextView
@property (nonatomic, strong) UIColor * _Nonnull normalTextColor;
- (nonnull instancetype)initWithFrame:(CGRect)frame textContainer:(NSTextContainer * _Nullable)textContainer OBJC_DESIGNATED_INITIALIZER SWIFT_AVAILABILITY(ios,introduced=7.0);
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
@end


/// :nodoc:
SWIFT_CLASS_NAMED("EndOfRouteCommentView")
@interface MBEndOfRouteCommentView : MBStylableTextView
- (nonnull instancetype)initWithFrame:(CGRect)frame textContainer:(NSTextContainer * _Nullable)textContainer OBJC_DESIGNATED_INITIALIZER SWIFT_AVAILABILITY(ios,introduced=7.0);
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
@end


/// :nodoc:
SWIFT_CLASS_NAMED("EndOfRouteContentView")
@interface MBEndOfRouteContentView : UIView
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
@end

@class NSNumber;

/// Feedback Model Object for End Of Route Experience.
SWIFT_CLASS("_TtC19OlaMapNavigationSDK18EndOfRouteFeedback")
@interface EndOfRouteFeedback : NSObject
- (nonnull instancetype)initWithRating:(NSNumber * _Nullable)ratingNumber comment:(NSString * _Nullable)comment;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// :nodoc:
SWIFT_CLASS_NAMED("EndOfRouteStaticLabel")
@interface MBEndOfRouteStaticLabel : MBStylableLabel
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
@end


/// :nodoc:
SWIFT_CLASS_NAMED("EndOfRouteTitleLabel")
@interface MBEndOfRouteTitleLabel : MBStylableLabel
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
@end

enum MBFeedbackType : NSInteger;

/// A single feedback item displayed on an instance of <code>FeedbackViewController</code>.
SWIFT_CLASS_NAMED("FeedbackItem")
@interface MBFeedbackItem : NSObject
/// The title of feedback item. This will be rendered directly below the image.
@property (nonatomic, copy) NSString * _Nonnull title;
/// An image representation of the feedback.
@property (nonatomic, strong) UIImage * _Nonnull image;
/// The type of feedback that best describes the event.
@property (nonatomic) enum MBFeedbackType feedbackType;
/// Creates a new <code>FeedbackItem</code>.
- (nonnull instancetype)initWithTitle:(NSString * _Nonnull)title image:(UIImage * _Nonnull)image feedbackType:(enum MBFeedbackType)feedbackType OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

typedef SWIFT_ENUM_NAMED(NSInteger, MBFeedbackSource, "FeedbackSource", open) {
  MBFeedbackSourceUser = 0,
  MBFeedbackSourceReroute = 1,
  MBFeedbackSourceUnknown = 2,
};

/// Feedback type is used to specify the type of feedback being recorded with <code>RouteController.recordFeedback()</code>.
typedef SWIFT_ENUM_NAMED(NSInteger, MBFeedbackType, "FeedbackType", open) {
/// Indicates general feedback. You should provide a <code>description</code> string to <code>RouteController.recordFeedback()</code> to elaborate on the feedback if possible.
  MBFeedbackTypeGeneral = 0,
/// Identifies the feedback as the location of an accident or crash
  MBFeedbackTypeAccident = 1,
/// Identifies the feedback as the location of a road hazard such as debris, stopped vehicles, etc.
  MBFeedbackTypeHazard = 2,
/// Identifies the feedback as the location of a closed road that should not allow vehicles
  MBFeedbackTypeRoadClosed = 3,
/// Identifies the feedback as a maneuver that isn’t allowed. For example, if a user is instructed to make a left turn, but the turn isn’t allowed.
  MBFeedbackTypeNotAllowed = 4,
/// Identifies the feedback as the location of a road that should exist along the route.
  MBFeedbackTypeMissingRoad = 5,
/// Identifies the feedback as a maneuver with missing exit information such as an exit number or destination sign.
  MBFeedbackTypeMissingExit = 6,
/// Identifies the feedback as the location of a poor instruction or route choice. This could be used to indicate an ambiguous or poorly-timed turn announcement, or a set of confusing turns.
  MBFeedbackTypeRoutingError = 7,
/// Identifies the feedback as the location of a confusing instruction.
  MBFeedbackTypeConfusingInstruction = 8,
/// Identifies the feedback as a place where traffic should have been reported.
  MBFeedbackTypeReportTraffic = 9,
/// Identifies the feedback as a general map issue.
  MBFeedbackTypeMapIssue = 10,
};


/// :nodoc:
SWIFT_CLASS_NAMED("FloatingButton")
@interface MBFloatingButton : MBButton
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
@end


/// :nodoc
SWIFT_CLASS_NAMED("StylableView")
@interface MBStylableView : UIView
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
@end


/// <code>GenericRouteShield</code> is a class to render routes that do not have route-shields.
SWIFT_CLASS("_TtC19OlaMapNavigationSDK18GenericRouteShield")
@interface GenericRouteShield : MBStylableView
- (nonnull instancetype)initWithFrame:(CGRect)frame SWIFT_UNAVAILABLE;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
@end



/// :nodoc:
/// <code>HighlightedButton</code> sets the button’s titleColor for normal control state according to the style in addition to the styling behavior inherited from
/// <code>Button</code>.
SWIFT_CLASS_NAMED("HighlightedButton")
@interface MBHighlightedButton : MBButton
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC19OlaMapNavigationSDK28IncidentReportViewController")
@interface IncidentReportViewController : UIViewController
- (void)viewDidLoad;
- (void)viewWillAppear:(BOOL)animated;
- (nonnull instancetype)initWithNibName:(NSString * _Nullable)nibNameOrNil bundle:(NSBundle * _Nullable)nibBundleOrNil OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
@end

@class UICollectionView;
@class UICollectionViewLayout;
@class NSIndexPath;

@interface IncidentReportViewController (SWIFT_EXTENSION(OlaMapNavigationSDK)) <UICollectionViewDelegateFlowLayout>
- (CGSize)collectionView:(UICollectionView * _Nonnull)collectionView layout:(UICollectionViewLayout * _Nonnull)collectionViewLayout sizeForItemAtIndexPath:(NSIndexPath * _Nonnull)indexPath SWIFT_WARN_UNUSED_RESULT;
@end



@class UICollectionViewCell;

@interface IncidentReportViewController (SWIFT_EXTENSION(OlaMapNavigationSDK)) <UICollectionViewDataSource, UICollectionViewDelegate>
- (NSInteger)collectionView:(UICollectionView * _Nonnull)collectionView numberOfItemsInSection:(NSInteger)section SWIFT_WARN_UNUSED_RESULT;
- (UICollectionViewCell * _Nonnull)collectionView:(UICollectionView * _Nonnull)collectionView cellForItemAtIndexPath:(NSIndexPath * _Nonnull)indexPath SWIFT_WARN_UNUSED_RESULT;
- (void)collectionView:(UICollectionView * _Nonnull)collectionView didSelectItemAtIndexPath:(NSIndexPath * _Nonnull)indexPath;
@end


/// :nodoc:
SWIFT_CLASS_NAMED("InstructionLabel")
@interface MBInstructionLabel : MBStylableLabel
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
@end


/// :nodoc:
SWIFT_CLASS_NAMED("InstructionsBannerContentView")
@interface MBInstructionsBannerContentView : UIView
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
@end


/// :nodoc:
IB_DESIGNABLE
SWIFT_CLASS_NAMED("InstructionsBannerView")
@interface MBInstructionsBannerView : BaseInstructionsBannerView
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
@end


/// <code>InstructionsBannerViewDelegate</code> provides methods for reacting to user interactions in <code>InstructionsBannerView</code>.
SWIFT_PROTOCOL_NAMED("InstructionsBannerViewDelegate")
@protocol MBInstructionsBannerViewDelegate
@optional
/// Called when the user taps the <code>InstructionsBannerView</code>.
- (void)didTapInstructionsBanner:(BaseInstructionsBannerView * _Nonnull)sender;
/// Called when the user drags either up or down on the <code>InstructionsBannerView</code>.
- (void)didDragInstructionsBanner:(BaseInstructionsBannerView * _Nonnull)sender;
@end


/// :nodoc:
SWIFT_CLASS_NAMED("LaneView")
@interface MBLaneView : UIView
@property (nonatomic, readonly) CGSize intrinsicContentSize;
@property (nonatomic, strong) UIColor * _Nonnull primaryColor;
@property (nonatomic, strong) UIColor * _Nonnull secondaryColor;
- (void)drawRect:(CGRect)rect;
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS_NAMED("LanesStyleKit")
@interface MBLanesStyleKit : NSObject
/// / Drawing Methods
+ (void)drawLane_straight_rightWithPrimaryColor:(UIColor * _Nonnull)primaryColor;
+ (void)drawLane_straight_onlyWithPrimaryColor:(UIColor * _Nonnull)primaryColor secondaryColor:(UIColor * _Nonnull)secondaryColor;
+ (void)drawLane_right_hWithPrimaryColor:(UIColor * _Nonnull)primaryColor;
+ (void)drawLane_right_onlyWithPrimaryColor:(UIColor * _Nonnull)primaryColor secondaryColor:(UIColor * _Nonnull)secondaryColor;
+ (void)drawLane_straightWithPrimaryColor:(UIColor * _Nonnull)primaryColor;
+ (void)drawLane_uturnWithPrimaryColor:(UIColor * _Nonnull)primaryColor;
+ (void)drawLane_slight_rightWithPrimaryColor:(UIColor * _Nonnull)primaryColor scale:(CGFloat)scale;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/// :nodoc:
IB_DESIGNABLE
SWIFT_CLASS_NAMED("LanesView")
@interface MBLanesView : UIView
- (nonnull instancetype)initWithFrame:(CGRect)frame SWIFT_UNAVAILABLE;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
- (void)prepareForInterfaceBuilder;
/// Updates the tertiary instructions banner info with a given <code>VisualInstructionBanner</code>.
- (void)updateForVisualInstructionBanner:(MBVisualInstructionBanner * _Nullable)visualInstruction;
@end




@interface MGLStyle (SWIFT_EXTENSION(OlaMapNavigationSDK))
/// Returns the URL to the current version of the Mapbox Navigation Guidance Day style.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSURL * _Nonnull navigationGuidanceDayStyleURL;)
+ (NSURL * _Nonnull)navigationGuidanceDayStyleURL SWIFT_WARN_UNUSED_RESULT;
/// Returns the URL to the current version of the Mapbox Navigation Guidance Night style.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSURL * _Nonnull navigationGuidanceNightStyleURL;)
+ (NSURL * _Nonnull)navigationGuidanceNightStyleURL SWIFT_WARN_UNUSED_RESULT;
/// Returns the URL to the given version of the navigation guidance style. Available version are 1, 2, 3, and 4.
/// We only have one version of navigation guidance style in China, so if you switch your endpoint to .cn, it will return the default day style.
+ (NSURL * _Nonnull)navigationGuidanceDayStyleURLWithVersion:(NSInteger)version SWIFT_WARN_UNUSED_RESULT;
/// Returns the URL to the given version of the navigation guidance style. Available version are 2, 3, and 4.
/// We only have one version of navigation guidance style in China, so if you switch your endpoint to .cn, it will return the default night style.
+ (NSURL * _Nonnull)navigationGuidanceNightStyleURLWithVersion:(NSInteger)version SWIFT_WARN_UNUSED_RESULT;
/// Returns the URL to the current version of the Mapbox Navigation Preview Day style.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSURL * _Nonnull navigationPreviewDayStyleURL;)
+ (NSURL * _Nonnull)navigationPreviewDayStyleURL SWIFT_WARN_UNUSED_RESULT;
/// Returns the URL to the current version of the Mapbox Navigation Preview Night style.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSURL * _Nonnull navigationPreviewNightStyleURL;)
+ (NSURL * _Nonnull)navigationPreviewNightStyleURL SWIFT_WARN_UNUSED_RESULT;
/// Returns the URL to the given version of the Mapbox Navigation Preview Day style. Available versions are 1, 2, 3, and 4.
/// We only have one version of Navigation Preview style in China, so if you switch your endpoint to .cn, it will return the default day style.
+ (NSURL * _Nonnull)navigationPreviewDayStyleURLWithVersion:(NSInteger)version SWIFT_WARN_UNUSED_RESULT;
/// Returns the URL to the given version of the Mapbox Navigation Preview Night style. Available versions are 2, 3, and 4.
/// We only have one version of Navigation Preview style in China, so if you switch your endpoint to .cn, it will return the default night style.
+ (NSURL * _Nonnull)navigationPreviewNightStyleURLWithVersion:(NSInteger)version SWIFT_WARN_UNUSED_RESULT;
@end



/// :nodoc:
SWIFT_CLASS_NAMED("ManeuverContainerView")
@interface MBManeuverContainerView : UIView
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
@end

@class MBVisualInstruction;

/// :nodoc:
IB_DESIGNABLE
SWIFT_CLASS_NAMED("ManeuverView")
@interface MBManeuverView : UIView
@property (nonatomic, strong) UIColor * _Nonnull primaryColor;
@property (nonatomic, strong) UIColor * _Nonnull secondaryColor;
@property (nonatomic) BOOL isStart;
@property (nonatomic) BOOL isEnd;
/// The current instruction displayed in the maneuver view.
@property (nonatomic, strong) MBVisualInstruction * _Nullable visualInstruction;
/// This indicates the side of the road currently driven on.
@property (nonatomic) enum MBDrivingSide drivingSide;
- (void)drawRect:(CGRect)rect;
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
@end

enum ManeuversStyleKitResizingBehavior : NSInteger;

SWIFT_CLASS_NAMED("ManeuversStyleKit")
@interface MBManeuversStyleKit : NSObject
/// / Drawing Methods
+ (void)drawArrow180rightWithFrame:(CGRect)targetFrame resizing:(enum ManeuversStyleKitResizingBehavior)resizing primaryColor:(UIColor * _Nonnull)primaryColor size:(CGSize)size;
+ (void)drawArrowrightWithFrame:(CGRect)targetFrame resizing:(enum ManeuversStyleKitResizingBehavior)resizing primaryColor:(UIColor * _Nonnull)primaryColor size:(CGSize)size;
+ (void)drawArrowslightrightWithFrame:(CGRect)targetFrame resizing:(enum ManeuversStyleKitResizingBehavior)resizing primaryColor:(UIColor * _Nonnull)primaryColor size:(CGSize)size;
+ (void)drawArrowstraightWithFrame:(CGRect)targetFrame resizing:(enum ManeuversStyleKitResizingBehavior)resizing primaryColor:(UIColor * _Nonnull)primaryColor size:(CGSize)size;
+ (void)drawArrowsharprightWithFrame:(CGRect)targetFrame resizing:(enum ManeuversStyleKitResizingBehavior)resizing primaryColor:(UIColor * _Nonnull)primaryColor size:(CGSize)size;
+ (void)drawArriveWithFrame:(CGRect)targetFrame resizing:(enum ManeuversStyleKitResizingBehavior)resizing primaryColor:(UIColor * _Nonnull)primaryColor size:(CGSize)size;
+ (void)drawStartingWithFrame:(CGRect)targetFrame resizing:(enum ManeuversStyleKitResizingBehavior)resizing primaryColor:(UIColor * _Nonnull)primaryColor size:(CGSize)size;
+ (void)drawDestinationWithFrame:(CGRect)targetFrame resizing:(enum ManeuversStyleKitResizingBehavior)resizing primaryColor:(UIColor * _Nonnull)primaryColor size:(CGSize)size;
+ (void)drawMergeWithFrame:(CGRect)targetFrame resizing:(enum ManeuversStyleKitResizingBehavior)resizing primaryColor:(UIColor * _Nonnull)primaryColor secondaryColor:(UIColor * _Nonnull)secondaryColor size:(CGSize)size;
+ (void)drawForkWithFrame:(CGRect)targetFrame resizing:(enum ManeuversStyleKitResizingBehavior)resizing primaryColor:(UIColor * _Nonnull)primaryColor secondaryColor:(UIColor * _Nonnull)secondaryColor size:(CGSize)size;
+ (void)drawOfframpWithFrame:(CGRect)targetFrame resizing:(enum ManeuversStyleKitResizingBehavior)resizing primaryColor:(UIColor * _Nonnull)primaryColor secondaryColor:(UIColor * _Nonnull)secondaryColor size:(CGSize)size;
+ (void)drawArriverightWithFrame:(CGRect)targetFrame resizing:(enum ManeuversStyleKitResizingBehavior)resizing primaryColor:(UIColor * _Nonnull)primaryColor size:(CGSize)size;
+ (void)drawRoundaboutWithFrame:(CGRect)targetFrame resizing:(enum ManeuversStyleKitResizingBehavior)resizing primaryColor:(UIColor * _Nonnull)primaryColor secondaryColor:(UIColor * _Nonnull)secondaryColor size:(CGSize)size roundabout_angle:(CGFloat)roundabout_angle roundabout_radius:(CGFloat)roundabout_radius;
+ (void)drawArriveright2WithFrame:(CGRect)targetFrame resizing:(enum ManeuversStyleKitResizingBehavior)resizing primaryColor:(UIColor * _Nonnull)primaryColor size:(CGSize)size;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

typedef SWIFT_ENUM_NAMED(NSInteger, ManeuversStyleKitResizingBehavior, "ResizingBehavior", open) {
  ManeuversStyleKitResizingBehaviorAspectFit = 0,
/// The content is proportionally resized to fit into the target rectangle.
  ManeuversStyleKitResizingBehaviorAspectFill = 1,
/// The content is proportionally resized to completely fill the target rectangle.
  ManeuversStyleKitResizingBehaviorStretch = 2,
/// The content is stretched to match the entire target rectangle.
  ManeuversStyleKitResizingBehaviorCenter = 3,
};


/// Map Picker where you can choose center coordinate
SWIFT_CLASS("_TtC19OlaMapNavigationSDK23MapPickerViewController")
@interface MapPickerViewController : UIViewController
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder SWIFT_UNAVAILABLE;
- (void)viewDidLoad;
- (nonnull instancetype)initWithNibName:(NSString * _Nullable)nibNameOrNil bundle:(NSBundle * _Nullable)nibBundleOrNil SWIFT_UNAVAILABLE;
@end

@class AVAudioPlayer;
@class AVSpeechSynthesizer;
@class AVSpeechUtterance;
@class NSNotification;

/// The <code>RouteVoiceController</code> class provides voice guidance.
SWIFT_CLASS_NAMED("RouteVoiceController")
@interface MBRouteVoiceController : NSObject <AVSpeechSynthesizerDelegate>
/// If true, a noise indicating the user is going to be rerouted will play prior to rerouting.
@property (nonatomic) BOOL playRerouteSound;
/// Sound to play prior to reroute. Inherits volume level from <code>volume</code>.
@property (nonatomic, strong) AVAudioPlayer * _Nonnull rerouteSoundPlayer;
/// Default initializer for <code>RouteVoiceController</code>.
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
- (void)speechSynthesizer:(AVSpeechSynthesizer * _Nonnull)synthesizer didFinishSpeechUtterance:(AVSpeechUtterance * _Nonnull)utterance;
- (void)didPassSpokenInstructionPointWithNotification:(NSNotification * _Nonnull)notification;
@end

@class MBSpeechSynthesizer;
@class MBSpokenInstruction;

/// <code>MapboxVoiceController</code> extends the default <code>RouteVoiceController</code> by providing a more robust speech synthesizer via the Mapbox Speech API. <code>RouteVoiceController</code> will be used as a fallback during poor network conditions.
SWIFT_CLASS_NAMED("MapboxVoiceController")
@interface MBMapboxVoiceController : MBRouteVoiceController <AVAudioPlayerDelegate>
/// Number of seconds a request can wait before it is canceled and the default speech synthesizer speaks the instruction.
@property (nonatomic) NSTimeInterval timeoutIntervalForRequest;
/// Number of steps ahead of the current step to cache spoken instructions.
@property (nonatomic) NSInteger stepsAheadToCache;
/// An <code>AVAudioPlayer</code> through which spoken instructions are played.
@property (nonatomic, strong) AVAudioPlayer * _Nullable audioPlayer;
- (nonnull instancetype)initWithSpeechClient:(MBSpeechSynthesizer * _Nonnull)speechClient dataCache:(id <MBBimodalDataCache> _Nonnull)dataCache audioPlayerType:(SWIFT_METATYPE(AVAudioPlayer) _Nullable)audioPlayerType OBJC_DESIGNATED_INITIALIZER;
- (void)audioPlayerDidFinishPlaying:(AVAudioPlayer * _Nonnull)player successfully:(BOOL)flag;
- (void)didPassSpokenInstructionPointWithNotification:(NSNotification * _Nonnull)notification;
/// Speaks an instruction.
/// The cache is first checked to see if we have already downloaded the speech file. If not, the instruction is fetched and played. If there is an error anywhere along the way, the instruction will be spoken with the default speech synthesizer.
- (void)speak:(MBSpokenInstruction * _Nonnull)instruction;
/// Speaks an instruction with the built in speech synthesizer.
/// This method should be used in cases where <code>fetch(instruction:)</code> or <code>play(_:)</code> fails.
- (void)speakWithDefaultSpeechSynthesizer:(MBSpokenInstruction * _Nonnull)instruction error:(NSError * _Nullable)error;
/// Fetches and plays an instruction.
- (void)fetchAndSpeakWithInstruction:(MBSpokenInstruction * _Nonnull)instruction;
/// Caches an instruction in an in-memory cache.
- (void)downloadAndCacheSpokenInstructionWithInstruction:(MBSpokenInstruction * _Nonnull)instruction;
/// Plays an audio file.
- (void)play:(NSData * _Nonnull)data;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// :nodoc:
SWIFT_CLASS_NAMED("MarkerView")
@interface MBMarkerView : UIView
@property (nonatomic, strong) UIColor * _Nonnull innerColor;
@property (nonatomic, strong) UIColor * _Nonnull shadowColor;
@property (nonatomic, strong) UIColor * _Nonnull pinColor;
@property (nonatomic, strong) UIColor * _Nonnull strokeColor;
@property (nonatomic, readonly) CGSize intrinsicContentSize;
- (void)layoutSubviews;
- (void)drawRect:(CGRect)rect;
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
@end






/// <code>NavigationLocationManager</code> is the base location manager which handles permissions and background modes.
SWIFT_CLASS_NAMED("NavigationLocationManager")
@interface MBNavigationLocationManager : CLLocationManager <NSCopying>
- (id _Nonnull)copyWithZone:(struct _NSZone * _Nullable)zone SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

@class MBUserPuckCourseView;
@class UIGestureRecognizer;
@class MGLMapCamera;

/// <code>NavigationMapView</code> is a subclass of <code>MGLMapView</code> with convenience functions for adding <code>Route</code> lines to a map.
SWIFT_CLASS_NAMED("NavigationMapView")
@interface MBNavigationMapView : MGLMapView <UIGestureRecognizerDelegate>
@property (nonatomic) CLLocationDistance defaultAltitude;
@property (nonatomic) BOOL isWalking;
@property (nonatomic) BOOL isSolidPolylineType;
@property (nonatomic) CLLocationDistance zoomedOutMotorwayAltitude;
/// Returns the threshold for what the map considers a “long-enough” maneuver distance to trigger a zoom-out when the user enters a motorway.
@property (nonatomic) CLLocationDistance longManeuverDistance;
/// Maximum distance the user can tap for a selection to be valid when selecting an alternate route.
@property (nonatomic) CGFloat tapGestureDistanceThreshold;
@property (nonatomic, strong) UIColor * _Nonnull trafficUnknownColor;
@property (nonatomic, strong) UIColor * _Nonnull trafficLowColor;
@property (nonatomic, strong) UIColor * _Nonnull trafficModerateColor;
@property (nonatomic, strong) UIColor * _Nonnull trafficHeavyColor;
@property (nonatomic, strong) UIColor * _Nonnull trafficSevereColor;
@property (nonatomic, strong) UIColor * _Nonnull routeLineColor;
@property (nonatomic, strong) UIColor * _Nonnull routeLineAlternativeColor;
@property (nonatomic, strong) UIColor * _Nonnull routeLineCasingColor;
@property (nonatomic, strong) UIColor * _Nonnull routeLineCasingAlternativeColor;
@property (nonatomic, strong) UIColor * _Nonnull maneuverArrowColor;
@property (nonatomic, strong) UIColor * _Nonnull maneuverArrowStrokeColor;
@property (nonatomic) BOOL showsUserLocation;
/// A <code>UIView</code> used to indicate the user’s location and course on the map.
/// If the view conforms to <code>UserCourseView</code>, its <code>UserCourseView.update(location:pitch:direction:animated:)</code> method is frequently called to ensure that its visual appearance matches the map’s camera.
@property (nonatomic, strong) MBUserPuckCourseView * _Nullable userCourseView;
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)decoder OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithFrame:(CGRect)frame styleURL:(NSURL * _Nullable)styleURL OBJC_DESIGNATED_INITIALIZER;
- (void)prepareForInterfaceBuilder;
- (void)layoutSubviews;
- (CGPoint)anchorPointForGesture:(UIGestureRecognizer * _Nonnull)gesture SWIFT_WARN_UNUSED_RESULT;
- (void)mapViewDidFinishRenderingFrameFullyRendered:(BOOL)fullyRendered;
- (void)updateCourseTrackingWithLocation:(CLLocation * _Nullable)location camera:(MGLMapCamera * _Nullable)camera animated:(BOOL)animated;
- (void)showcase:(NSArray<MBRoute *> * _Nonnull)routes padding:(UIEdgeInsets)padding animated:(BOOL)animated;
/// Adds or updates both the route line and the route line casing
- (void)showRoutes:(NSArray<MBRoute *> * _Nonnull)routes legIndex:(NSInteger)legIndex;
/// Removes route line and route line casing from map
- (void)removeRoutes;
/// Adds the route waypoints to the map given the current leg index. Previous waypoints for completed legs will be omitted.
- (void)showWaypoints:(MBRoute * _Nonnull)route legIndex:(NSInteger)legIndex;
/// Removes all waypoints from the map.
- (void)removeWaypoints;
/// Shows the step arrow given the current <code>RouteProgress</code>.
- (void)addArrowWithRoute:(MBRoute * _Nonnull)route legIndex:(NSInteger)legIndex stepIndex:(NSInteger)stepIndex;
/// Removes the step arrow from the map.
- (void)removeArrow;
/// Attempts to localize road labels into the local language and other labels
/// into the system’s preferred language.
/// When this property is enabled, the style automatically modifies the <code>text</code>
/// property of any symbol style layer whose source is the
/// <a href="https://www.mapbox.com/vector-tiles/mapbox-streets-v7/#overview">Mapbox
/// Streets source</a>. On iOS, the user can set the system’s preferred
/// language in Settings, General Settings, Language & Region.
/// Unlike the <code>MGLStyle.localizeLabels(into:)</code> method, this method localizes
/// road labels into the local language, regardless of the system’s preferred
/// language, in an effort to match road signage. The turn banner always
/// displays road names and exit destinations in the local language, so you
/// should call this method in the
/// <code>MGLMapViewDelegate.mapView(_:didFinishLoading:)</code> method of any delegate of
/// a standalone <code>NavigationMapView</code>. The map view embedded in
/// <code>NavigationViewController</code> is localized automatically, so you do not need
/// to call this method on the value of <code>NavigationViewController.mapView</code>.
- (void)localizeLabels;
- (void)showVoiceInstructionsOnMapWithRoute:(MBRoute * _Nonnull)route;
/// Sets the camera directly over a series of coordinates.
- (void)setOverheadCameraViewFrom:(CLLocationCoordinate2D)userLocation along:(NSArray<NSValue *> * _Nonnull)coordinates for:(UIEdgeInsets)bounds;
/// Recenters the camera and begins tracking the user’s location.
- (void)recenterMap;
@end



/// The <code>NavigationMapViewCourseTrackingDelegate</code> provides methods for responding to the <code>NavigationMapView</code> starting or stopping course tracking.
SWIFT_PROTOCOL_NAMED("NavigationMapViewCourseTrackingDelegate")
@protocol MBNavigationMapViewCourseTrackingDelegate
@optional
/// Tells the receiver that the map is now tracking the user course.
/// seealso:
/// NavigationMapView.tracksUserCourse
/// \param mapView The NavigationMapView.
///
- (void)navigationMapViewDidStartTrackingCourse:(MBNavigationMapView * _Nonnull)mapView;
/// Tells the receiver that <code>tracksUserCourse</code> was set to false, signifying that the map is no longer tracking the user course.
/// seealso:
/// NavigationMapView.tracksUserCourse
/// \param mapView The NavigationMapView.
///
- (void)navigationMapViewDidStopTrackingCourse:(MBNavigationMapView * _Nonnull)mapView;
@end


/// A <code>NavigationMatchOptions</code> object specifies turn-by-turn-optimized criteria for results returned by the Mapbox Map Matching API.
/// <code>NavigationMatchOptions</code> is a subclass of <code>MatchOptions</code> that has been optimized for navigation. Pass an instance of this class into the <code>Directions.calculateRoutes(matching:completionHandler:).</code> method.
/// Note: it is very important you specify the <code>waypoints</code> for the route. Usually the only two values for this <code>IndexSet</code> will be 0 and the length of the coordinates. Otherwise, all coordinates passed through will be considered waypoints.
SWIFT_RESILIENT_CLASS_NAMED("NavigationMatchOptions")
@interface MBNavigationMatchOptions : MBMatchOptions
/// Initializes a navigation route options object for routes between the given waypoints and an optional profile identifier optimized for navigation.
/// seealso:
///
/// <a href="https://www.mapbox.com/mapbox-navigation-ios/directions/0.19.0/Classes/MatchOptions.html">MatchOptions</a>
- (nonnull instancetype)initWithWaypoints:(NSArray<MBWaypoint *> * _Nonnull)waypoints profileIdentifier:(MBDirectionsProfileIdentifier _Nullable)profileIdentifier OBJC_DESIGNATED_INITIALIZER;
/// Initializes a navigation match options object for routes between the given locations and an optional profile identifier optimized for navigation.
/// seealso:
///
/// <a href="https://www.mapbox.com/mapbox-navigation-ios/directions/0.19.0/Classes/MatchOptions.html">MatchOptions</a>
- (nonnull instancetype)initWithLocations:(NSArray<CLLocation *> * _Nonnull)locations profileIdentifier:(MBDirectionsProfileIdentifier _Nullable)profileIdentifier;
/// Initializes a navigation match options object for routes between the given geographic coordinates and an optional profile identifier optimized for navigation.
/// seealso:
///
/// <a href="https://www.mapbox.com/mapbox-navigation-ios/directions/0.19.0/Classes/MatchOptions.html">MatchOptions</a>
- (nonnull instancetype)initWithCoordinates:(NSArray<NSValue *> * _Nonnull)coordinates profileIdentifier:(MBDirectionsProfileIdentifier _Nullable)profileIdentifier;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)decoder OBJC_DESIGNATED_INITIALIZER;
@end


/// A <code>NavigationRouteOptions</code> object specifies turn-by-turn-optimized criteria for results returned by the Mapbox Directions API.
/// <code>NavigationRouteOptions</code> is a subclass of <code>RouteOptions</code> that has been optimized for navigation. Pass an instance of this class into the <code>Directions.calculate(_:completionHandler:)</code> method.
SWIFT_RESILIENT_CLASS("_TtC19OlaMapNavigationSDK22NavigationRouteOptions")
@interface NavigationRouteOptions : MBRouteOptions
/// Initializes a navigation route options object for routes between the given waypoints and an optional profile identifier optimized for navigation.
/// seealso:
///
/// <a href="https://www.mapbox.com/mapbox-navigation-ios/directions/0.10.1/Classes/RouteOptions.html">RouteOptions</a>
- (nonnull instancetype)initWithWaypoints:(NSArray<MBWaypoint *> * _Nonnull)waypoints profileIdentifier:(MBDirectionsProfileIdentifier _Nullable)profileIdentifier OBJC_DESIGNATED_INITIALIZER;
/// Initializes a navigation route options object for routes between the given locations and an optional profile identifier optimized for navigation.
/// seealso:
///
/// <a href="https://www.mapbox.com/mapbox-navigation-ios/directions/0.19.0/Classes/RouteOptions.html">RouteOptions</a>
- (nonnull instancetype)initWithLocations:(NSArray<CLLocation *> * _Nonnull)locations profileIdentifier:(MBDirectionsProfileIdentifier _Nullable)profileIdentifier;
/// Initializes a route options object for routes between the given geographic coordinates and an optional profile identifier optimized for navigation.
/// seealso:
///
/// <a href="https://www.mapbox.com/mapbox-navigation-ios/directions/0.19.0/Classes/RouteOptions.html">RouteOptions</a>
- (nonnull instancetype)initWithCoordinates:(NSArray<NSValue *> * _Nonnull)coordinates profileIdentifier:(MBDirectionsProfileIdentifier _Nullable)profileIdentifier;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)decoder OBJC_DESIGNATED_INITIALIZER;
@end


/// <code>NavigationSettings</code> provides a wrapper for UserDefaults.
/// Properties are prefixed and before they are stored in UserDefaults.standard.
SWIFT_CLASS_NAMED("NavigationSettings")
@interface MBNavigationSettings : NSObject
/// The volume that the voice controller will use.
/// This volume is relative to the system’s volume where 1.0 is same volume as the system.
@property (nonatomic) float voiceVolume;
/// Specifies whether to mute the voice controller or not.
@property (nonatomic) BOOL voiceMuted;
/// Specifies the preferred distance measurement unit.
/// note:
/// Anything but <code>kilometer</code> and <code>mile</code> will fall back to the default measurement for the current locale.
/// Meters and feets will be used when the presented distances are small enough. See <code>DistanceFormatter</code> for more information.
@property (nonatomic) NSLengthFormatterUnit distanceUnit;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
- (void)observeValueForKeyPath:(NSString * _Nullable)keyPath ofObject:(id _Nullable)object change:(NSDictionary<NSKeyValueChangeKey, id> * _Nullable)change context:(void * _Nullable)context;
@end


/// A view that represents the root view of the MapboxNavigation drop-in UI.
/// <h2>Components</h2>
/// <ol>
///   <li>
///     InstructionsBannerView
///   </li>
///   <li>
///     InformationStackView
///   </li>
///   <li>
///     BottomBannerView
///   </li>
///   <li>
///     ResumeButton
///   </li>
///   <li>
///     WayNameLabel
///   </li>
///   <li>
///     FloatingStackView
///   </li>
///   <li>
///     NavigationMapView
///   </li>
/// </ol>
/// \code
/// +--------------------+
/// |         1          |
/// +--------------------+
/// |         2          |
/// +----------------+---+
/// |                |   |
/// |                | 6 |
/// |                |   |
/// |         7      +---+
/// |                    |
/// |                    |
/// |                    |
/// +------------+       |
/// |  4  ||  5  |       |
/// +------------+-------+
/// |         3          |
/// +--------------------+
///
/// \endcode
IB_DESIGNABLE
SWIFT_CLASS_NAMED("NavigationView")
@interface MBNavigationView : UIView
- (nonnull instancetype)initWithFrame:(CGRect)frame SWIFT_UNAVAILABLE;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
- (void)prepareForInterfaceBuilder;
@end


@class MBDirections;

/// <code>NavigationViewController</code> is a fully-featured turn-by-turn navigation UI.
/// It provides step by step instructions, an overview of all steps for the given route and support for basic styling.
/// seealso:
/// CarPlayNavigationViewController
SWIFT_CLASS_NAMED("NavigationViewController")
@interface MBNavigationViewController : UIViewController
/// \code
/// A `Route` object constructed by [MapboxDirections](https://mapbox.github.io/mapbox-navigation-ios/directions/).
///
/// In cases where you need to update the route after navigation has started you can set a new `route` here and `NavigationViewController` will update its UI accordingly.
///
/// \endcode
@property (nonatomic, strong) MBRoute * _Null_unspecified route;
/// An instance of <code>Directions</code> need for rerouting. See <a href="https://mapbox.github.io/mapbox-navigation-ios/directions/">Mapbox Directions</a> for further information.
@property (nonatomic, strong) MBDirections * _Null_unspecified directions;
/// An optional <code>MGLMapCamera</code> you can use to improve the initial transition from a previous viewport and prevent a trigger from an excessive significant location update.
@property (nonatomic, strong) MGLMapCamera * _Nullable pendingCamera;
/// An instance of <code>MGLAnnotation</code> representing the origin of your route.
@property (nonatomic, strong) id <MGLAnnotation> _Nullable origin;
/// Provides access to various speech synthesizer options.
/// See <code>RouteVoiceController</code> for more information.
@property (nonatomic, strong) MBRouteVoiceController * _Null_unspecified voiceController;
/// Provides all routing logic for the user.
/// See <code>RouteController</code> for more information.
@property (nonatomic, strong) MBRouteController * _Null_unspecified routeController;
/// The main map view displayed inside the view controller.
/// note:
/// Do not change this map view’s delegate.
@property (nonatomic, readonly, strong) MBNavigationMapView * _Nullable mapView;
/// Determines whether the user location annotation is moved from the raw user location reported by the device to the nearest location along the route.
/// By default, this property is set to <code>true</code>, causing the user location annotation to be snapped to the route.
@property (nonatomic) BOOL snapsUserLocationAnnotationToRoute;
/// Toggles sending of UILocalNotification upon upcoming steps when application is in the background. Defaults to <code>true</code>.
@property (nonatomic) BOOL sendsNotifications;
/// Shows a button that allows drivers to report feedback such as accidents, closed roads,  poor instructions, etc. Defaults to <code>true</code>.
@property (nonatomic) BOOL showsReportFeedback;
/// Shows End of route Feedback UI when the route controller arrives at the final destination. Defaults to <code>true.</code>
@property (nonatomic) BOOL showsEndOfRouteFeedback;
/// If true, the map style and UI will automatically be updated given the time of day.
@property (nonatomic) BOOL automaticallyAdjustsStyleForTimeOfDay;
/// If <code>true</code>, <code>UIApplication.isIdleTimerDisabled</code> is set to <code>true</code> in <code>viewWillAppear(_:)</code> and <code>false</code> in <code>viewWillDisappear(_:)</code>. If your application manages the idle timer itself, set this property to <code>false</code>.
@property (nonatomic) BOOL shouldManageApplicationIdleTimer;
/// Bool which should be set to true if a CarPlayNavigationView is also being used.
@property (nonatomic) BOOL isUsedInConjunctionWithCarPlayWindow;
/// A Boolean value that determines whether the map annotates the locations at which instructions are spoken for debugging purposes.
@property (nonatomic) BOOL annotatesSpokenInstructions;
@property (nonatomic, readonly) UIStatusBarStyle preferredStatusBarStyle;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
- (void)viewDidLoad;
- (void)viewWillAppear:(BOOL)animated;
- (void)viewWillDisappear:(BOOL)animated;
- (nonnull instancetype)initWithNibName:(NSString * _Nullable)nibNameOrNil bundle:(NSBundle * _Nullable)nibBundleOrNil SWIFT_UNAVAILABLE;
@end


@interface MBNavigationViewController (SWIFT_EXTENSION(OlaMapNavigationSDK))
- (void)routeController:(MBRouteController * _Nonnull)routeController didUpdateUserLocation:(CLLocation * _Nonnull)locations;
@end

@class MBTunnelIntersectionManager;

/// The <code>TunnelIntersectionManagerDelegate</code> protocol provides methods for responding to events where a user enters or exits a tunnel.
SWIFT_PROTOCOL_NAMED("TunnelIntersectionManagerDelegate")
@protocol MBTunnelIntersectionManagerDelegate
@optional
/// Called immediately when the location manager detects a user will enter a tunnel.
/// \param manager The <code>TunnelIntersectionManager</code> that currently sends the location updates.
///
/// \param location The user’s current location where the tunnel was detected.
///
- (void)tunnelIntersectionManager:(MBTunnelIntersectionManager * _Nonnull)manager willEnableAnimationAtLocation:(CLLocation * _Nonnull)location;
/// Called immediately when the location manager detects the user will exit a tunnel.
/// \param manager The <code>TunnelIntersectionManager</code> that currently sends the location updates.
///
/// \param location The user’s current location where the tunnel was detected.
///
- (void)tunnelIntersectionManager:(MBTunnelIntersectionManager * _Nonnull)manager willDisableAnimationAtLocation:(CLLocation * _Nonnull)location;
@end


@interface MBNavigationViewController (SWIFT_EXTENSION(OlaMapNavigationSDK)) <MBTunnelIntersectionManagerDelegate>
- (void)tunnelIntersectionManager:(MBTunnelIntersectionManager * _Nonnull)manager willEnableAnimationAtLocation:(CLLocation * _Nonnull)location;
- (void)tunnelIntersectionManager:(MBTunnelIntersectionManager * _Nonnull)manager willDisableAnimationAtLocation:(CLLocation * _Nonnull)location;
@end


@interface MBNavigationViewController (SWIFT_EXTENSION(OlaMapNavigationSDK)) <MBStyleManagerDelegate>
- (CLLocation * _Nullable)locationForStyleManager:(MBStyleManager * _Nonnull)styleManager SWIFT_WARN_UNUSED_RESULT;
- (void)styleManager:(MBStyleManager * _Nonnull)styleManager didApply:(MBStyle * _Nonnull)style;
- (void)styleManagerDidRefreshAppearance:(MBStyleManager * _Nonnull)styleManager;
@end


@interface MBNavigationViewController (SWIFT_EXTENSION(OlaMapNavigationSDK)) <MBRouteControllerDelegate>
- (BOOL)routeController:(MBRouteController * _Nonnull)routeController shouldRerouteFromLocation:(CLLocation * _Nonnull)location SWIFT_WARN_UNUSED_RESULT;
- (void)routeController:(MBRouteController * _Nonnull)routeController willRerouteFromLocation:(CLLocation * _Nonnull)location;
- (void)routeController:(MBRouteController * _Nonnull)routeController didRerouteAlong:(MBRoute * _Nonnull)route;
- (void)routeController:(MBRouteController * _Nonnull)routeController didFailToRerouteWithError:(NSError * _Nonnull)error;
- (BOOL)routeController:(MBRouteController * _Nonnull)routeController shouldDiscardLocation:(CLLocation * _Nonnull)location SWIFT_WARN_UNUSED_RESULT;
- (void)routeController:(MBRouteController * _Nonnull)routeController didUpdateLocations:(NSArray<CLLocation *> * _Nonnull)locations;
- (BOOL)routeController:(MBRouteController * _Nonnull)routeController didArriveAtWaypoint:(MBWaypoint * _Nonnull)waypoint SWIFT_WARN_UNUSED_RESULT;
@end


/// The <code>VoiceControllerDelegate</code> protocol defines a method that allows an object to customize presented visual instructions.
SWIFT_PROTOCOL_NAMED("VisualInstructionDelegate")
@protocol MBVisualInstructionDelegate
@optional
/// Called when an InstructionLabel will present a visual instruction.
/// \param label The label that the instruction will be presented on.
///
/// \param instruction the <code>VisualInstruction</code> that will be presented.
///
/// \param presented the formatted string that is provided by the instruction presenter
///
///
/// returns:
/// optionally, a customized NSAttributedString that will be presented instead of the default, or if nil, the default behavior will be used.
- (NSAttributedString * _Nullable)label:(MBInstructionLabel * _Nonnull)label willPresentVisualInstruction:(MBVisualInstruction * _Nonnull)instruction asAttributedString:(NSAttributedString * _Nonnull)presented SWIFT_WARN_UNUSED_RESULT;
@end

@class MGLSource;
@class MGLStyleLayer;
@class MGLShape;
@class MGLAnnotationImage;

@interface MBNavigationViewController (SWIFT_EXTENSION(OlaMapNavigationSDK))
- (MGLStyleLayer * _Nullable)navigationMapView:(MBNavigationMapView * _Nonnull)mapView routeCasingStyleLayerWithIdentifier:(NSString * _Nonnull)identifier source:(MGLSource * _Nonnull)source SWIFT_WARN_UNUSED_RESULT;
- (MGLStyleLayer * _Nullable)navigationMapView:(MBNavigationMapView * _Nonnull)mapView routeStyleLayerWithIdentifier:(NSString * _Nonnull)identifier source:(MGLSource * _Nonnull)source SWIFT_WARN_UNUSED_RESULT;
- (void)navigationMapView:(MBNavigationMapView * _Nonnull)mapView didSelectRoute:(MBRoute * _Nonnull)route;
- (MGLShape * _Nullable)navigationMapView:(MBNavigationMapView * _Nonnull)mapView shapeForRoutes:(NSArray<MBRoute *> * _Nonnull)routes SWIFT_WARN_UNUSED_RESULT;
- (MGLShape * _Nullable)navigationMapView:(MBNavigationMapView * _Nonnull)mapView simplifiedShapeForRoute:(MBRoute * _Nonnull)route SWIFT_WARN_UNUSED_RESULT;
- (MGLStyleLayer * _Nullable)navigationMapView:(MBNavigationMapView * _Nonnull)mapView waypointStyleLayerWithIdentifier:(NSString * _Nonnull)identifier source:(MGLSource * _Nonnull)source SWIFT_WARN_UNUSED_RESULT;
- (MGLStyleLayer * _Nullable)navigationMapView:(MBNavigationMapView * _Nonnull)mapView waypointSymbolStyleLayerWithIdentifier:(NSString * _Nonnull)identifier source:(MGLSource * _Nonnull)source SWIFT_WARN_UNUSED_RESULT;
- (MGLShape * _Nullable)navigationMapView:(MBNavigationMapView * _Nonnull)mapView shapeForWaypoints:(NSArray<MBWaypoint *> * _Nonnull)waypoints legIndex:(NSInteger)legIndex SWIFT_WARN_UNUSED_RESULT;
- (MGLAnnotationImage * _Nullable)navigationMapView:(MGLMapView * _Nonnull)mapView imageForAnnotation:(id <MGLAnnotation> _Nonnull)annotation SWIFT_WARN_UNUSED_RESULT;
- (MGLAnnotationView * _Nullable)navigationMapView:(MGLMapView * _Nonnull)mapView viewForAnnotation:(id <MGLAnnotation> _Nonnull)annotation SWIFT_WARN_UNUSED_RESULT;
- (CGPoint)navigationMapViewUserAnchorPoint:(MBNavigationMapView * _Nonnull)mapView SWIFT_WARN_UNUSED_RESULT;
- (NSAttributedString * _Nullable)label:(MBInstructionLabel * _Nonnull)label willPresentVisualInstruction:(MBVisualInstruction * _Nonnull)instruction asAttributedString:(NSAttributedString * _Nonnull)presented SWIFT_WARN_UNUSED_RESULT;
- (void)mapView:(MGLMapView * _Nonnull)mapView regionDidChangeWith:(MGLCameraChangeReason)reason animated:(BOOL)animated;
@end


/// :nodoc:
IB_DESIGNABLE
SWIFT_CLASS_NAMED("NextBannerView")
@interface MBNextBannerView : UIView
- (nonnull instancetype)initWithFrame:(CGRect)frame SWIFT_UNAVAILABLE;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
- (void)prepareForInterfaceBuilder;
/// Updates the instructions banner info with a given <code>VisualInstructionBanner</code>.
- (void)updateForVisualInstructionBanner:(MBVisualInstructionBanner * _Nullable)visualInstruction;
@end


/// :nodoc:
SWIFT_CLASS_NAMED("NextInstructionLabel")
@interface MBNextInstructionLabel : MBInstructionLabel
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
@end


/// <code>NightStyle</code> is the default night style for Mapbox Navigation SDK. Only will be applied when necessary and if <code>automaticallyAdjustStyleForSunPosition</code>.
SWIFT_CLASS_NAMED("NightStyle")
@interface MBNightStyle : MBDayStyle
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
- (void)apply;
@end



SWIFT_CLASS("_TtC19OlaMapNavigationSDK11OlaGeofence")
@interface OlaGeofence : NSObject
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

@class CLRegion;

@interface OlaGeofence (SWIFT_EXTENSION(OlaMapNavigationSDK)) <CLLocationManagerDelegate>
- (void)locationManager:(CLLocationManager * _Nonnull)manager didExitRegion:(CLRegion * _Nonnull)region;
- (void)locationManager:(CLLocationManager * _Nonnull)manager didEnterRegion:(CLRegion * _Nonnull)region;
@end


SWIFT_CLASS("_TtC19OlaMapNavigationSDK13OlaMapService")
@interface OlaMapService : NSObject
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

















@protocol MGLLocationManager;
@class MGLPolyline;
@class MGLPolygon;

@interface OlaMapService (SWIFT_EXTENSION(OlaMapNavigationSDK)) <MGLMapViewDelegate>
- (void)mapView:(MGLMapView * _Nonnull)mapView tapOnCalloutForAnnotation:(id <MGLAnnotation> _Nonnull)annotation;
- (void)mapView:(MGLMapView * _Nonnull)mapView didFailToLocateUserWithError:(NSError * _Nonnull)error;
- (void)mapViewWillStartLoadingMap:(MGLMapView * _Nonnull)mapView;
- (void)mapViewRegionIsChanging:(MGLMapView * _Nonnull)mapView;
- (void)mapViewDidFailLoadingMap:(MGLMapView * _Nonnull)mapView withError:(NSError * _Nonnull)error;
- (void)mapView:(MGLMapView * _Nonnull)mapView didAddAnnotationViews:(NSArray<MGLAnnotationView *> * _Nonnull)annotationViews;
- (void)mapViewDidBecomeIdle:(MGLMapView * _Nonnull)mapView;
- (void)mapView:(MGLMapView * _Nonnull)mapView regionDidChangeWithReason:(MGLCameraChangeReason)reason animated:(BOOL)animated;
- (void)mapView:(MGLMapView * _Nonnull)mapView didChangeLocationManagerAuthorization:(id <MGLLocationManager> _Nonnull)manager;
- (void)mapView:(MGLMapView * _Nonnull)mapView regionDidChangeAnimated:(BOOL)animated;
- (void)mapView:(MGLMapView * _Nonnull)mapView didChangeUserTrackingMode:(MGLUserTrackingMode)mode animated:(BOOL)animated;
- (UIImage * _Nullable)mapView:(MGLMapView * _Nonnull)mapView didFailToLoadImage:(NSString * _Nonnull)imageName SWIFT_WARN_UNUSED_RESULT;
- (void)mapView:(MGLMapView * _Nonnull)mapView didFinishLoadingStyle:(MGLStyle * _Nonnull)style;
- (void)mapViewDidFinishLoadingMap:(MGLMapView * _Nonnull)mapView;
- (void)mapViewDidFinishRenderingMap:(MGLMapView * _Nonnull)mapView fullyRendered:(BOOL)fullyRendered;
- (void)mapViewDidFinishRenderingFrame:(MGLMapView * _Nonnull)mapView fullyRendered:(BOOL)fullyRendered;
- (MGLAnnotationView * _Nullable)mapView:(MGLMapView * _Nonnull)mapView viewForAnnotation:(id <MGLAnnotation> _Nonnull)annotation SWIFT_WARN_UNUSED_RESULT;
- (BOOL)mapView:(MGLMapView * _Nonnull)mapView annotationCanShowCallout:(id <MGLAnnotation> _Nonnull)annotation SWIFT_WARN_UNUSED_RESULT;
- (UIColor * _Nonnull)mapView:(MGLMapView * _Nonnull)mapView strokeColorForShapeAnnotation:(MGLShape * _Nonnull)annotation SWIFT_WARN_UNUSED_RESULT;
- (CGFloat)mapView:(MGLMapView * _Nonnull)mapView lineWidthForPolylineAnnotation:(MGLPolyline * _Nonnull)annotation SWIFT_WARN_UNUSED_RESULT;
- (CGFloat)mapView:(MGLMapView * _Nonnull)mapView alphaForShapeAnnotation:(MGLShape * _Nonnull)annotation SWIFT_WARN_UNUSED_RESULT;
- (UIColor * _Nonnull)mapView:(MGLMapView * _Nonnull)mapView fillColorForPolygonAnnotation:(MGLPolygon * _Nonnull)annotation SWIFT_WARN_UNUSED_RESULT;
- (void)mapView:(MGLMapView * _Nonnull)mapView didSelectAnnotation:(id <MGLAnnotation> _Nonnull)annotation;
- (void)mapView:(MGLMapView * _Nonnull)mapView didSelectAnnotationView:(MGLAnnotationView * _Nonnull)annotationView;
- (BOOL)mapView:(MGLMapView * _Nonnull)mapView shouldChangeFromCamera:(MGLMapCamera * _Nonnull)oldCamera toCamera:(MGLMapCamera * _Nonnull)newCamera SWIFT_WARN_UNUSED_RESULT;
- (void)mapView:(MGLMapView * _Nonnull)mapView regionIsChangingWithReason:(MGLCameraChangeReason)reason;
@end


SWIFT_CLASS("_TtC19OlaMapNavigationSDK9PopupView")
@interface PopupView : OlaAnnotationView
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder SWIFT_UNAVAILABLE;
@end


/// :nodoc:
SWIFT_CLASS_NAMED("PrimaryLabel")
@interface MBPrimaryLabel : MBInstructionLabel
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
@end



/// :nodoc:
SWIFT_CLASS_NAMED("ProgressBar")
@interface MBProgressBar : UIView
@property (nonatomic, strong) UIColor * _Nonnull barColor;
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
- (void)layoutSubviews;
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
@end


/// <code>ReplayLocationManager</code> replays an array of locations exactly as they were
/// recorded with the single exception of the location’s timestamp which will be
/// adjusted by interval between locations.
SWIFT_CLASS_NAMED("ReplayLocationManager")
@interface MBReplayLocationManager : MBNavigationLocationManager
/// <code>speedMultiplier</code> adjusts the speed of the replay.
@property (nonatomic) NSTimeInterval speedMultiplier;
/// <code>locations</code> to be replayed.
@property (nonatomic, copy) NSArray<CLLocation *> * _Null_unspecified locations;
@property (nonatomic, readonly, strong) CLLocation * _Nullable location;
- (void)startUpdatingLocation;
- (void)stopUpdatingLocation;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// :nodoc:
SWIFT_CLASS_NAMED("ReportButton")
@interface MBReportButton : MBButton
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
@end


/// :nodoc:
IB_DESIGNABLE
SWIFT_CLASS_NAMED("ResumeButton")
@interface MBResumeButton : UIControl
@property (nonatomic, strong) UIColor * _Null_unspecified tintColor;
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
- (void)prepareForInterfaceBuilder;
@end


@class MBRouteProgress;

SWIFT_PROTOCOL("_TtP19OlaMapNavigationSDK6Router_")
@protocol Router <CLLocationManagerDelegate>
@property (nonatomic, readonly, strong) MBNavigationLocationManager * _Null_unspecified locationManager;
@property (nonatomic, readonly) BOOL usesDefaultUserInterface;
@property (nonatomic, readonly, strong) MBRouteProgress * _Nonnull routeProgress;
- (void)endNavigation;
@property (nonatomic, readonly, strong) CLLocation * _Nullable location;
@end


/// A <code>RouteController</code> tracks the user’s progress along a route, posting notifications as the user reaches significant points along the route. On every location update, the route controller evaluates the user’s location, determining whether the user remains on the route. If not, the route controller calculates a new route.
/// <code>RouteController</code> is responsible for the core navigation logic whereas
/// <code>NavigationViewController</code> is responsible for displaying a default drop-in navigation UI.
SWIFT_CLASS_NAMED("RouteController")
@interface MBRouteController : NSObject <Router>
/// The route controller’s delegate.
@property (nonatomic, weak) id <MBRouteControllerDelegate> _Nullable delegate;
/// The route controller’s associated location manager.
@property (nonatomic, strong) MBNavigationLocationManager * _Null_unspecified locationManager;
/// The Directions object used to create the route.
@property (nonatomic, strong) MBDirections * _Nonnull directions;
/// If true, location updates will be simulated when driving through tunnels or other areas where there is none or bad GPS reception.
@property (nonatomic) BOOL isDeadReckoningEnabled;
/// If true, the <code>RouteController</code> attempts to calculate a more optimal route for the user on an interval defined by <code>routeControllerProactiveReroutingInterval</code>.
@property (nonatomic) BOOL reroutesProactively;
/// Details about the user’s progress along the current route, leg, and step.
@property (nonatomic, strong) MBRouteProgress * _Nonnull routeProgress;
/// :nodoc: This is used internally when the navigation UI is being used
@property (nonatomic) BOOL usesDefaultUserInterface;
@property (nonatomic) BOOL userHasArrivedAtDestinationRegion;
- (nonnull instancetype)initWithRoute:(MBRoute * _Nonnull)route directions:(MBDirections * _Nonnull)directions locationManager:(MBNavigationLocationManager * _Nonnull)locationManager OBJC_DESIGNATED_INITIALIZER;
/// Starts monitoring the user’s location along the route.
/// Will continue monitoring until <code>suspendLocationUpdates()</code> is called.
- (void)resume;
/// Stops monitoring the user’s location along the route.
- (void)suspendLocationUpdates;
/// Ends the current navigation session.
- (void)endNavigation;
/// The idealized user location. Snapped to the route line, if applicable, otherwise raw.
/// seealso:
/// snappedLocation, rawLocation
@property (nonatomic, readonly, strong) CLLocation * _Nullable location;
@property (nonatomic, readonly) CLLocationDistance reroutingTolerance;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

/// Describes a reason for rerouting and applying a new route
typedef SWIFT_ENUM(NSInteger, RerouteReason, open) {
/// When we check for a faster route we can also reroute the user when we just want to update the ETA. For example when the user is driving on a route where a Trafficjam appears, it should update the ETA
  RerouteReasonETAUpdate = 0,
/// When the user diverts from the route, we reroute to take the new diversion into account
  RerouteReasonDivertedFromRoute = 1,
/// When the route is faster than the current route, we can also reroute the user
  RerouteReasonFasterRoute = 2,
};


@interface MBRouteController (SWIFT_EXTENSION(OlaMapNavigationSDK)) <MBTunnelIntersectionManagerDelegate>
- (void)tunnelIntersectionManager:(MBTunnelIntersectionManager * _Nonnull)manager willEnableAnimationAtLocation:(CLLocation * _Nonnull)location;
- (void)tunnelIntersectionManager:(MBTunnelIntersectionManager * _Nonnull)manager willDisableAnimationAtLocation:(CLLocation * _Nonnull)location;
@end

@class CLHeading;

@interface MBRouteController (SWIFT_EXTENSION(OlaMapNavigationSDK)) <CLLocationManagerDelegate>
- (void)locationManager:(CLLocationManager * _Nonnull)manager didUpdateHeading:(CLHeading * _Nonnull)newHeading;
- (void)locationManager:(CLLocationManager * _Nonnull)manager didUpdateLocations:(NSArray<CLLocation *> * _Nonnull)locations;
/// Given a users current location, returns a Boolean whether they are currently on the route.
/// If the user is not on the route, they should be rerouted.
- (BOOL)userIsOnRoute:(CLLocation * _Nonnull)location SWIFT_WARN_UNUSED_RESULT;
@end


@class MBRouteLeg;
@class MBRouteStep;
@class MBRouteStepProgress;

/// <code>RouteLegProgress</code> stores the user’s progress along a route leg.
SWIFT_CLASS_NAMED("RouteLegProgress")
@interface MBRouteLegProgress : NSObject
/// Returns the current <code>RouteLeg</code>.
@property (nonatomic, readonly, strong) MBRouteLeg * _Nonnull leg;
/// Index representing the current step.
@property (nonatomic) NSInteger stepIndex;
/// The remaining steps for user to complete.
@property (nonatomic, readonly, copy) NSArray<MBRouteStep *> * _Nonnull remainingSteps;
/// Total distance traveled in meters along current leg.
@property (nonatomic, readonly) CLLocationDistance distanceTraveled;
/// Duration remaining in seconds on current leg.
@property (nonatomic, readonly) NSTimeInterval durationRemaining;
/// Distance remaining on the current leg.
@property (nonatomic, readonly) CLLocationDistance distanceRemaining;
/// Number between 0 and 1 representing how far along the current leg the user has traveled.
@property (nonatomic, readonly) double fractionTraveled;
@property (nonatomic) BOOL userHasArrivedAtWaypoint;
/// Returns the <code>RouteStep</code> before a given step. Returns <code>nil</code> if there is no step prior.
- (MBRouteStep * _Nullable)stepBefore:(MBRouteStep * _Nonnull)step SWIFT_WARN_UNUSED_RESULT;
/// Returns the <code>RouteStep</code> after a given step. Returns <code>nil</code> if there is not a step after.
- (MBRouteStep * _Nullable)stepAfter:(MBRouteStep * _Nonnull)step SWIFT_WARN_UNUSED_RESULT;
/// Returns the <code>RouteStep</code> before the current step.
/// If there is no <code>priorStep</code>, nil is returned.
@property (nonatomic, readonly, strong) MBRouteStep * _Nullable priorStep;
/// Returns the current <code>RouteStep</code> for the leg the user is on.
@property (nonatomic, readonly, strong) MBRouteStep * _Nonnull currentStep;
/// Returns the upcoming <code>RouteStep</code>.
/// If there is no <code>upcomingStep</code>, nil is returned.
@property (nonatomic, readonly, strong) MBRouteStep * _Nullable upComingStep;
/// Returns step 2 steps ahead.
/// If there is no <code>followOnStep</code>, nil is returned.
@property (nonatomic, readonly, strong) MBRouteStep * _Nullable followOnStep;
/// Return bool whether step provided is the current <code>RouteStep</code> the user is on.
- (BOOL)isCurrentStep:(MBRouteStep * _Nonnull)step SWIFT_WARN_UNUSED_RESULT;
/// Returns the progress along the current <code>RouteStep</code>.
@property (nonatomic, strong) MBRouteStepProgress * _Nonnull currentStepProgress;
/// Intializes a new <code>RouteLegProgress</code>.
/// \param leg Leg on a <code>Route</code>.
///
/// \param stepIndex Current step the user is on.
///
- (nonnull instancetype)initWithLeg:(MBRouteLeg * _Nonnull)leg stepIndex:(NSInteger)stepIndex spokenInstructionIndex:(NSInteger)spokenInstructionIndex OBJC_DESIGNATED_INITIALIZER;
/// Returns an array of <code>CLLocationCoordinate2D</code> of the prior, current and upcoming step geometry.
@property (nonatomic, readonly, copy) NSArray<NSValue *> * _Nonnull nearbyCoordinates;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end



/// <code>RouteProgress</code> stores the user’s progress along a route.
SWIFT_CLASS_NAMED("RouteProgress")
@interface MBRouteProgress : NSObject
/// Returns the current <code>Route</code>.
@property (nonatomic, readonly, strong) MBRoute * _Nonnull route;
/// Index representing current <code>RouteLeg</code>.
@property (nonatomic) NSInteger legIndex;
/// If waypoints are provided in the <code>Route</code>, this will contain which leg the user is on.
@property (nonatomic, readonly, strong) MBRouteLeg * _Nonnull currentLeg;
/// Total distance traveled by user along all legs.
@property (nonatomic, readonly) CLLocationDistance distanceTraveled;
/// Total seconds remaining on all legs.
@property (nonatomic, readonly) NSTimeInterval durationRemaining;
/// Number between 0 and 1 representing how far along the <code>Route</code> the user has traveled.
@property (nonatomic, readonly) double fractionTraveled;
/// Total distance remaining in meters along route.
@property (nonatomic, readonly) CLLocationDistance distanceRemaining;
/// Number of waypoints remaining on the current route.
@property (nonatomic, readonly, copy) NSArray<MBWaypoint *> * _Nonnull remainingWaypoints;
/// Returns the progress along the current <code>RouteLeg</code>.
@property (nonatomic, strong) MBRouteLegProgress * _Nonnull currentLegProgress;
/// Intializes a new <code>RouteProgress</code>.
/// \param route The route to follow.
///
/// \param legIndex Zero-based index indicating the current leg the user is on.
///
- (nonnull instancetype)initWithRoute:(MBRoute * _Nonnull)route legIndex:(NSInteger)legIndex spokenInstructionIndex:(NSInteger)spokenInstructionIndex OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end



@class MBIntersection;

/// <code>RouteStepProgress</code> stores the user’s progress along a route step.
SWIFT_CLASS_NAMED("RouteStepProgress")
@interface MBRouteStepProgress : NSObject
/// Returns the current <code>RouteStep</code>.
@property (nonatomic, readonly, strong) MBRouteStep * _Nonnull step;
/// Returns distance user has traveled along current step.
@property (nonatomic) CLLocationDistance distanceTraveled;
/// Returns distance from user to end of step.
@property (nonatomic) CLLocationDistance userDistanceToManeuverLocation;
/// Total distance in meters remaining on current step.
@property (nonatomic, readonly) CLLocationDistance distanceRemaining;
/// Number between 0 and 1 representing fraction of current step traveled.
@property (nonatomic, readonly) double fractionTraveled;
/// Number of seconds remaining on current step.
@property (nonatomic, readonly) NSTimeInterval durationRemaining;
/// Intializes a new <code>RouteStepProgress</code>.
/// \param step Step on a <code>RouteLeg</code>.
///
- (nonnull instancetype)initWithStep:(MBRouteStep * _Nonnull)step spokenInstructionIndex:(NSInteger)spokenInstructionIndex OBJC_DESIGNATED_INITIALIZER;
/// All intersections on the current <code>RouteStep</code> and also the first intersection on the upcoming <code>RouteStep</code>.
/// The upcoming <code>RouteStep</code> first <code>Intersection</code> is added because it is omitted from the current step.
@property (nonatomic, copy) NSArray<MBIntersection *> * _Nullable intersectionsIncludingUpcomingManeuverIntersection;
/// The next intersection the user will travel through.
/// The step must contain <code>intersectionsIncludingUpcomingManeuverIntersection</code> otherwise this property will be <code>nil</code>.
@property (nonatomic, readonly, strong) MBIntersection * _Nullable upcomingIntersection;
/// Index representing the current intersection.
@property (nonatomic) NSInteger intersectionIndex;
/// The current intersection the user will travel through.
/// The step must contain <code>intersectionsIncludingUpcomingManeuverIntersection</code> otherwise this property will be <code>nil</code>.
@property (nonatomic, readonly, strong) MBIntersection * _Nullable currentIntersection;
/// Returns an array of the calculated distances from the current intersection to the next intersection on the current step.
@property (nonatomic, copy) NSArray<NSNumber *> * _Nullable intersectionDistances;
/// Index into <code>step.instructionsDisplayedAlongStep</code> representing the current visual instruction for the step.
@property (nonatomic) NSInteger visualInstructionIndex;
/// An <code>Array</code> of remaining <code>VisualInstruction</code> for a step.
@property (nonatomic, readonly, copy) NSArray<MBVisualInstructionBanner *> * _Nullable remainingVisualInstructions;
/// Index into <code>step.instructionsSpokenAlongStep</code> representing the current spoken instruction.
@property (nonatomic) NSInteger spokenInstructionIndex;
/// An <code>Array</code> of remaining <code>SpokenInstruction</code> for a step.
@property (nonatomic, readonly, copy) NSArray<MBSpokenInstruction *> * _Nullable remainingSpokenInstructions;
/// Current spoken instruction for the user’s progress along a step.
@property (nonatomic, readonly, strong) MBSpokenInstruction * _Nullable currentSpokenInstruction;
/// Current visual instruction for the user’s progress along a step.
@property (nonatomic, readonly, strong) MBVisualInstructionBanner * _Nullable currentVisualInstruction;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end




/// :nodoc:
SWIFT_CLASS_NAMED("SecondaryLabel")
@interface MBSecondaryLabel : MBInstructionLabel
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
@end


/// :nodoc:
SWIFT_CLASS_NAMED("SeparatorView")
@interface MBSeparatorView : UIView
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
@end


/// The <code>SimulatedLocationManager</code> class simulates location updates along a given route.
/// The route will be replaced upon a <code>RouteControllerDidReroute</code> notification.
SWIFT_CLASS_NAMED("SimulatedLocationManager")
@interface MBSimulatedLocationManager : MBNavigationLocationManager
/// Specify the multiplier to use when calculating speed based on the RouteLeg’s <code>expectedSegmentTravelTimes</code>.
@property (nonatomic) double speedMultiplier;
@property (nonatomic, readonly, strong) CLLocation * _Nullable location;
- (id _Nonnull)copyWithZone:(struct _NSZone * _Nullable)zone SWIFT_WARN_UNUSED_RESULT;
/// Initalizes a new <code>SimulatedLocationManager</code> with the given route.
/// \param route The initial route.
///
///
/// returns:
/// A <code>SimulatedLocationManager</code>
- (nonnull instancetype)initWithRoute:(MBRoute * _Nonnull)route OBJC_DESIGNATED_INITIALIZER;
/// Initalizes a new <code>SimulatedLocationManager</code> with the given routeProgress.
/// \param routeProgress The routeProgress of the current route.
///
///
/// returns:
/// A <code>SimulatedLocationManager</code>
- (nonnull instancetype)initWithRouteProgress:(MBRouteProgress * _Nonnull)routeProgress OBJC_DESIGNATED_INITIALIZER;
- (void)startUpdatingLocation;
- (void)stopUpdatingLocation;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

typedef SWIFT_ENUM_NAMED(NSUInteger, MBSpeechGender, "SpeechGender", open) {
  MBSpeechGenderFemale = 0,
  MBSpeechGenderMale = 1,
  MBSpeechGenderNeuter = 2,
};

@class NSLocale;

SWIFT_CLASS_NAMED("SpeechOptions")
@interface MBSpeechOptions : NSObject
- (nonnull instancetype)initWithText:(NSString * _Nonnull)text OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithSsml:(NSString * _Nonnull)ssml OBJC_DESIGNATED_INITIALIZER;
/// <code>String</code> to create audiofile for. Can either be plain text or <a href="https://en.wikipedia.org/wiki/Speech_Synthesis_Markup_Language"><code>SSML</code></a>.
/// If <code>SSML</code> is provided, <code>TextType</code> must be <code>TextType.ssml</code>.
@property (nonatomic, copy) NSString * _Nonnull text;
/// Audio format for outputted audio file.
@property (nonatomic) enum MBAudioFormat outputFormat;
/// The locale in which the audio is spoken.
/// By default, the user’s system locale will be used to decide upon an appropriate voice.
@property (nonatomic, copy) NSLocale * _Nonnull locale;
/// Gender of voice speeking text.
/// Note: not all languages have both genders.
@property (nonatomic) enum MBSpeechGender speechGender;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

@class NSError;
@class NSURLSessionDataTask;

/// A <code>SpeechSynthesizer</code> object converts text into spoken audio. Unlike <code>AVSpeechSynthesizer</code>, a <code>SpeechSynthesizer</code> object produces audio by sending an HTTP request to the Mapbox Voice API, which produces more natural-sounding audio in various languages. With a speech synthesizer object, you can asynchronously generate audio data based on the <code>SpeechOptions</code> object you provide, or you can get the URL used to make this request.
/// Use <code>AVAudioPlayer</code> to play the audio that a speech synthesizer object produces.
SWIFT_CLASS_NAMED("SpeechSynthesizer")
@interface MBSpeechSynthesizer : NSObject
/// The shared speech synthesizer object.
/// To use this object, specify a Mapbox <a href="https://www.mapbox.com/help/define-access-token/">access token</a> in the <code>MGLMapboxAccessToken</code> key in the main application bundle’s Info.plist.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) MBSpeechSynthesizer * _Nonnull sharedSpeechSynthesizer;)
+ (MBSpeechSynthesizer * _Nonnull)sharedSpeechSynthesizer SWIFT_WARN_UNUSED_RESULT;
/// Initializes a newly created speech synthesizer object with an optional access token and host.
/// \param accessToken A Mapbox <a href="https://www.mapbox.com/help/define-access-token/">access token</a>. If an access token is not specified when initializing the speech synthesizer object, it should be specified in the <code>MGLMapboxAccessToken</code> key in the main application bundle’s Info.plist.
///
/// \param host An optional hostname to the server API. The Mapbox Voice API endpoint is used by default.
///
- (nonnull instancetype)initWithAccessToken:(NSString * _Nullable)accessToken host:(NSString * _Nullable)host OBJC_DESIGNATED_INITIALIZER;
/// Initializes a newly created speech synthesizer object with an optional access token.
/// \param accessToken A Mapbox <a href="https://www.mapbox.com/help/define-access-token/">access token</a>. If an access token is not specified when initializing the speech synthesizer object, it should be specified in the <code>MGLMapboxAccessToken</code> key in the main application bundle’s Info.plist.
///
- (nonnull instancetype)initWithAccessToken:(NSString * _Nullable)accessToken;
/// Begins asynchronously fetching the audio file.
/// This method retrieves the audio asynchronously over a network connection. If a connection error or server error occurs, details about the error are passed into the given completion handler in lieu of the audio file.
/// \param options A <code>SpeechOptions</code> object specifying the requirements for the resulting audio file.
///
/// \param completionHandler The closure (block) to call with the resulting audio. This closure is executed on the application’s main thread.
///
///
/// returns:
/// The data task used to perform the HTTP request. If, while waiting for the completion handler to execute, you no longer want the resulting audio, cancel this task.
- (NSURLSessionDataTask * _Nonnull)audioDataWithOptions:(MBSpeechOptions * _Nonnull)options completionHandler:(void (^ _Nonnull)(NSData * _Nullable, NSError * _Nullable))completionHandler;
/// The HTTP URL used to fetch audio from the API.
- (NSURL * _Nonnull)URLForSynthesizingSpeechWithOptions:(MBSpeechOptions * _Nonnull)options SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


@protocol StatusViewDelegate;

/// :nodoc:
IB_DESIGNABLE
SWIFT_CLASS_NAMED("StatusView")
@interface MBStatusView : UIView
@property (nonatomic, weak) id <StatusViewDelegate> _Nullable delegate;
@property (nonatomic) BOOL canChangeValue;
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
@end


/// A protocol for listening in on changed mades made to a <code>StatusView</code>.
SWIFT_PROTOCOL("_TtP19OlaMapNavigationSDK18StatusViewDelegate_")
@protocol StatusViewDelegate
@optional
/// Indicates a value in the status view has changed by the user interacting with it.
- (void)statusView:(MBStatusView * _Nonnull)statusView valueChangedTo:(double)value;
@end


/// :nodoc:
SWIFT_CLASS_NAMED("StepInstructionsView")
@interface MBStepInstructionsView : BaseInstructionsBannerView
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
@end


/// :nodoc:
SWIFT_CLASS_NAMED("StepListIndicatorView")
@interface MBDraggableView : UIView
@property (nonatomic, copy) NSArray<UIColor *> * _Nonnull gradientColors;
- (void)layoutSubviews;
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
@end


/// :nodoc:
SWIFT_CLASS_NAMED("StepTableViewCell")
@interface MBStepTableViewCell : UITableViewCell
- (nonnull instancetype)initWithStyle:(UITableViewCellStyle)style reuseIdentifier:(NSString * _Nullable)reuseIdentifier SWIFT_UNAVAILABLE;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
- (void)prepareForReuse;
@end


/// :nodoc:
SWIFT_CLASS_NAMED("StepsBackgroundView")
@interface MBStepsBackgroundView : UIView
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
@end


/// :nodoc:
SWIFT_CLASS_NAMED("StepsViewController")
@interface MBStepsViewController : UIViewController
- (void)viewDidLoad;
- (nonnull instancetype)initWithNibName:(NSString * _Nullable)nibNameOrNil bundle:(NSBundle * _Nullable)nibBundleOrNil OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
@end

@class UITableView;

@interface MBStepsViewController (SWIFT_EXTENSION(OlaMapNavigationSDK)) <UITableViewDelegate>
- (void)tableView:(UITableView * _Nonnull)tableView didSelectRowAtIndexPath:(NSIndexPath * _Nonnull)indexPath;
@end


@interface MBStepsViewController (SWIFT_EXTENSION(OlaMapNavigationSDK)) <UITableViewDataSource>
- (NSInteger)numberOfSectionsInTableView:(UITableView * _Nonnull)tableView SWIFT_WARN_UNUSED_RESULT;
- (NSInteger)tableView:(UITableView * _Nonnull)tableView numberOfRowsInSection:(NSInteger)section SWIFT_WARN_UNUSED_RESULT;
- (CGFloat)tableView:(UITableView * _Nonnull)tableView heightForRowAtIndexPath:(NSIndexPath * _Nonnull)indexPath SWIFT_WARN_UNUSED_RESULT;
- (UITableViewCell * _Nonnull)tableView:(UITableView * _Nonnull)tableView cellForRowAtIndexPath:(NSIndexPath * _Nonnull)indexPath SWIFT_WARN_UNUSED_RESULT;
- (void)tableView:(UITableView * _Nonnull)tableView willDisplayCell:(UITableViewCell * _Nonnull)cell forRowAtIndexPath:(NSIndexPath * _Nonnull)indexPath;
- (NSString * _Nullable)tableView:(UITableView * _Nonnull)tableView titleForHeaderInSection:(NSInteger)section SWIFT_WARN_UNUSED_RESULT;
@end


/// <code>StepsViewControllerDelegate</code> provides methods for user interactions in a <code>StepsViewController</code>.
SWIFT_PROTOCOL("_TtP19OlaMapNavigationSDK27StepsViewControllerDelegate_")
@protocol StepsViewControllerDelegate
@optional
/// Called when the user selects a step in a <code>StepsViewController</code>.
- (void)stepsViewController:(MBStepsViewController * _Nonnull)viewController didSelect:(NSInteger)legIndex stepIndex:(NSInteger)stepIndex cell:(MBStepTableViewCell * _Nonnull)cell;
@required
/// Called when the user dismisses the <code>StepsViewController</code>.
- (void)didDismissStepsViewController:(MBStepsViewController * _Nonnull)viewController;
@end







SWIFT_CLASS_NAMED("StyleKitMarker")
@interface MBStyleKitMarker : NSObject
/// / Drawing Methods
+ (void)drawMarkerWithFrame:(CGRect)frame innerColor:(UIColor * _Nonnull)innerColor shadowColor:(UIColor * _Nonnull)shadowColor pinColor:(UIColor * _Nonnull)pinColor strokeColor:(UIColor * _Nonnull)strokeColor;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/// A manager that handles <code>Style</code> objects. The manager listens for significant time changes
/// and changes to the content size to apply an approriate style for the given condition.
SWIFT_CLASS_NAMED("StyleManager")
@interface MBStyleManager : NSObject
/// The receiver of the delegate. See <code>StyleManagerDelegate</code> for more information.
@property (nonatomic, weak) id <MBStyleManagerDelegate> _Nullable delegate;
/// Determines whether the style manager should apply a new style given the time of day.
/// precondition:
/// Two styles must be provided for this property to have any effect.
@property (nonatomic) BOOL automaticallyAdjustsStyleForTimeOfDay;
/// The styles that are in circulation. Active style is set based on
/// the sunrise and sunset at your current location. A change of
/// preferred content size by the user will also trigger an update.
/// precondition:
/// Two styles must be provided for
/// <code>StyleManager.automaticallyAdjustsStyleForTimeOfDay</code> to have any effect.
@property (nonatomic, copy) NSArray<MBStyle *> * _Nonnull styles;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


typedef SWIFT_ENUM_NAMED(NSInteger, MBStyleType, "StyleType", open) {
  MBStyleTypeDay = 0,
  MBStyleTypeNight = 1,
};


/// :nodoc:
SWIFT_CLASS_NAMED("SubtitleLabel")
@interface MBSubtitleLabel : MBStylableLabel
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
@end

typedef SWIFT_ENUM_NAMED(NSUInteger, MBTextType, "TextType", open) {
  MBTextTypeText = 0,
  MBTextTypeSsml = 1,
};


/// :nodoc:
SWIFT_CLASS_NAMED("TimeRemainingLabel")
@interface MBTimeRemainingLabel : MBStylableLabel
@property (nonatomic, strong) UIColor * _Nonnull trafficUnknownColor;
@property (nonatomic, strong) UIColor * _Nonnull trafficLowColor;
@property (nonatomic, strong) UIColor * _Nonnull trafficModerateColor;
@property (nonatomic, strong) UIColor * _Nonnull trafficHeavyColor;
@property (nonatomic, strong) UIColor * _Nonnull trafficSevereColor;
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
@end


/// :nodoc:
SWIFT_CLASS_NAMED("TitleLabel")
@interface MBTitleLabel : MBStylableLabel
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS_NAMED("TunnelIntersectionManager")
@interface MBTunnelIntersectionManager : NSObject
/// The associated delegate for tunnel intersection manager.
@property (nonatomic, weak) id <MBTunnelIntersectionManagerDelegate> _Nullable delegate;
/// The simulated location manager dedicated to tunnel simulated navigation.
@property (nonatomic, strong) MBSimulatedLocationManager * _Nullable animatedLocationManager;
/// An array of bad location updates recorded upon exit of a tunnel.
@property (nonatomic, copy) NSArray<CLLocation *> * _Nonnull tunnelExitLocations;
/// Flag indicating whether the user is animated through tunnels.
@property (nonatomic) BOOL tunnelSimulationEnabled;
/// Given a user’s current location and the route progress,
/// detects whether the upcoming intersection contains a tunnel road class, and
/// returns a Boolean whether they are within the minimum radius of a tunnel entrance.
- (BOOL)userWithinTunnelEntranceRadiusAt:(CLLocation * _Nonnull)location routeProgress:(MBRouteProgress * _Nonnull)routeProgress SWIFT_WARN_UNUSED_RESULT;
- (void)enableTunnelAnimationWithRouteController:(MBRouteController * _Nonnull)routeController routeProgress:(MBRouteProgress * _Nonnull)routeProgress;
- (void)suspendTunnelAnimationAt:(CLLocation * _Nonnull)location routeController:(MBRouteController * _Nonnull)routeController;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end













@interface UIDevice (SWIFT_EXTENSION(OlaMapNavigationSDK))
/// Returns a <code>Bool</code> whether the device is plugged in. Returns false if not an iOS device.
@property (nonatomic, readonly) BOOL isPluggedIn;
@end




@interface UIFont (SWIFT_EXTENSION(OlaMapNavigationSDK))
/// Returns an adjusted font for the <code>preferredContentSizeCategory</code>.
@property (nonatomic, readonly, strong) UIFont * _Nonnull adjustedFont;
@end






















/// A view representing the user’s location on screen.
SWIFT_CLASS_NAMED("UserPuckCourseView")
@interface MBUserPuckCourseView : UIView
@property (nonatomic, strong) UIColor * _Nonnull puckColor;
@property (nonatomic, strong) UIColor * _Nonnull fillColor;
@property (nonatomic, strong) UIColor * _Nonnull shadowColor;
- (nonnull instancetype)initWithFrame:(CGRect)frame SWIFT_UNAVAILABLE;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
@end





/// The <code>VoiceControllerDelegate</code> protocol defines methods that allow an object to respond to significant events related to spoken instructions.
SWIFT_PROTOCOL_NAMED("VoiceControllerDelegate")
@protocol MBVoiceControllerDelegate
@optional
/// Called when the voice controller failed to speak an instruction.
/// \param voiceController The voice controller that experienced the failure.
///
/// \param error An error explaining the failure and its cause. The <code>MBSpokenInstructionErrorCodeKey</code> key of the error’s user info dictionary is a <code>SpokenInstructionErrorCode</code> indicating the cause of the failure.
///
- (void)voiceController:(MBRouteVoiceController * _Nonnull)voiceController spokenInstrucionsDidFailWithError:(NSError * _Nonnull)error;
/// Called when one spoken instruction interrupts another instruction currently being spoken.
/// \param voiceController The voice controller that experienced the interruption.
///
/// \param interruptedInstruction The spoken instruction currently in progress that has been interrupted.
///
/// \param interruptingInstruction The spoken instruction that is interrupting the current instruction.
///
- (void)voiceController:(MBRouteVoiceController * _Nonnull)voiceController didInterruptSpokenInstruction:(MBSpokenInstruction * _Nonnull)interruptedInstruction withInstruction:(MBSpokenInstruction * _Nonnull)interruptingInstruction;
/// Called when a spoken is about to speak. Useful if it is necessary to give a custom instruction instead. Noting, changing the <code>distanceAlongStep</code> property on <code>SpokenInstruction</code> will have no impact on when the instruction will be said.
/// \code
/// - parameter voiceController: The voice controller that will speak an instruction.
/// - parameter instruction: The spoken instruction that will be said.
/// - parameter routeProgress: The `RouteProgress` just before when the instruction is scheduled to be spoken.
/// *
///
/// \endcode
- (MBSpokenInstruction * _Nullable)voiceController:(MBRouteVoiceController * _Nonnull)voiceController willSpeakSpokenInstruction:(MBSpokenInstruction * _Nonnull)instruction routeProgress:(MBRouteProgress * _Nonnull)routeProgress SWIFT_WARN_UNUSED_RESULT;
@end


/// :nodoc:
SWIFT_CLASS_NAMED("WayNameLabel")
@interface MBWayNameLabel : MBStylableLabel
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
@end


/// :nodoc:
SWIFT_CLASS_NAMED("WayNameView")
@interface MBWayNameView : UIView
@property (nonatomic, strong) UIColor * _Nullable borderColor;
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
- (void)layoutSubviews;
@end


#endif
#if __has_attribute(external_source_symbol)
# pragma clang attribute pop
#endif
#if defined(__cplusplus)
#endif
#pragma clang diagnostic pop
#endif

#elif defined(__x86_64__) && __x86_64__
// Generated by Apple Swift version 5.9 (swiftlang-5.9.0.128.108 clang-1500.0.40.1)
#ifndef OLAMAPNAVIGATIONSDK_SWIFT_H
#define OLAMAPNAVIGATIONSDK_SWIFT_H
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wgcc-compat"

#if !defined(__has_include)
# define __has_include(x) 0
#endif
#if !defined(__has_attribute)
# define __has_attribute(x) 0
#endif
#if !defined(__has_feature)
# define __has_feature(x) 0
#endif
#if !defined(__has_warning)
# define __has_warning(x) 0
#endif

#if __has_include(<swift/objc-prologue.h>)
# include <swift/objc-prologue.h>
#endif

#pragma clang diagnostic ignored "-Wauto-import"
#if defined(__OBJC__)
#include <Foundation/Foundation.h>
#endif
#if defined(__cplusplus)
#include <cstdint>
#include <cstddef>
#include <cstdbool>
#include <cstring>
#include <stdlib.h>
#include <new>
#include <type_traits>
#else
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>
#include <string.h>
#endif
#if defined(__cplusplus)
#if defined(__arm64e__) && __has_include(<ptrauth.h>)
# include <ptrauth.h>
#else
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wreserved-macro-identifier"
# ifndef __ptrauth_swift_value_witness_function_pointer
#  define __ptrauth_swift_value_witness_function_pointer(x)
# endif
# ifndef __ptrauth_swift_class_method_pointer
#  define __ptrauth_swift_class_method_pointer(x)
# endif
#pragma clang diagnostic pop
#endif
#endif

#if !defined(SWIFT_TYPEDEFS)
# define SWIFT_TYPEDEFS 1
# if __has_include(<uchar.h>)
#  include <uchar.h>
# elif !defined(__cplusplus)
typedef uint_least16_t char16_t;
typedef uint_least32_t char32_t;
# endif
typedef float swift_float2  __attribute__((__ext_vector_type__(2)));
typedef float swift_float3  __attribute__((__ext_vector_type__(3)));
typedef float swift_float4  __attribute__((__ext_vector_type__(4)));
typedef double swift_double2  __attribute__((__ext_vector_type__(2)));
typedef double swift_double3  __attribute__((__ext_vector_type__(3)));
typedef double swift_double4  __attribute__((__ext_vector_type__(4)));
typedef int swift_int2  __attribute__((__ext_vector_type__(2)));
typedef int swift_int3  __attribute__((__ext_vector_type__(3)));
typedef int swift_int4  __attribute__((__ext_vector_type__(4)));
typedef unsigned int swift_uint2  __attribute__((__ext_vector_type__(2)));
typedef unsigned int swift_uint3  __attribute__((__ext_vector_type__(3)));
typedef unsigned int swift_uint4  __attribute__((__ext_vector_type__(4)));
#endif

#if !defined(SWIFT_PASTE)
# define SWIFT_PASTE_HELPER(x, y) x##y
# define SWIFT_PASTE(x, y) SWIFT_PASTE_HELPER(x, y)
#endif
#if !defined(SWIFT_METATYPE)
# define SWIFT_METATYPE(X) Class
#endif
#if !defined(SWIFT_CLASS_PROPERTY)
# if __has_feature(objc_class_property)
#  define SWIFT_CLASS_PROPERTY(...) __VA_ARGS__
# else
#  define SWIFT_CLASS_PROPERTY(...) 
# endif
#endif
#if !defined(SWIFT_RUNTIME_NAME)
# if __has_attribute(objc_runtime_name)
#  define SWIFT_RUNTIME_NAME(X) __attribute__((objc_runtime_name(X)))
# else
#  define SWIFT_RUNTIME_NAME(X) 
# endif
#endif
#if !defined(SWIFT_COMPILE_NAME)
# if __has_attribute(swift_name)
#  define SWIFT_COMPILE_NAME(X) __attribute__((swift_name(X)))
# else
#  define SWIFT_COMPILE_NAME(X) 
# endif
#endif
#if !defined(SWIFT_METHOD_FAMILY)
# if __has_attribute(objc_method_family)
#  define SWIFT_METHOD_FAMILY(X) __attribute__((objc_method_family(X)))
# else
#  define SWIFT_METHOD_FAMILY(X) 
# endif
#endif
#if !defined(SWIFT_NOESCAPE)
# if __has_attribute(noescape)
#  define SWIFT_NOESCAPE __attribute__((noescape))
# else
#  define SWIFT_NOESCAPE 
# endif
#endif
#if !defined(SWIFT_RELEASES_ARGUMENT)
# if __has_attribute(ns_consumed)
#  define SWIFT_RELEASES_ARGUMENT __attribute__((ns_consumed))
# else
#  define SWIFT_RELEASES_ARGUMENT 
# endif
#endif
#if !defined(SWIFT_WARN_UNUSED_RESULT)
# if __has_attribute(warn_unused_result)
#  define SWIFT_WARN_UNUSED_RESULT __attribute__((warn_unused_result))
# else
#  define SWIFT_WARN_UNUSED_RESULT 
# endif
#endif
#if !defined(SWIFT_NORETURN)
# if __has_attribute(noreturn)
#  define SWIFT_NORETURN __attribute__((noreturn))
# else
#  define SWIFT_NORETURN 
# endif
#endif
#if !defined(SWIFT_CLASS_EXTRA)
# define SWIFT_CLASS_EXTRA 
#endif
#if !defined(SWIFT_PROTOCOL_EXTRA)
# define SWIFT_PROTOCOL_EXTRA 
#endif
#if !defined(SWIFT_ENUM_EXTRA)
# define SWIFT_ENUM_EXTRA 
#endif
#if !defined(SWIFT_CLASS)
# if __has_attribute(objc_subclassing_restricted)
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# else
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# endif
#endif
#if !defined(SWIFT_RESILIENT_CLASS)
# if __has_attribute(objc_class_stub)
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME) __attribute__((objc_class_stub))
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_class_stub)) SWIFT_CLASS_NAMED(SWIFT_NAME)
# else
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME)
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) SWIFT_CLASS_NAMED(SWIFT_NAME)
# endif
#endif
#if !defined(SWIFT_PROTOCOL)
# define SWIFT_PROTOCOL(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
# define SWIFT_PROTOCOL_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
#endif
#if !defined(SWIFT_EXTENSION)
# define SWIFT_EXTENSION(M) SWIFT_PASTE(M##_Swift_, __LINE__)
#endif
#if !defined(OBJC_DESIGNATED_INITIALIZER)
# if __has_attribute(objc_designated_initializer)
#  define OBJC_DESIGNATED_INITIALIZER __attribute__((objc_designated_initializer))
# else
#  define OBJC_DESIGNATED_INITIALIZER 
# endif
#endif
#if !defined(SWIFT_ENUM_ATTR)
# if __has_attribute(enum_extensibility)
#  define SWIFT_ENUM_ATTR(_extensibility) __attribute__((enum_extensibility(_extensibility)))
# else
#  define SWIFT_ENUM_ATTR(_extensibility) 
# endif
#endif
#if !defined(SWIFT_ENUM)
# define SWIFT_ENUM(_type, _name, _extensibility) enum _name : _type _name; enum SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# if __has_feature(generalized_swift_name)
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) enum _name : _type _name SWIFT_COMPILE_NAME(SWIFT_NAME); enum SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# else
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) SWIFT_ENUM(_type, _name, _extensibility)
# endif
#endif
#if !defined(SWIFT_UNAVAILABLE)
# define SWIFT_UNAVAILABLE __attribute__((unavailable))
#endif
#if !defined(SWIFT_UNAVAILABLE_MSG)
# define SWIFT_UNAVAILABLE_MSG(msg) __attribute__((unavailable(msg)))
#endif
#if !defined(SWIFT_AVAILABILITY)
# define SWIFT_AVAILABILITY(plat, ...) __attribute__((availability(plat, __VA_ARGS__)))
#endif
#if !defined(SWIFT_WEAK_IMPORT)
# define SWIFT_WEAK_IMPORT __attribute__((weak_import))
#endif
#if !defined(SWIFT_DEPRECATED)
# define SWIFT_DEPRECATED __attribute__((deprecated))
#endif
#if !defined(SWIFT_DEPRECATED_MSG)
# define SWIFT_DEPRECATED_MSG(...) __attribute__((deprecated(__VA_ARGS__)))
#endif
#if !defined(SWIFT_DEPRECATED_OBJC)
# if __has_feature(attribute_diagnose_if_objc)
#  define SWIFT_DEPRECATED_OBJC(Msg) __attribute__((diagnose_if(1, Msg, "warning")))
# else
#  define SWIFT_DEPRECATED_OBJC(Msg) SWIFT_DEPRECATED_MSG(Msg)
# endif
#endif
#if defined(__OBJC__)
#if !defined(IBSegueAction)
# define IBSegueAction 
#endif
#endif
#if !defined(SWIFT_EXTERN)
# if defined(__cplusplus)
#  define SWIFT_EXTERN extern "C"
# else
#  define SWIFT_EXTERN extern
# endif
#endif
#if !defined(SWIFT_CALL)
# define SWIFT_CALL __attribute__((swiftcall))
#endif
#if !defined(SWIFT_INDIRECT_RESULT)
# define SWIFT_INDIRECT_RESULT __attribute__((swift_indirect_result))
#endif
#if !defined(SWIFT_CONTEXT)
# define SWIFT_CONTEXT __attribute__((swift_context))
#endif
#if !defined(SWIFT_ERROR_RESULT)
# define SWIFT_ERROR_RESULT __attribute__((swift_error_result))
#endif
#if defined(__cplusplus)
# define SWIFT_NOEXCEPT noexcept
#else
# define SWIFT_NOEXCEPT 
#endif
#if !defined(SWIFT_C_INLINE_THUNK)
# if __has_attribute(always_inline)
# if __has_attribute(nodebug)
#  define SWIFT_C_INLINE_THUNK inline __attribute__((always_inline)) __attribute__((nodebug))
# else
#  define SWIFT_C_INLINE_THUNK inline __attribute__((always_inline))
# endif
# else
#  define SWIFT_C_INLINE_THUNK inline
# endif
#endif
#if defined(_WIN32)
#if !defined(SWIFT_IMPORT_STDLIB_SYMBOL)
# define SWIFT_IMPORT_STDLIB_SYMBOL __declspec(dllimport)
#endif
#else
#if !defined(SWIFT_IMPORT_STDLIB_SYMBOL)
# define SWIFT_IMPORT_STDLIB_SYMBOL 
#endif
#endif
#if defined(__OBJC__)
#if __has_feature(objc_modules)
#if __has_warning("-Watimport-in-framework-header")
#pragma clang diagnostic ignored "-Watimport-in-framework-header"
#endif
@import AVFAudio;
@import CarPlay;
@import CoreFoundation;
@import CoreLocation;
@import Foundation;
@import Mapbox;
@import ObjectiveC;
@import OlaMapDirectionFramework;
@import UIKit;
#endif

#endif
#pragma clang diagnostic ignored "-Wproperty-attribute-mismatch"
#pragma clang diagnostic ignored "-Wduplicate-method-arg"
#if __has_warning("-Wpragma-clang-attribute")
# pragma clang diagnostic ignored "-Wpragma-clang-attribute"
#endif
#pragma clang diagnostic ignored "-Wunknown-pragmas"
#pragma clang diagnostic ignored "-Wnullability"
#pragma clang diagnostic ignored "-Wdollar-in-identifier-extension"

#if __has_attribute(external_source_symbol)
# pragma push_macro("any")
# undef any
# pragma clang attribute push(__attribute__((external_source_symbol(language="Swift", defined_in="OlaMapNavigationSDK",generated_declaration))), apply_to=any(function,enum,objc_interface,objc_category,objc_protocol))
# pragma pop_macro("any")
#endif

#if defined(__OBJC__)
@class UIColor;
@class UIFont;
@class NSCoder;

/// :nodoc:
SWIFT_CLASS_NAMED("StylableLabel")
@interface MBStylableLabel : UILabel
@property (nonatomic, strong) UIColor * _Nonnull normalTextColor;
@property (nonatomic, strong) UIFont * _Nonnull normalFont;
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
@end


/// :nodoc:
SWIFT_CLASS_NAMED("ArrivalTimeLabel")
@interface MBArrivalTimeLabel : MBStylableLabel
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
@end

typedef SWIFT_ENUM_NAMED(NSUInteger, MBAudioFormat, "AudioFormat", open) {
  MBAudioFormatMp3 = 0,
};

@class MBVisualInstructionBanner;

/// :nodoc:
SWIFT_CLASS("_TtC19OlaMapNavigationSDK26BaseInstructionsBannerView")
@interface BaseInstructionsBannerView : UIControl
- (nonnull instancetype)initWithFrame:(CGRect)frame SWIFT_UNAVAILABLE;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
/// Updates the instructions banner info with a given <code>VisualInstructionBanner</code>.
- (void)updateForVisualInstructionBanner:(MBVisualInstructionBanner * _Nullable)instruction;
- (void)prepareForInterfaceBuilder;
@end


@class NSString;
@protocol MGLAnnotation;

SWIFT_CLASS("_TtC19OlaMapNavigationSDK17OlaAnnotationView")
@interface OlaAnnotationView : MGLAnnotationView
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
- (void)prepareForReuse;
- (nonnull instancetype)initWithReuseIdentifier:(NSString * _Nullable)reuseIdentifier SWIFT_UNAVAILABLE;
- (nonnull instancetype)initWithAnnotation:(id <MGLAnnotation> _Nullable)annotation reuseIdentifier:(NSString * _Nullable)reuseIdentifier SWIFT_UNAVAILABLE;
- (nonnull instancetype)initWithFrame:(CGRect)frame SWIFT_UNAVAILABLE;
@end


SWIFT_CLASS("_TtC19OlaMapNavigationSDK18BikeAnnotationView")
@interface BikeAnnotationView : OlaAnnotationView
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder SWIFT_UNAVAILABLE;
- (void)layoutSubviews;
- (void)setSelected:(BOOL)selected animated:(BOOL)animated;
@end


/// A cache consists of both in-memory and on-disk components, both of which can be reset.
SWIFT_PROTOCOL_NAMED("BimodalCache")
@protocol MBBimodalCache
- (void)clearMemory;
- (void)clearDiskWithCompletion:(void (^ _Nullable)(void))completion;
@end

@class NSData;

/// A cache which supports storing data
SWIFT_PROTOCOL_NAMED("BimodalDataCache")
@protocol MBBimodalDataCache <MBBimodalCache>
- (void)store:(NSData * _Nonnull)data forKey:(NSString * _Nonnull)key toDisk:(BOOL)toDisk completion:(void (^ _Nullable)(void))completionBlock;
- (NSData * _Nullable)dataForKey:(NSString * _Nullable)forKey SWIFT_WARN_UNUSED_RESULT;
@end

@class UIImage;

/// A cache which supports storing images
SWIFT_PROTOCOL_NAMED("BimodalImageCache")
@protocol MBBimodalImageCache <MBBimodalCache>
- (void)store:(UIImage * _Nonnull)image forKey:(NSString * _Nonnull)key toDisk:(BOOL)toDisk completion:(void (^ _Nullable)(void))completionBlock;
- (UIImage * _Nullable)imageForKey:(NSString * _Nullable)forKey SWIFT_WARN_UNUSED_RESULT;
@end


/// :nodoc:
SWIFT_CLASS_NAMED("BottomBannerContentView")
@interface MBBottomBannerContentView : UIView
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
@end


/// :nodoc:
IB_DESIGNABLE
SWIFT_CLASS_NAMED("BottomBannerView")
@interface MBBottomBannerView : UIView
- (nonnull instancetype)initWithFrame:(CGRect)frame SWIFT_UNAVAILABLE;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
- (void)prepareForInterfaceBuilder;
@end

@class UITraitCollection;

@interface MBBottomBannerView (SWIFT_EXTENSION(OlaMapNavigationSDK))
- (void)traitCollectionDidChange:(UITraitCollection * _Nullable)previousTraitCollection;
@end





/// :nodoc:
SWIFT_CLASS_NAMED("StylableButton")
@interface MBStylableButton : UIButton
@property (nonatomic, strong) UIFont * _Nonnull textFont;
@property (nonatomic, strong) UIColor * _Nonnull textColor;
@property (nonatomic, strong) UIColor * _Nonnull borderColor;
@property (nonatomic) CGFloat borderWidth;
@property (nonatomic) CGFloat cornerRadius;
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
@end


/// :nodoc:
/// <code>MBButton</code> sets the tintColor according to the style.
SWIFT_CLASS_NAMED("Button")
@interface MBButton : MBStylableButton
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
@end




SWIFT_CLASS("_TtC19OlaMapNavigationSDK17CabAnnotationView")
@interface CabAnnotationView : OlaAnnotationView
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder SWIFT_UNAVAILABLE;
- (void)layoutSubviews;
- (void)setSelected:(BOOL)selected animated:(BOOL)animated;
@end


/// :nodoc:
SWIFT_CLASS_NAMED("CancelButton")
@interface MBCancelButton : MBButton
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
@end

/// The activity during which a <code>CPTemplate</code> is displayed. This enumeration is used to distinguish between different templates during different phases of user interaction.
typedef SWIFT_ENUM_NAMED(NSInteger, MBCarPlayActivity, "CarPlayActivity", open) {
/// The user is browsing the map or searching for a destination.
  MBCarPlayActivityBrowsing = 0,
/// The user is previewing a route or selecting among multiple routes.
  MBCarPlayActivityPreviewing = 1,
/// The user is actively navigating along a route.
  MBCarPlayActivityNavigating = 2,
};

@protocol MBCarPlayManagerDelegate;

/// <code>CarPlayManager</code> is the main object responsible for orchestrating interactions with a Mapbox map on CarPlay.
/// You do not create instances of this object yourself; instead, use the <code>CarPlayManager.shared</code> class property.
/// Messages declared in the <code>CPApplicationDelegate</code> protocol should be sent to this object in the containing application’s application delegate. Implement <code>CarPlayManagerDelegate</code> in the containing application and assign an instance to the <code>delegate</code> property of the <code>CarPlayManager</code> shared instance.
SWIFT_CLASS_NAMED("CarPlayManager") SWIFT_AVAILABILITY(ios,introduced=12.0)
@interface MBCarPlayManager : NSObject
/// Developers should assign their own object as a delegate implementing the CarPlayManagerDelegate protocol for customization.
@property (nonatomic, weak) id <MBCarPlayManagerDelegate> _Nullable delegate;
/// If set to <code>true</code>, turn-by-turn directions will simulate the user traveling along the selected route when initiated from CarPlay.
@property (nonatomic) BOOL simulatesLocations;
/// This property specifies a multiplier to be applied to the user’s speed in simulation mode.
@property (nonatomic) double simulatedSpeedMultiplier;
/// The shared CarPlay manager.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, strong) MBCarPlayManager * _Nonnull sharedManager;)
+ (MBCarPlayManager * _Nonnull)sharedManager SWIFT_WARN_UNUSED_RESULT;
+ (void)setSharedManager:(MBCarPlayManager * _Nonnull)value;
/// A Boolean value indicating whether the phone is connected to CarPlay.
@property (nonatomic) BOOL isConnectedToCarPlay;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

@class MBCarPlayNavigationViewController;

/// The <code>CarPlayNavigationDelegate</code> protocol provides methods for reacting to significant events during turn-by-turn navigation with <code>CarPlayNavigationViewController</code>.
SWIFT_PROTOCOL_NAMED("CarPlayNavigationDelegate") SWIFT_AVAILABILITY(ios,introduced=12.0)
@protocol MBNavigationCarPlayDelegate
/// Called when the CarPlay navigation view controller is dismissed, such as when the user ends a trip.
/// \param carPlayNavigationViewController The CarPlay navigation view controller that was dismissed.
///
/// \param canceled True if the user dismissed the CarPlay navigation view controller by tapping the Cancel button; false if the navigation view controller dismissed by some other means.
///
- (void)carPlayNavigationViewControllerDidDismiss:(MBCarPlayNavigationViewController * _Nonnull)carPlayNavigationViewController byCanceling:(BOOL)canceled;
/// Called when the CarPlay navigation view controller detects an arrival.
/// \param carPlayNavigationViewController The CarPlay navigation view controller that was dismissed.
///
- (void)carPlayNavigationViewControllerDidArrive:(MBCarPlayNavigationViewController * _Nonnull)carPlayNavigationViewController;
@end


SWIFT_AVAILABILITY(ios,introduced=12.0)
@interface MBCarPlayManager (SWIFT_EXTENSION(OlaMapNavigationSDK)) <MBNavigationCarPlayDelegate>
- (void)carPlayNavigationViewControllerDidArrive:(MBCarPlayNavigationViewController * _Nonnull)_;
- (void)carPlayNavigationViewControllerDidDismiss:(MBCarPlayNavigationViewController * _Nonnull)carPlayNavigationViewController byCanceling:(BOOL)canceled;
@end

@class CPTemplate;

SWIFT_AVAILABILITY(ios,introduced=12.0)
@interface MBCarPlayManager (SWIFT_EXTENSION(OlaMapNavigationSDK)) <CPInterfaceControllerDelegate>
- (void)templateWillAppear:(CPTemplate * _Nonnull)template_ animated:(BOOL)animated;
- (void)templateDidAppear:(CPTemplate * _Nonnull)template_ animated:(BOOL)animated;
- (void)templateWillDisappear:(CPTemplate * _Nonnull)template_ animated:(BOOL)animated;
@end

@class CPListTemplate;
@class CPListItem;

SWIFT_AVAILABILITY(ios,introduced=12.0)
@interface MBCarPlayManager (SWIFT_EXTENSION(OlaMapNavigationSDK)) <CPListTemplateDelegate>
- (void)listTemplate:(CPListTemplate * _Nonnull)listTemplate didSelectListItem:(CPListItem * _Nonnull)item completionHandler:(void (^ _Nonnull)(void))completionHandler;
@end

@class UIApplication;
@class CPInterfaceController;
@class CPWindow;

SWIFT_AVAILABILITY(ios,introduced=12.0)
@interface MBCarPlayManager (SWIFT_EXTENSION(OlaMapNavigationSDK)) <CPApplicationDelegate>
- (void)application:(UIApplication * _Nonnull)application didConnectCarInterfaceController:(CPInterfaceController * _Nonnull)interfaceController toWindow:(CPWindow * _Nonnull)window;
- (void)application:(UIApplication * _Nonnull)application didDisconnectCarInterfaceController:(CPInterfaceController * _Nonnull)interfaceController fromWindow:(CPWindow * _Nonnull)window;
@end

@class CPMapTemplate;
@class CPTrip;
@class CPRouteChoice;

SWIFT_AVAILABILITY(ios,introduced=12.0)
@interface MBCarPlayManager (SWIFT_EXTENSION(OlaMapNavigationSDK)) <CPMapTemplateDelegate>
- (void)mapTemplate:(CPMapTemplate * _Nonnull)mapTemplate startedTrip:(CPTrip * _Nonnull)trip usingRouteChoice:(CPRouteChoice * _Nonnull)routeChoice;
- (void)mapTemplate:(CPMapTemplate * _Nonnull)mapTemplate selectedPreviewForTrip:(CPTrip * _Nonnull)trip usingRouteChoice:(CPRouteChoice * _Nonnull)routeChoice;
- (void)mapTemplateDidCancelNavigation:(CPMapTemplate * _Nonnull)mapTemplate;
- (void)mapTemplateDidBeginPanGesture:(CPMapTemplate * _Nonnull)mapTemplate;
- (void)mapTemplate:(CPMapTemplate * _Nonnull)mapTemplate didEndPanGestureWithVelocity:(CGPoint)velocity;
- (void)mapTemplateWillDismissPanningInterface:(CPMapTemplate * _Nonnull)mapTemplate;
- (void)mapTemplate:(CPMapTemplate * _Nonnull)mapTemplate didUpdatePanGestureWithTranslation:(CGPoint)translation velocity:(CGPoint)velocity;
- (void)mapTemplate:(CPMapTemplate * _Nonnull)mapTemplate panWithDirection:(CPPanDirection)direction;
@end

@class CPBarButton;
@class CPMapButton;
@class MBRoute;
@class MBRouteController;
@class CPSearchTemplate;

/// <code>CarPlayManagerDelegate</code> is the main integration point for Mapbox CarPlay support.
/// Implement this protocol and assign an instance to the <code>delegate</code> property of the shared instance of <code>CarPlayManager</code>.
SWIFT_PROTOCOL_NAMED("CarPlayManagerDelegate") SWIFT_AVAILABILITY(ios,introduced=12.0)
@protocol MBCarPlayManagerDelegate
@optional
/// Offers the delegate an opportunity to provide a customized list of leading bar buttons.
/// These buttons’ tap handlers encapsulate the action to be taken, so it is up to the developer to ensure the hierarchy of templates is adequately navigable.
/// If this method is not implemented, or if nil is returned, an implementation of CPSearchTemplate will be provided which uses the Mapbox Geocoder.
/// \param carPlayManager The shared CarPlay manager.
///
/// \param traitCollection The trait collection of the view controller being shown in the CarPlay window.
///
/// \param template The template into which the returned bar buttons will be inserted.
///
/// \param activity What the user is currently doing on the CarPlay screen. Use this parameter to distinguish between multiple templates of the same kind, such as multiple <code>CPMapTemplate</code>s.
///
///
/// returns:
/// An array of bar buttons to display on the leading side of the navigation bar while <code>template</code> is visible.
- (NSArray<CPBarButton *> * _Nullable)carPlayManager:(MBCarPlayManager * _Nonnull)carPlayManager leadingNavigationBarButtonsWithTraitCollection:(UITraitCollection * _Nonnull)traitCollection inTemplate:(CPTemplate * _Nonnull)template_ forActivity:(enum MBCarPlayActivity)activity SWIFT_WARN_UNUSED_RESULT;
/// Offers the delegate an opportunity to provide a customized list of trailing bar buttons.
/// These buttons’ tap handlers encapsulate the action to be taken, so it is up to the developer to ensure the hierarchy of templates is adequately navigable.
/// \param carPlayManager The shared CarPlay manager.
///
/// \param traitCollection The trait collection of the view controller being shown in the CarPlay window.
///
/// \param template The template into which the returned bar buttons will be inserted.
///
/// \param activity What the user is currently doing on the CarPlay screen. Use this parameter to distinguish between multiple templates of the same kind, such as multiple <code>CPMapTemplate</code>s.
///
///
/// returns:
/// An array of bar buttons to display on the trailing side of the navigation bar while <code>template</code> is visible.
- (NSArray<CPBarButton *> * _Nullable)carPlayManager:(MBCarPlayManager * _Nonnull)carPlayManager trailingNavigationBarButtonsWithTraitCollection:(UITraitCollection * _Nonnull)traitCollection inTemplate:(CPTemplate * _Nonnull)template_ forActivity:(enum MBCarPlayActivity)activity SWIFT_WARN_UNUSED_RESULT;
/// Offers the delegate an opportunity to provide a customized list of buttons displayed on the map.
/// These buttons handle the gestures on the map view, so it is up to the developer to ensure the map template is interactive.
/// If this method is not implemented, or if nil is returned, a default set of zoom and pan buttons will be provided.
/// \param carPlayManager The shared CarPlay manager.
///
/// \param traitCollection The trait collection of the view controller being shown in the CarPlay window.
///
/// \param template The template into which the returned map buttons will be inserted.
///
/// \param activity What the user is currently doing on the CarPlay screen. Use this parameter to distinguish between multiple templates of the same kind, such as multiple <code>CPMapTemplate</code>s.
///
///
/// returns:
/// An array of map buttons to display on the map while <code>template</code> is visible.
- (NSArray<CPMapButton *> * _Nullable)carPlayManager:(MBCarPlayManager * _Nonnull)carplayManager mapButtonsCompatibleWithTraitCollection:(UITraitCollection * _Nonnull)traitCollection inTemplate:(CPTemplate * _Nonnull)template_ forActivity:(enum MBCarPlayActivity)activity SWIFT_WARN_UNUSED_RESULT;
/// Offers the delegate an opportunity to provide an alternate navigator, otherwise a default built-in RouteController will be created and used.
/// \param carPlayManager The shared CarPlay manager.
///
/// \param route The route for which the returned route controller will manage location updates.
///
///
/// returns:
/// A route controller that manages location updates along <code>route</code>.
- (MBRouteController * _Nonnull)carPlayManager:(MBCarPlayManager * _Nonnull)carPlayManager routeControllerAlongRoute:(MBRoute * _Nonnull)route SWIFT_WARN_UNUSED_RESULT;
/// Offers the delegate an opportunity to react to updates in the search text.
/// postcondition:
/// You must call <code>completionHandler</code> within this method.
/// \param carPlayManager The shared CarPlay manager.
///
/// \param searchTemplate The search template currently accepting user input.
///
/// \param searchText The updated search text in <code>searchTemplate</code>.
///
/// \param completionHandler Called when the search is complete. Accepts a list of search results.
///
- (void)carPlayManager:(MBCarPlayManager * _Nonnull)carPlayManager searchTemplate:(CPSearchTemplate * _Nonnull)searchTemplate updatedSearchText:(NSString * _Nonnull)searchText completionHandler:(void (^ _Nonnull)(NSArray<CPListItem *> * _Nonnull))completionHandler;
/// Offers the delegate an opportunity to react to selection of a search result.
/// postcondition:
/// You must call <code>completionHandler</code> within this method.
/// \param carPlayManager The shared CarPlay manager.
///
/// \param searchTemplate The search template currently accepting user input.
///
/// \param item The search result the user has selected.
///
/// \param completionHandler Called when the delegate is done responding to the selection.
///
- (void)carPlayManager:(MBCarPlayManager * _Nonnull)carPlayManager searchTemplate:(CPSearchTemplate * _Nonnull)searchTemplate selectedResult:(CPListItem * _Nonnull)item completionHandler:(void (^ _Nonnull)(void))completionHandler;
@required
/// Called when navigation begins so that the containing app can update accordingly.
/// \param carPlayManager The shared CarPlay manager.
///
/// \param routeController The route controller that has begun managing location updates for a navigation session.
///
- (void)carPlayManager:(MBCarPlayManager * _Nonnull)carPlayManager didBeginNavigationWithRouteController:(MBRouteController * _Nonnull)routeController;
/// Called when navigation ends so that the containing app can update accordingly.
/// \param carPlayManager The shared CarPlay manager.
///
- (void)carPlayManagerDidEndNavigation:(MBCarPlayManager * _Nonnull)carPlayManager;
@optional
/// Called when the carplay manager will disable the idle timer.
/// Implementing this method will allow developers to change whether idle timer is disabled when carplay is connected and the vice-versa when disconnected.
/// \param carPlayManager The shared CarPlay manager.
///
///
/// returns:
/// A Boolean value indicating whether to disable idle timer when carplay is connected and enable when disconnected.
- (BOOL)carplayManagerShouldDisableIdleTimer:(MBCarPlayManager * _Nonnull)carPlayManager SWIFT_WARN_UNUSED_RESULT;
@end


@class MGLMapView;
@class MGLStyle;
@class NSBundle;

/// <code>CarPlayNavigationViewController</code> is a fully-featured turn-by-turn navigation UI for CarPlay.
/// seealso:
/// NavigationViewController
SWIFT_CLASS_NAMED("CarPlayNavigationViewController") SWIFT_AVAILABILITY(ios,introduced=12.0)
@interface MBCarPlayNavigationViewController : UIViewController <MGLMapViewDelegate>
/// The view controller’s delegate.
@property (nonatomic, weak) id <MBNavigationCarPlayDelegate> _Nullable carPlayNavigationDelegate;
@property (nonatomic) enum MBDrivingSide drivingSide;
/// Creates a new CarPlay navigation view controller for the given route controller and user interface.
/// postcondition:
/// Call <code>startNavigationSession(for:)</code> after initializing this object to begin navigation.
/// \param routeController The route controller managing location updates for the navigation session.
///
/// \param mapTemplate The map template visible during the navigation session.
///
/// \param interfaceController The interface controller for CarPlay.
///
- (nonnull instancetype)initForRouteController:(MBRouteController * _Nonnull)routeController mapTemplate:(CPMapTemplate * _Nonnull)mapTemplate interfaceController:(CPInterfaceController * _Nonnull)interfaceController OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder SWIFT_UNAVAILABLE;
- (void)viewDidLoad;
- (void)viewWillDisappear:(BOOL)animated;
- (void)viewSafeAreaInsetsDidChange;
/// Begins a navigation session along the given trip.
/// \param trip The trip to begin navigating along.
///
- (void)startNavigationSessionForTrip:(CPTrip * _Nonnull)trip;
/// Ends the current navigation session.
/// \param canceled A Boolean value indicating whether this method is being called because the user intends to cancel the trip, as opposed to letting it run to completion.
///
- (void)exitNavigationByCanceling:(BOOL)canceled;
/// Shows the interface for providing feedback about the route.
- (void)showFeedback;
/// A Boolean value indicating whether the map should follow the user’s location and rotate when the course changes.
/// When this property is true, the map follows the user’s location and rotates when their course changes. Otherwise, the map shows an overview of the route.
@property (nonatomic) BOOL tracksUserCourse;
- (void)mapView:(MGLMapView * _Nonnull)mapView didFinishLoadingStyle:(MGLStyle * _Nonnull)style;
- (nonnull instancetype)initWithNibName:(NSString * _Nullable)nibNameOrNil bundle:(NSBundle * _Nullable)nibBundleOrNil SWIFT_UNAVAILABLE;
@end

@class CLLocation;
enum RerouteReason : NSInteger;
@class MBWaypoint;

/// The <code>RouteControllerDelegate</code> protocol provides methods for responding to significant events during the user’s traversal of a route monitored by a <code>RouteController</code>.
SWIFT_PROTOCOL_NAMED("RouteControllerDelegate")
@protocol MBRouteControllerDelegate
@optional
/// Returns whether the route controller should be allowed to calculate a new route.
/// If implemented, this method is called as soon as the route controller detects that the user is off the predetermined route. Implement this method to conditionally prevent rerouting. If this method returns <code>true</code>, <code>routeController(_:willRerouteFrom:)</code> will be called immediately afterwards.
/// \param routeController The route controller that has detected the need to calculate a new route.
///
/// \param location The user’s current location.
///
///
/// returns:
/// True to allow the route controller to calculate a new route; false to keep tracking the current route.
- (BOOL)routeController:(MBRouteController * _Nonnull)routeController shouldRerouteFromLocation:(CLLocation * _Nonnull)location SWIFT_WARN_UNUSED_RESULT;
/// Called immediately before the route controller calculates a new route.
/// This method is called after <code>routeController(_:shouldRerouteFrom:)</code> is called, simultaneously with the <code>RouteControllerWillReroute</code> notification being posted, and before <code>routeController(_:didRerouteAlong:)</code> is called.
/// \param routeController The route controller that will calculate a new route.
///
/// \param location The user’s current location.
///
- (void)routeController:(MBRouteController * _Nonnull)routeController willRerouteFromLocation:(CLLocation * _Nonnull)location;
/// Called when a location has been identified as unqualified to navigate on.
/// See <code>CLLocation.isQualified</code> for more information about what qualifies a location.
/// <ul>
///   <li>
///     return: If <code>true</code>, the location is discarded and the <code>RouteController</code> will not consider it. If <code>false</code>, the location will not be thrown out.
///   </li>
/// </ul>
/// \param routeController The route controller that discarded the location.
///
/// \param location The location that will be discarded.
///
- (BOOL)routeController:(MBRouteController * _Nonnull)routeController shouldDiscardLocation:(CLLocation * _Nonnull)location SWIFT_WARN_UNUSED_RESULT;
/// Called immediately after the route controller receives a new route.
/// This method is called after <code>routeController(_:willRerouteFrom:)</code> and simultaneously with the <code>RouteControllerDidReroute</code> notification being posted.
/// \param routeController The route controller that has calculated a new route.
///
/// \param route The new route.
///
/// \param reason Describes the reason of the reroute. Could be due to a faster route / updating ETA or when the user diverted from the suggested route
///
- (void)routeController:(MBRouteController * _Nonnull)routeController didRerouteAlongRoute:(MBRoute * _Nonnull)route reason:(enum RerouteReason)reason;
/// Called when the route controller fails to receive a new route.
/// This method is called after <code>routeController(_:willRerouteFrom:)</code> and simultaneously with the <code>RouteControllerDidFailToReroute</code> notification being posted.
/// \param routeController The route controller that has calculated a new route.
///
/// \param error An error raised during the process of obtaining a new route.
///
- (void)routeController:(MBRouteController * _Nonnull)routeController didFailToRerouteWithError:(NSError * _Nonnull)error;
/// Called when the route controller’s location manager receives a location update.
/// These locations may be modified due to replay or simulation and can
/// also derive from regular location updates from a <code>CLLocationManager</code>.
/// \param routeController The route controller that received the new locations.
///
/// \param locations The locations that were received from the associated location manager.
///
- (void)routeController:(MBRouteController * _Nonnull)routeController didUpdateLocations:(NSArray<CLLocation *> * _Nonnull)locations;
/// Called when the route controller arrives at a waypoint.
/// You can implement this method to prevent the route controller from automatically advancing to the next leg. For example, you can and show an interstitial sheet upon arrival and pause navigation by returning <code>false</code>, then continue the route when the user dismisses the sheet. If this method is unimplemented, the route controller automatically advances to the next leg when arriving at a waypoint.
/// postcondition:
/// If you return false, you must manually advance to the next leg: obtain the value of the <code>routeProgress</code> property, then increment the <code>RouteProgress.legIndex</code> property.
/// \param routeController The route controller that has arrived at a waypoint.
///
/// \param waypoint The waypoint that the controller has arrived at.
///
///
/// returns:
/// True to advance to the next leg, if any, or false to remain on the completed leg.
- (BOOL)routeController:(MBRouteController * _Nonnull)routeController didArriveAtWaypoint:(MBWaypoint * _Nonnull)waypoint SWIFT_WARN_UNUSED_RESULT;
/// Called when the route controller arrives at a waypoint.
/// You can implement this method to allow the route controller to continue check and reroute the user if needed. By default, the user will not be rerouted when arriving at a waypoint.
/// \param routeController The route controller that has arrived at a waypoint.
///
/// \param waypoint The waypoint that the controller has arrived at.
///
///
/// returns:
/// True to prevent the route controller from checking if the user should be rerouted.
- (BOOL)routeController:(MBRouteController * _Nonnull)routeController shouldPreventReroutesWhenArrivingAtWaypoint:(MBWaypoint * _Nonnull)waypoint SWIFT_WARN_UNUSED_RESULT;
/// Called when the route controller will disable battery monitoring.
/// Implementing this method will allow developers to change whether battery monitoring is disabled when <code>RouteController</code> is deinited.
/// \param routeController The route controller that will change the state of battery monitoring.
///
///
/// returns:
/// A bool indicating whether to disable battery monitoring when the RouteController is deinited.
- (BOOL)routeControllerShouldDisableBatteryMonitoring:(MBRouteController * _Nonnull)routeController SWIFT_WARN_UNUSED_RESULT;
- (void)routeController:(MBRouteController * _Nonnull)routeController didUpdateUserLocation:(CLLocation * _Nonnull)locations;
@end


SWIFT_AVAILABILITY(ios,introduced=12.0)
@interface MBCarPlayNavigationViewController (SWIFT_EXTENSION(OlaMapNavigationSDK)) <MBRouteControllerDelegate>
- (BOOL)routeController:(MBRouteController * _Nonnull)routeController didArriveAtWaypoint:(MBWaypoint * _Nonnull)waypoint SWIFT_WARN_UNUSED_RESULT;
@end

@class MBStyleManager;
@class MBStyle;

/// The <code>StyleManagerDelegate</code> protocol defines a set of methods used for controlling the style.
SWIFT_PROTOCOL_NAMED("StyleManagerDelegate")
@protocol MBStyleManagerDelegate <NSObject>
/// Asks the delegate for a location to use when calculating sunset and sunrise.
- (CLLocation * _Nullable)locationForStyleManager:(MBStyleManager * _Nonnull)styleManager SWIFT_WARN_UNUSED_RESULT;
@optional
/// Informs the delegate that a style was applied.
- (void)styleManager:(MBStyleManager * _Nonnull)styleManager didApply:(MBStyle * _Nonnull)style;
/// Informs the delegate that the manager forcefully refreshed UIAppearance.
- (void)styleManagerDidRefreshAppearance:(MBStyleManager * _Nonnull)styleManager;
@end


SWIFT_AVAILABILITY(ios,introduced=12.0)
@interface MBCarPlayNavigationViewController (SWIFT_EXTENSION(OlaMapNavigationSDK)) <MBStyleManagerDelegate>
- (CLLocation * _Nullable)locationForStyleManager:(MBStyleManager * _Nonnull)styleManager SWIFT_WARN_UNUSED_RESULT;
- (void)styleManager:(MBStyleManager * _Nonnull)styleManager didApply:(MBStyle * _Nonnull)style;
- (void)styleManagerDidRefreshAppearance:(MBStyleManager * _Nonnull)styleManager;
@end


/// :nodoc:
SWIFT_CLASS_NAMED("LineView")
@interface MBLineView : UIView
@property (nonatomic, strong) UIColor * _Nonnull lineColor;
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
@end


/// :nodoc:
IB_DESIGNABLE
SWIFT_CLASS_NAMED("DashedLineView")
@interface MBDashedLineView : MBLineView
@property (nonatomic) IBInspectable CGFloat dashedLength;
@property (nonatomic) IBInspectable CGFloat dashedGap;
- (void)layoutSubviews;
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS_NAMED("DataCache")
@interface MBDataCache : NSObject <MBBimodalDataCache>
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
- (void)store:(NSData * _Nonnull)data forKey:(NSString * _Nonnull)key toDisk:(BOOL)toDisk completion:(void (^ _Nullable)(void))completion;
- (NSData * _Nullable)dataForKey:(NSString * _Nullable)key SWIFT_WARN_UNUSED_RESULT;
- (void)clearMemory;
- (void)clearDiskWithCompletion:(void (^ _Nullable)(void))completion;
@end

enum MBStyleType : NSInteger;
@class NSURL;

/// <code>Style</code> is a convenient wrapper for styling the appearance of various interface components throughout the Navigation UI.
/// Styles are applied globally using <code>UIAppearance</code>. You should call <code>Style.apply()</code> to apply the style to the <code>NavigationViewController</code>.
SWIFT_CLASS_NAMED("Style")
@interface MBStyle : NSObject
/// Sets the tint color for guidance arrow, highlighted text, progress bar and more.
@property (nonatomic, strong) UIColor * _Nullable tintColor;
/// Sets the font family for all labels.
@property (nonatomic, copy) NSString * _Nullable fontFamily;
/// Describes the situations in which the style should be used. By default, the style will be used during the daytime.
@property (nonatomic) enum MBStyleType styleType;
/// URL of the style to display on the map during turn-by-turn navigation.
@property (nonatomic, copy) NSURL * _Nonnull mapStyleURL;
/// URL of the style to display on the map when previewing a route, for example on CarPlay.
@property (nonatomic, copy) NSURL * _Nonnull previewMapStyleURL;
/// Applies the style for all changed properties.
- (void)apply;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/// <code>DefaultStyle</code> is default style for Mapbox Navigation SDK.
SWIFT_CLASS_NAMED("DayStyle")
@interface MBDayStyle : MBStyle
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
- (void)apply;
@end


/// :nodoc:
SWIFT_CLASS_NAMED("DismissButton")
@interface MBDismissButton : MBButton
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
@end

@class NSUnitLength;
@class NSAttributedString;

/// Provides appropriately formatted, localized descriptions of linear distances.
SWIFT_CLASS_NAMED("DistanceFormatter")
@interface MBDistanceFormatter : NSLengthFormatter
/// Intializes a new <code>DistanceFormatter</code>.
/// \param approximate approximates the distances.
///
- (nonnull instancetype)initWithApproximate:(BOOL)approximate OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)decoder OBJC_DESIGNATED_INITIALIZER;
- (void)encodeWithCoder:(NSCoder * _Nonnull)aCoder;
/// Returns a more human readable <code>String</code> from a given <code>CLLocationDistance</code>.
/// The user’s <code>Locale</code> is used here to set the units.
- (NSString * _Nonnull)stringFrom:(CLLocationDistance)distance SWIFT_WARN_UNUSED_RESULT;
- (NSString * _Nonnull)stringFromMeters:(double)numberInMeters SWIFT_WARN_UNUSED_RESULT;
- (NSMeasurement<NSUnitLength *> * _Nonnull)measurementOfDistance:(CLLocationDistance)distance SWIFT_WARN_UNUSED_RESULT SWIFT_AVAILABILITY(ios,introduced=10.0);
/// Returns an attributed string containing the formatted, converted distance.
/// <code>NSAttributedStringKey.quantity</code> is applied to the numeric quantity.
- (NSAttributedString * _Nullable)attributedStringForObjectValue:(id _Nonnull)obj withDefaultAttributes:(NSDictionary<NSAttributedStringKey, id> * _Nullable)attrs SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// :nodoc:
SWIFT_CLASS_NAMED("DistanceLabel")
@interface MBDistanceLabel : MBStylableLabel
@property (nonatomic, strong) UIColor * _Nonnull valueTextColor;
@property (nonatomic, strong) UIColor * _Nonnull unitTextColor;
@property (nonatomic, strong) UIFont * _Nonnull valueFont;
@property (nonatomic, strong) UIFont * _Nonnull unitFont;
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
@end


/// :nodoc:
SWIFT_CLASS_NAMED("DistanceRemainingLabel")
@interface MBDistanceRemainingLabel : MBStylableLabel
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
@end


/// :nodoc:
SWIFT_CLASS_NAMED("EndOfRouteButton")
@interface MBEndOfRouteButton : MBStylableButton
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
@end

@class NSTextContainer;

/// :nodoc:
SWIFT_CLASS_NAMED("StylableTextView")
@interface MBStylableTextView : UITextView
@property (nonatomic, strong) UIColor * _Nonnull normalTextColor;
- (nonnull instancetype)initWithFrame:(CGRect)frame textContainer:(NSTextContainer * _Nullable)textContainer OBJC_DESIGNATED_INITIALIZER SWIFT_AVAILABILITY(ios,introduced=7.0);
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
@end


/// :nodoc:
SWIFT_CLASS_NAMED("EndOfRouteCommentView")
@interface MBEndOfRouteCommentView : MBStylableTextView
- (nonnull instancetype)initWithFrame:(CGRect)frame textContainer:(NSTextContainer * _Nullable)textContainer OBJC_DESIGNATED_INITIALIZER SWIFT_AVAILABILITY(ios,introduced=7.0);
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
@end


/// :nodoc:
SWIFT_CLASS_NAMED("EndOfRouteContentView")
@interface MBEndOfRouteContentView : UIView
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
@end

@class NSNumber;

/// Feedback Model Object for End Of Route Experience.
SWIFT_CLASS("_TtC19OlaMapNavigationSDK18EndOfRouteFeedback")
@interface EndOfRouteFeedback : NSObject
- (nonnull instancetype)initWithRating:(NSNumber * _Nullable)ratingNumber comment:(NSString * _Nullable)comment;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// :nodoc:
SWIFT_CLASS_NAMED("EndOfRouteStaticLabel")
@interface MBEndOfRouteStaticLabel : MBStylableLabel
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
@end


/// :nodoc:
SWIFT_CLASS_NAMED("EndOfRouteTitleLabel")
@interface MBEndOfRouteTitleLabel : MBStylableLabel
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
@end

enum MBFeedbackType : NSInteger;

/// A single feedback item displayed on an instance of <code>FeedbackViewController</code>.
SWIFT_CLASS_NAMED("FeedbackItem")
@interface MBFeedbackItem : NSObject
/// The title of feedback item. This will be rendered directly below the image.
@property (nonatomic, copy) NSString * _Nonnull title;
/// An image representation of the feedback.
@property (nonatomic, strong) UIImage * _Nonnull image;
/// The type of feedback that best describes the event.
@property (nonatomic) enum MBFeedbackType feedbackType;
/// Creates a new <code>FeedbackItem</code>.
- (nonnull instancetype)initWithTitle:(NSString * _Nonnull)title image:(UIImage * _Nonnull)image feedbackType:(enum MBFeedbackType)feedbackType OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

typedef SWIFT_ENUM_NAMED(NSInteger, MBFeedbackSource, "FeedbackSource", open) {
  MBFeedbackSourceUser = 0,
  MBFeedbackSourceReroute = 1,
  MBFeedbackSourceUnknown = 2,
};

/// Feedback type is used to specify the type of feedback being recorded with <code>RouteController.recordFeedback()</code>.
typedef SWIFT_ENUM_NAMED(NSInteger, MBFeedbackType, "FeedbackType", open) {
/// Indicates general feedback. You should provide a <code>description</code> string to <code>RouteController.recordFeedback()</code> to elaborate on the feedback if possible.
  MBFeedbackTypeGeneral = 0,
/// Identifies the feedback as the location of an accident or crash
  MBFeedbackTypeAccident = 1,
/// Identifies the feedback as the location of a road hazard such as debris, stopped vehicles, etc.
  MBFeedbackTypeHazard = 2,
/// Identifies the feedback as the location of a closed road that should not allow vehicles
  MBFeedbackTypeRoadClosed = 3,
/// Identifies the feedback as a maneuver that isn’t allowed. For example, if a user is instructed to make a left turn, but the turn isn’t allowed.
  MBFeedbackTypeNotAllowed = 4,
/// Identifies the feedback as the location of a road that should exist along the route.
  MBFeedbackTypeMissingRoad = 5,
/// Identifies the feedback as a maneuver with missing exit information such as an exit number or destination sign.
  MBFeedbackTypeMissingExit = 6,
/// Identifies the feedback as the location of a poor instruction or route choice. This could be used to indicate an ambiguous or poorly-timed turn announcement, or a set of confusing turns.
  MBFeedbackTypeRoutingError = 7,
/// Identifies the feedback as the location of a confusing instruction.
  MBFeedbackTypeConfusingInstruction = 8,
/// Identifies the feedback as a place where traffic should have been reported.
  MBFeedbackTypeReportTraffic = 9,
/// Identifies the feedback as a general map issue.
  MBFeedbackTypeMapIssue = 10,
};


/// :nodoc:
SWIFT_CLASS_NAMED("FloatingButton")
@interface MBFloatingButton : MBButton
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
@end


/// :nodoc
SWIFT_CLASS_NAMED("StylableView")
@interface MBStylableView : UIView
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
@end


/// <code>GenericRouteShield</code> is a class to render routes that do not have route-shields.
SWIFT_CLASS("_TtC19OlaMapNavigationSDK18GenericRouteShield")
@interface GenericRouteShield : MBStylableView
- (nonnull instancetype)initWithFrame:(CGRect)frame SWIFT_UNAVAILABLE;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
@end



/// :nodoc:
/// <code>HighlightedButton</code> sets the button’s titleColor for normal control state according to the style in addition to the styling behavior inherited from
/// <code>Button</code>.
SWIFT_CLASS_NAMED("HighlightedButton")
@interface MBHighlightedButton : MBButton
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC19OlaMapNavigationSDK28IncidentReportViewController")
@interface IncidentReportViewController : UIViewController
- (void)viewDidLoad;
- (void)viewWillAppear:(BOOL)animated;
- (nonnull instancetype)initWithNibName:(NSString * _Nullable)nibNameOrNil bundle:(NSBundle * _Nullable)nibBundleOrNil OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
@end

@class UICollectionView;
@class UICollectionViewLayout;
@class NSIndexPath;

@interface IncidentReportViewController (SWIFT_EXTENSION(OlaMapNavigationSDK)) <UICollectionViewDelegateFlowLayout>
- (CGSize)collectionView:(UICollectionView * _Nonnull)collectionView layout:(UICollectionViewLayout * _Nonnull)collectionViewLayout sizeForItemAtIndexPath:(NSIndexPath * _Nonnull)indexPath SWIFT_WARN_UNUSED_RESULT;
@end



@class UICollectionViewCell;

@interface IncidentReportViewController (SWIFT_EXTENSION(OlaMapNavigationSDK)) <UICollectionViewDataSource, UICollectionViewDelegate>
- (NSInteger)collectionView:(UICollectionView * _Nonnull)collectionView numberOfItemsInSection:(NSInteger)section SWIFT_WARN_UNUSED_RESULT;
- (UICollectionViewCell * _Nonnull)collectionView:(UICollectionView * _Nonnull)collectionView cellForItemAtIndexPath:(NSIndexPath * _Nonnull)indexPath SWIFT_WARN_UNUSED_RESULT;
- (void)collectionView:(UICollectionView * _Nonnull)collectionView didSelectItemAtIndexPath:(NSIndexPath * _Nonnull)indexPath;
@end


/// :nodoc:
SWIFT_CLASS_NAMED("InstructionLabel")
@interface MBInstructionLabel : MBStylableLabel
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
@end


/// :nodoc:
SWIFT_CLASS_NAMED("InstructionsBannerContentView")
@interface MBInstructionsBannerContentView : UIView
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
@end


/// :nodoc:
IB_DESIGNABLE
SWIFT_CLASS_NAMED("InstructionsBannerView")
@interface MBInstructionsBannerView : BaseInstructionsBannerView
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
@end


/// <code>InstructionsBannerViewDelegate</code> provides methods for reacting to user interactions in <code>InstructionsBannerView</code>.
SWIFT_PROTOCOL_NAMED("InstructionsBannerViewDelegate")
@protocol MBInstructionsBannerViewDelegate
@optional
/// Called when the user taps the <code>InstructionsBannerView</code>.
- (void)didTapInstructionsBanner:(BaseInstructionsBannerView * _Nonnull)sender;
/// Called when the user drags either up or down on the <code>InstructionsBannerView</code>.
- (void)didDragInstructionsBanner:(BaseInstructionsBannerView * _Nonnull)sender;
@end


/// :nodoc:
SWIFT_CLASS_NAMED("LaneView")
@interface MBLaneView : UIView
@property (nonatomic, readonly) CGSize intrinsicContentSize;
@property (nonatomic, strong) UIColor * _Nonnull primaryColor;
@property (nonatomic, strong) UIColor * _Nonnull secondaryColor;
- (void)drawRect:(CGRect)rect;
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS_NAMED("LanesStyleKit")
@interface MBLanesStyleKit : NSObject
/// / Drawing Methods
+ (void)drawLane_straight_rightWithPrimaryColor:(UIColor * _Nonnull)primaryColor;
+ (void)drawLane_straight_onlyWithPrimaryColor:(UIColor * _Nonnull)primaryColor secondaryColor:(UIColor * _Nonnull)secondaryColor;
+ (void)drawLane_right_hWithPrimaryColor:(UIColor * _Nonnull)primaryColor;
+ (void)drawLane_right_onlyWithPrimaryColor:(UIColor * _Nonnull)primaryColor secondaryColor:(UIColor * _Nonnull)secondaryColor;
+ (void)drawLane_straightWithPrimaryColor:(UIColor * _Nonnull)primaryColor;
+ (void)drawLane_uturnWithPrimaryColor:(UIColor * _Nonnull)primaryColor;
+ (void)drawLane_slight_rightWithPrimaryColor:(UIColor * _Nonnull)primaryColor scale:(CGFloat)scale;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/// :nodoc:
IB_DESIGNABLE
SWIFT_CLASS_NAMED("LanesView")
@interface MBLanesView : UIView
- (nonnull instancetype)initWithFrame:(CGRect)frame SWIFT_UNAVAILABLE;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
- (void)prepareForInterfaceBuilder;
/// Updates the tertiary instructions banner info with a given <code>VisualInstructionBanner</code>.
- (void)updateForVisualInstructionBanner:(MBVisualInstructionBanner * _Nullable)visualInstruction;
@end




@interface MGLStyle (SWIFT_EXTENSION(OlaMapNavigationSDK))
/// Returns the URL to the current version of the Mapbox Navigation Guidance Day style.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSURL * _Nonnull navigationGuidanceDayStyleURL;)
+ (NSURL * _Nonnull)navigationGuidanceDayStyleURL SWIFT_WARN_UNUSED_RESULT;
/// Returns the URL to the current version of the Mapbox Navigation Guidance Night style.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSURL * _Nonnull navigationGuidanceNightStyleURL;)
+ (NSURL * _Nonnull)navigationGuidanceNightStyleURL SWIFT_WARN_UNUSED_RESULT;
/// Returns the URL to the given version of the navigation guidance style. Available version are 1, 2, 3, and 4.
/// We only have one version of navigation guidance style in China, so if you switch your endpoint to .cn, it will return the default day style.
+ (NSURL * _Nonnull)navigationGuidanceDayStyleURLWithVersion:(NSInteger)version SWIFT_WARN_UNUSED_RESULT;
/// Returns the URL to the given version of the navigation guidance style. Available version are 2, 3, and 4.
/// We only have one version of navigation guidance style in China, so if you switch your endpoint to .cn, it will return the default night style.
+ (NSURL * _Nonnull)navigationGuidanceNightStyleURLWithVersion:(NSInteger)version SWIFT_WARN_UNUSED_RESULT;
/// Returns the URL to the current version of the Mapbox Navigation Preview Day style.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSURL * _Nonnull navigationPreviewDayStyleURL;)
+ (NSURL * _Nonnull)navigationPreviewDayStyleURL SWIFT_WARN_UNUSED_RESULT;
/// Returns the URL to the current version of the Mapbox Navigation Preview Night style.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSURL * _Nonnull navigationPreviewNightStyleURL;)
+ (NSURL * _Nonnull)navigationPreviewNightStyleURL SWIFT_WARN_UNUSED_RESULT;
/// Returns the URL to the given version of the Mapbox Navigation Preview Day style. Available versions are 1, 2, 3, and 4.
/// We only have one version of Navigation Preview style in China, so if you switch your endpoint to .cn, it will return the default day style.
+ (NSURL * _Nonnull)navigationPreviewDayStyleURLWithVersion:(NSInteger)version SWIFT_WARN_UNUSED_RESULT;
/// Returns the URL to the given version of the Mapbox Navigation Preview Night style. Available versions are 2, 3, and 4.
/// We only have one version of Navigation Preview style in China, so if you switch your endpoint to .cn, it will return the default night style.
+ (NSURL * _Nonnull)navigationPreviewNightStyleURLWithVersion:(NSInteger)version SWIFT_WARN_UNUSED_RESULT;
@end



/// :nodoc:
SWIFT_CLASS_NAMED("ManeuverContainerView")
@interface MBManeuverContainerView : UIView
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
@end

@class MBVisualInstruction;

/// :nodoc:
IB_DESIGNABLE
SWIFT_CLASS_NAMED("ManeuverView")
@interface MBManeuverView : UIView
@property (nonatomic, strong) UIColor * _Nonnull primaryColor;
@property (nonatomic, strong) UIColor * _Nonnull secondaryColor;
@property (nonatomic) BOOL isStart;
@property (nonatomic) BOOL isEnd;
/// The current instruction displayed in the maneuver view.
@property (nonatomic, strong) MBVisualInstruction * _Nullable visualInstruction;
/// This indicates the side of the road currently driven on.
@property (nonatomic) enum MBDrivingSide drivingSide;
- (void)drawRect:(CGRect)rect;
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
@end

enum ManeuversStyleKitResizingBehavior : NSInteger;

SWIFT_CLASS_NAMED("ManeuversStyleKit")
@interface MBManeuversStyleKit : NSObject
/// / Drawing Methods
+ (void)drawArrow180rightWithFrame:(CGRect)targetFrame resizing:(enum ManeuversStyleKitResizingBehavior)resizing primaryColor:(UIColor * _Nonnull)primaryColor size:(CGSize)size;
+ (void)drawArrowrightWithFrame:(CGRect)targetFrame resizing:(enum ManeuversStyleKitResizingBehavior)resizing primaryColor:(UIColor * _Nonnull)primaryColor size:(CGSize)size;
+ (void)drawArrowslightrightWithFrame:(CGRect)targetFrame resizing:(enum ManeuversStyleKitResizingBehavior)resizing primaryColor:(UIColor * _Nonnull)primaryColor size:(CGSize)size;
+ (void)drawArrowstraightWithFrame:(CGRect)targetFrame resizing:(enum ManeuversStyleKitResizingBehavior)resizing primaryColor:(UIColor * _Nonnull)primaryColor size:(CGSize)size;
+ (void)drawArrowsharprightWithFrame:(CGRect)targetFrame resizing:(enum ManeuversStyleKitResizingBehavior)resizing primaryColor:(UIColor * _Nonnull)primaryColor size:(CGSize)size;
+ (void)drawArriveWithFrame:(CGRect)targetFrame resizing:(enum ManeuversStyleKitResizingBehavior)resizing primaryColor:(UIColor * _Nonnull)primaryColor size:(CGSize)size;
+ (void)drawStartingWithFrame:(CGRect)targetFrame resizing:(enum ManeuversStyleKitResizingBehavior)resizing primaryColor:(UIColor * _Nonnull)primaryColor size:(CGSize)size;
+ (void)drawDestinationWithFrame:(CGRect)targetFrame resizing:(enum ManeuversStyleKitResizingBehavior)resizing primaryColor:(UIColor * _Nonnull)primaryColor size:(CGSize)size;
+ (void)drawMergeWithFrame:(CGRect)targetFrame resizing:(enum ManeuversStyleKitResizingBehavior)resizing primaryColor:(UIColor * _Nonnull)primaryColor secondaryColor:(UIColor * _Nonnull)secondaryColor size:(CGSize)size;
+ (void)drawForkWithFrame:(CGRect)targetFrame resizing:(enum ManeuversStyleKitResizingBehavior)resizing primaryColor:(UIColor * _Nonnull)primaryColor secondaryColor:(UIColor * _Nonnull)secondaryColor size:(CGSize)size;
+ (void)drawOfframpWithFrame:(CGRect)targetFrame resizing:(enum ManeuversStyleKitResizingBehavior)resizing primaryColor:(UIColor * _Nonnull)primaryColor secondaryColor:(UIColor * _Nonnull)secondaryColor size:(CGSize)size;
+ (void)drawArriverightWithFrame:(CGRect)targetFrame resizing:(enum ManeuversStyleKitResizingBehavior)resizing primaryColor:(UIColor * _Nonnull)primaryColor size:(CGSize)size;
+ (void)drawRoundaboutWithFrame:(CGRect)targetFrame resizing:(enum ManeuversStyleKitResizingBehavior)resizing primaryColor:(UIColor * _Nonnull)primaryColor secondaryColor:(UIColor * _Nonnull)secondaryColor size:(CGSize)size roundabout_angle:(CGFloat)roundabout_angle roundabout_radius:(CGFloat)roundabout_radius;
+ (void)drawArriveright2WithFrame:(CGRect)targetFrame resizing:(enum ManeuversStyleKitResizingBehavior)resizing primaryColor:(UIColor * _Nonnull)primaryColor size:(CGSize)size;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

typedef SWIFT_ENUM_NAMED(NSInteger, ManeuversStyleKitResizingBehavior, "ResizingBehavior", open) {
  ManeuversStyleKitResizingBehaviorAspectFit = 0,
/// The content is proportionally resized to fit into the target rectangle.
  ManeuversStyleKitResizingBehaviorAspectFill = 1,
/// The content is proportionally resized to completely fill the target rectangle.
  ManeuversStyleKitResizingBehaviorStretch = 2,
/// The content is stretched to match the entire target rectangle.
  ManeuversStyleKitResizingBehaviorCenter = 3,
};


/// Map Picker where you can choose center coordinate
SWIFT_CLASS("_TtC19OlaMapNavigationSDK23MapPickerViewController")
@interface MapPickerViewController : UIViewController
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder SWIFT_UNAVAILABLE;
- (void)viewDidLoad;
- (nonnull instancetype)initWithNibName:(NSString * _Nullable)nibNameOrNil bundle:(NSBundle * _Nullable)nibBundleOrNil SWIFT_UNAVAILABLE;
@end

@class AVAudioPlayer;
@class AVSpeechSynthesizer;
@class AVSpeechUtterance;
@class NSNotification;

/// The <code>RouteVoiceController</code> class provides voice guidance.
SWIFT_CLASS_NAMED("RouteVoiceController")
@interface MBRouteVoiceController : NSObject <AVSpeechSynthesizerDelegate>
/// If true, a noise indicating the user is going to be rerouted will play prior to rerouting.
@property (nonatomic) BOOL playRerouteSound;
/// Sound to play prior to reroute. Inherits volume level from <code>volume</code>.
@property (nonatomic, strong) AVAudioPlayer * _Nonnull rerouteSoundPlayer;
/// Default initializer for <code>RouteVoiceController</code>.
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
- (void)speechSynthesizer:(AVSpeechSynthesizer * _Nonnull)synthesizer didFinishSpeechUtterance:(AVSpeechUtterance * _Nonnull)utterance;
- (void)didPassSpokenInstructionPointWithNotification:(NSNotification * _Nonnull)notification;
@end

@class MBSpeechSynthesizer;
@class MBSpokenInstruction;

/// <code>MapboxVoiceController</code> extends the default <code>RouteVoiceController</code> by providing a more robust speech synthesizer via the Mapbox Speech API. <code>RouteVoiceController</code> will be used as a fallback during poor network conditions.
SWIFT_CLASS_NAMED("MapboxVoiceController")
@interface MBMapboxVoiceController : MBRouteVoiceController <AVAudioPlayerDelegate>
/// Number of seconds a request can wait before it is canceled and the default speech synthesizer speaks the instruction.
@property (nonatomic) NSTimeInterval timeoutIntervalForRequest;
/// Number of steps ahead of the current step to cache spoken instructions.
@property (nonatomic) NSInteger stepsAheadToCache;
/// An <code>AVAudioPlayer</code> through which spoken instructions are played.
@property (nonatomic, strong) AVAudioPlayer * _Nullable audioPlayer;
- (nonnull instancetype)initWithSpeechClient:(MBSpeechSynthesizer * _Nonnull)speechClient dataCache:(id <MBBimodalDataCache> _Nonnull)dataCache audioPlayerType:(SWIFT_METATYPE(AVAudioPlayer) _Nullable)audioPlayerType OBJC_DESIGNATED_INITIALIZER;
- (void)audioPlayerDidFinishPlaying:(AVAudioPlayer * _Nonnull)player successfully:(BOOL)flag;
- (void)didPassSpokenInstructionPointWithNotification:(NSNotification * _Nonnull)notification;
/// Speaks an instruction.
/// The cache is first checked to see if we have already downloaded the speech file. If not, the instruction is fetched and played. If there is an error anywhere along the way, the instruction will be spoken with the default speech synthesizer.
- (void)speak:(MBSpokenInstruction * _Nonnull)instruction;
/// Speaks an instruction with the built in speech synthesizer.
/// This method should be used in cases where <code>fetch(instruction:)</code> or <code>play(_:)</code> fails.
- (void)speakWithDefaultSpeechSynthesizer:(MBSpokenInstruction * _Nonnull)instruction error:(NSError * _Nullable)error;
/// Fetches and plays an instruction.
- (void)fetchAndSpeakWithInstruction:(MBSpokenInstruction * _Nonnull)instruction;
/// Caches an instruction in an in-memory cache.
- (void)downloadAndCacheSpokenInstructionWithInstruction:(MBSpokenInstruction * _Nonnull)instruction;
/// Plays an audio file.
- (void)play:(NSData * _Nonnull)data;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// :nodoc:
SWIFT_CLASS_NAMED("MarkerView")
@interface MBMarkerView : UIView
@property (nonatomic, strong) UIColor * _Nonnull innerColor;
@property (nonatomic, strong) UIColor * _Nonnull shadowColor;
@property (nonatomic, strong) UIColor * _Nonnull pinColor;
@property (nonatomic, strong) UIColor * _Nonnull strokeColor;
@property (nonatomic, readonly) CGSize intrinsicContentSize;
- (void)layoutSubviews;
- (void)drawRect:(CGRect)rect;
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
@end






/// <code>NavigationLocationManager</code> is the base location manager which handles permissions and background modes.
SWIFT_CLASS_NAMED("NavigationLocationManager")
@interface MBNavigationLocationManager : CLLocationManager <NSCopying>
- (id _Nonnull)copyWithZone:(struct _NSZone * _Nullable)zone SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

@class MBUserPuckCourseView;
@class UIGestureRecognizer;
@class MGLMapCamera;

/// <code>NavigationMapView</code> is a subclass of <code>MGLMapView</code> with convenience functions for adding <code>Route</code> lines to a map.
SWIFT_CLASS_NAMED("NavigationMapView")
@interface MBNavigationMapView : MGLMapView <UIGestureRecognizerDelegate>
@property (nonatomic) CLLocationDistance defaultAltitude;
@property (nonatomic) BOOL isWalking;
@property (nonatomic) BOOL isSolidPolylineType;
@property (nonatomic) CLLocationDistance zoomedOutMotorwayAltitude;
/// Returns the threshold for what the map considers a “long-enough” maneuver distance to trigger a zoom-out when the user enters a motorway.
@property (nonatomic) CLLocationDistance longManeuverDistance;
/// Maximum distance the user can tap for a selection to be valid when selecting an alternate route.
@property (nonatomic) CGFloat tapGestureDistanceThreshold;
@property (nonatomic, strong) UIColor * _Nonnull trafficUnknownColor;
@property (nonatomic, strong) UIColor * _Nonnull trafficLowColor;
@property (nonatomic, strong) UIColor * _Nonnull trafficModerateColor;
@property (nonatomic, strong) UIColor * _Nonnull trafficHeavyColor;
@property (nonatomic, strong) UIColor * _Nonnull trafficSevereColor;
@property (nonatomic, strong) UIColor * _Nonnull routeLineColor;
@property (nonatomic, strong) UIColor * _Nonnull routeLineAlternativeColor;
@property (nonatomic, strong) UIColor * _Nonnull routeLineCasingColor;
@property (nonatomic, strong) UIColor * _Nonnull routeLineCasingAlternativeColor;
@property (nonatomic, strong) UIColor * _Nonnull maneuverArrowColor;
@property (nonatomic, strong) UIColor * _Nonnull maneuverArrowStrokeColor;
@property (nonatomic) BOOL showsUserLocation;
/// A <code>UIView</code> used to indicate the user’s location and course on the map.
/// If the view conforms to <code>UserCourseView</code>, its <code>UserCourseView.update(location:pitch:direction:animated:)</code> method is frequently called to ensure that its visual appearance matches the map’s camera.
@property (nonatomic, strong) MBUserPuckCourseView * _Nullable userCourseView;
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)decoder OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithFrame:(CGRect)frame styleURL:(NSURL * _Nullable)styleURL OBJC_DESIGNATED_INITIALIZER;
- (void)prepareForInterfaceBuilder;
- (void)layoutSubviews;
- (CGPoint)anchorPointForGesture:(UIGestureRecognizer * _Nonnull)gesture SWIFT_WARN_UNUSED_RESULT;
- (void)mapViewDidFinishRenderingFrameFullyRendered:(BOOL)fullyRendered;
- (void)updateCourseTrackingWithLocation:(CLLocation * _Nullable)location camera:(MGLMapCamera * _Nullable)camera animated:(BOOL)animated;
- (void)showcase:(NSArray<MBRoute *> * _Nonnull)routes padding:(UIEdgeInsets)padding animated:(BOOL)animated;
/// Adds or updates both the route line and the route line casing
- (void)showRoutes:(NSArray<MBRoute *> * _Nonnull)routes legIndex:(NSInteger)legIndex;
/// Removes route line and route line casing from map
- (void)removeRoutes;
/// Adds the route waypoints to the map given the current leg index. Previous waypoints for completed legs will be omitted.
- (void)showWaypoints:(MBRoute * _Nonnull)route legIndex:(NSInteger)legIndex;
/// Removes all waypoints from the map.
- (void)removeWaypoints;
/// Shows the step arrow given the current <code>RouteProgress</code>.
- (void)addArrowWithRoute:(MBRoute * _Nonnull)route legIndex:(NSInteger)legIndex stepIndex:(NSInteger)stepIndex;
/// Removes the step arrow from the map.
- (void)removeArrow;
/// Attempts to localize road labels into the local language and other labels
/// into the system’s preferred language.
/// When this property is enabled, the style automatically modifies the <code>text</code>
/// property of any symbol style layer whose source is the
/// <a href="https://www.mapbox.com/vector-tiles/mapbox-streets-v7/#overview">Mapbox
/// Streets source</a>. On iOS, the user can set the system’s preferred
/// language in Settings, General Settings, Language & Region.
/// Unlike the <code>MGLStyle.localizeLabels(into:)</code> method, this method localizes
/// road labels into the local language, regardless of the system’s preferred
/// language, in an effort to match road signage. The turn banner always
/// displays road names and exit destinations in the local language, so you
/// should call this method in the
/// <code>MGLMapViewDelegate.mapView(_:didFinishLoading:)</code> method of any delegate of
/// a standalone <code>NavigationMapView</code>. The map view embedded in
/// <code>NavigationViewController</code> is localized automatically, so you do not need
/// to call this method on the value of <code>NavigationViewController.mapView</code>.
- (void)localizeLabels;
- (void)showVoiceInstructionsOnMapWithRoute:(MBRoute * _Nonnull)route;
/// Sets the camera directly over a series of coordinates.
- (void)setOverheadCameraViewFrom:(CLLocationCoordinate2D)userLocation along:(NSArray<NSValue *> * _Nonnull)coordinates for:(UIEdgeInsets)bounds;
/// Recenters the camera and begins tracking the user’s location.
- (void)recenterMap;
@end



/// The <code>NavigationMapViewCourseTrackingDelegate</code> provides methods for responding to the <code>NavigationMapView</code> starting or stopping course tracking.
SWIFT_PROTOCOL_NAMED("NavigationMapViewCourseTrackingDelegate")
@protocol MBNavigationMapViewCourseTrackingDelegate
@optional
/// Tells the receiver that the map is now tracking the user course.
/// seealso:
/// NavigationMapView.tracksUserCourse
/// \param mapView The NavigationMapView.
///
- (void)navigationMapViewDidStartTrackingCourse:(MBNavigationMapView * _Nonnull)mapView;
/// Tells the receiver that <code>tracksUserCourse</code> was set to false, signifying that the map is no longer tracking the user course.
/// seealso:
/// NavigationMapView.tracksUserCourse
/// \param mapView The NavigationMapView.
///
- (void)navigationMapViewDidStopTrackingCourse:(MBNavigationMapView * _Nonnull)mapView;
@end


/// A <code>NavigationMatchOptions</code> object specifies turn-by-turn-optimized criteria for results returned by the Mapbox Map Matching API.
/// <code>NavigationMatchOptions</code> is a subclass of <code>MatchOptions</code> that has been optimized for navigation. Pass an instance of this class into the <code>Directions.calculateRoutes(matching:completionHandler:).</code> method.
/// Note: it is very important you specify the <code>waypoints</code> for the route. Usually the only two values for this <code>IndexSet</code> will be 0 and the length of the coordinates. Otherwise, all coordinates passed through will be considered waypoints.
SWIFT_RESILIENT_CLASS_NAMED("NavigationMatchOptions")
@interface MBNavigationMatchOptions : MBMatchOptions
/// Initializes a navigation route options object for routes between the given waypoints and an optional profile identifier optimized for navigation.
/// seealso:
///
/// <a href="https://www.mapbox.com/mapbox-navigation-ios/directions/0.19.0/Classes/MatchOptions.html">MatchOptions</a>
- (nonnull instancetype)initWithWaypoints:(NSArray<MBWaypoint *> * _Nonnull)waypoints profileIdentifier:(MBDirectionsProfileIdentifier _Nullable)profileIdentifier OBJC_DESIGNATED_INITIALIZER;
/// Initializes a navigation match options object for routes between the given locations and an optional profile identifier optimized for navigation.
/// seealso:
///
/// <a href="https://www.mapbox.com/mapbox-navigation-ios/directions/0.19.0/Classes/MatchOptions.html">MatchOptions</a>
- (nonnull instancetype)initWithLocations:(NSArray<CLLocation *> * _Nonnull)locations profileIdentifier:(MBDirectionsProfileIdentifier _Nullable)profileIdentifier;
/// Initializes a navigation match options object for routes between the given geographic coordinates and an optional profile identifier optimized for navigation.
/// seealso:
///
/// <a href="https://www.mapbox.com/mapbox-navigation-ios/directions/0.19.0/Classes/MatchOptions.html">MatchOptions</a>
- (nonnull instancetype)initWithCoordinates:(NSArray<NSValue *> * _Nonnull)coordinates profileIdentifier:(MBDirectionsProfileIdentifier _Nullable)profileIdentifier;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)decoder OBJC_DESIGNATED_INITIALIZER;
@end


/// A <code>NavigationRouteOptions</code> object specifies turn-by-turn-optimized criteria for results returned by the Mapbox Directions API.
/// <code>NavigationRouteOptions</code> is a subclass of <code>RouteOptions</code> that has been optimized for navigation. Pass an instance of this class into the <code>Directions.calculate(_:completionHandler:)</code> method.
SWIFT_RESILIENT_CLASS("_TtC19OlaMapNavigationSDK22NavigationRouteOptions")
@interface NavigationRouteOptions : MBRouteOptions
/// Initializes a navigation route options object for routes between the given waypoints and an optional profile identifier optimized for navigation.
/// seealso:
///
/// <a href="https://www.mapbox.com/mapbox-navigation-ios/directions/0.10.1/Classes/RouteOptions.html">RouteOptions</a>
- (nonnull instancetype)initWithWaypoints:(NSArray<MBWaypoint *> * _Nonnull)waypoints profileIdentifier:(MBDirectionsProfileIdentifier _Nullable)profileIdentifier OBJC_DESIGNATED_INITIALIZER;
/// Initializes a navigation route options object for routes between the given locations and an optional profile identifier optimized for navigation.
/// seealso:
///
/// <a href="https://www.mapbox.com/mapbox-navigation-ios/directions/0.19.0/Classes/RouteOptions.html">RouteOptions</a>
- (nonnull instancetype)initWithLocations:(NSArray<CLLocation *> * _Nonnull)locations profileIdentifier:(MBDirectionsProfileIdentifier _Nullable)profileIdentifier;
/// Initializes a route options object for routes between the given geographic coordinates and an optional profile identifier optimized for navigation.
/// seealso:
///
/// <a href="https://www.mapbox.com/mapbox-navigation-ios/directions/0.19.0/Classes/RouteOptions.html">RouteOptions</a>
- (nonnull instancetype)initWithCoordinates:(NSArray<NSValue *> * _Nonnull)coordinates profileIdentifier:(MBDirectionsProfileIdentifier _Nullable)profileIdentifier;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)decoder OBJC_DESIGNATED_INITIALIZER;
@end


/// <code>NavigationSettings</code> provides a wrapper for UserDefaults.
/// Properties are prefixed and before they are stored in UserDefaults.standard.
SWIFT_CLASS_NAMED("NavigationSettings")
@interface MBNavigationSettings : NSObject
/// The volume that the voice controller will use.
/// This volume is relative to the system’s volume where 1.0 is same volume as the system.
@property (nonatomic) float voiceVolume;
/// Specifies whether to mute the voice controller or not.
@property (nonatomic) BOOL voiceMuted;
/// Specifies the preferred distance measurement unit.
/// note:
/// Anything but <code>kilometer</code> and <code>mile</code> will fall back to the default measurement for the current locale.
/// Meters and feets will be used when the presented distances are small enough. See <code>DistanceFormatter</code> for more information.
@property (nonatomic) NSLengthFormatterUnit distanceUnit;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
- (void)observeValueForKeyPath:(NSString * _Nullable)keyPath ofObject:(id _Nullable)object change:(NSDictionary<NSKeyValueChangeKey, id> * _Nullable)change context:(void * _Nullable)context;
@end


/// A view that represents the root view of the MapboxNavigation drop-in UI.
/// <h2>Components</h2>
/// <ol>
///   <li>
///     InstructionsBannerView
///   </li>
///   <li>
///     InformationStackView
///   </li>
///   <li>
///     BottomBannerView
///   </li>
///   <li>
///     ResumeButton
///   </li>
///   <li>
///     WayNameLabel
///   </li>
///   <li>
///     FloatingStackView
///   </li>
///   <li>
///     NavigationMapView
///   </li>
/// </ol>
/// \code
/// +--------------------+
/// |         1          |
/// +--------------------+
/// |         2          |
/// +----------------+---+
/// |                |   |
/// |                | 6 |
/// |                |   |
/// |         7      +---+
/// |                    |
/// |                    |
/// |                    |
/// +------------+       |
/// |  4  ||  5  |       |
/// +------------+-------+
/// |         3          |
/// +--------------------+
///
/// \endcode
IB_DESIGNABLE
SWIFT_CLASS_NAMED("NavigationView")
@interface MBNavigationView : UIView
- (nonnull instancetype)initWithFrame:(CGRect)frame SWIFT_UNAVAILABLE;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
- (void)prepareForInterfaceBuilder;
@end


@class MBDirections;

/// <code>NavigationViewController</code> is a fully-featured turn-by-turn navigation UI.
/// It provides step by step instructions, an overview of all steps for the given route and support for basic styling.
/// seealso:
/// CarPlayNavigationViewController
SWIFT_CLASS_NAMED("NavigationViewController")
@interface MBNavigationViewController : UIViewController
/// \code
/// A `Route` object constructed by [MapboxDirections](https://mapbox.github.io/mapbox-navigation-ios/directions/).
///
/// In cases where you need to update the route after navigation has started you can set a new `route` here and `NavigationViewController` will update its UI accordingly.
///
/// \endcode
@property (nonatomic, strong) MBRoute * _Null_unspecified route;
/// An instance of <code>Directions</code> need for rerouting. See <a href="https://mapbox.github.io/mapbox-navigation-ios/directions/">Mapbox Directions</a> for further information.
@property (nonatomic, strong) MBDirections * _Null_unspecified directions;
/// An optional <code>MGLMapCamera</code> you can use to improve the initial transition from a previous viewport and prevent a trigger from an excessive significant location update.
@property (nonatomic, strong) MGLMapCamera * _Nullable pendingCamera;
/// An instance of <code>MGLAnnotation</code> representing the origin of your route.
@property (nonatomic, strong) id <MGLAnnotation> _Nullable origin;
/// Provides access to various speech synthesizer options.
/// See <code>RouteVoiceController</code> for more information.
@property (nonatomic, strong) MBRouteVoiceController * _Null_unspecified voiceController;
/// Provides all routing logic for the user.
/// See <code>RouteController</code> for more information.
@property (nonatomic, strong) MBRouteController * _Null_unspecified routeController;
/// The main map view displayed inside the view controller.
/// note:
/// Do not change this map view’s delegate.
@property (nonatomic, readonly, strong) MBNavigationMapView * _Nullable mapView;
/// Determines whether the user location annotation is moved from the raw user location reported by the device to the nearest location along the route.
/// By default, this property is set to <code>true</code>, causing the user location annotation to be snapped to the route.
@property (nonatomic) BOOL snapsUserLocationAnnotationToRoute;
/// Toggles sending of UILocalNotification upon upcoming steps when application is in the background. Defaults to <code>true</code>.
@property (nonatomic) BOOL sendsNotifications;
/// Shows a button that allows drivers to report feedback such as accidents, closed roads,  poor instructions, etc. Defaults to <code>true</code>.
@property (nonatomic) BOOL showsReportFeedback;
/// Shows End of route Feedback UI when the route controller arrives at the final destination. Defaults to <code>true.</code>
@property (nonatomic) BOOL showsEndOfRouteFeedback;
/// If true, the map style and UI will automatically be updated given the time of day.
@property (nonatomic) BOOL automaticallyAdjustsStyleForTimeOfDay;
/// If <code>true</code>, <code>UIApplication.isIdleTimerDisabled</code> is set to <code>true</code> in <code>viewWillAppear(_:)</code> and <code>false</code> in <code>viewWillDisappear(_:)</code>. If your application manages the idle timer itself, set this property to <code>false</code>.
@property (nonatomic) BOOL shouldManageApplicationIdleTimer;
/// Bool which should be set to true if a CarPlayNavigationView is also being used.
@property (nonatomic) BOOL isUsedInConjunctionWithCarPlayWindow;
/// A Boolean value that determines whether the map annotates the locations at which instructions are spoken for debugging purposes.
@property (nonatomic) BOOL annotatesSpokenInstructions;
@property (nonatomic, readonly) UIStatusBarStyle preferredStatusBarStyle;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
- (void)viewDidLoad;
- (void)viewWillAppear:(BOOL)animated;
- (void)viewWillDisappear:(BOOL)animated;
- (nonnull instancetype)initWithNibName:(NSString * _Nullable)nibNameOrNil bundle:(NSBundle * _Nullable)nibBundleOrNil SWIFT_UNAVAILABLE;
@end


@interface MBNavigationViewController (SWIFT_EXTENSION(OlaMapNavigationSDK))
- (void)routeController:(MBRouteController * _Nonnull)routeController didUpdateUserLocation:(CLLocation * _Nonnull)locations;
@end

@class MBTunnelIntersectionManager;

/// The <code>TunnelIntersectionManagerDelegate</code> protocol provides methods for responding to events where a user enters or exits a tunnel.
SWIFT_PROTOCOL_NAMED("TunnelIntersectionManagerDelegate")
@protocol MBTunnelIntersectionManagerDelegate
@optional
/// Called immediately when the location manager detects a user will enter a tunnel.
/// \param manager The <code>TunnelIntersectionManager</code> that currently sends the location updates.
///
/// \param location The user’s current location where the tunnel was detected.
///
- (void)tunnelIntersectionManager:(MBTunnelIntersectionManager * _Nonnull)manager willEnableAnimationAtLocation:(CLLocation * _Nonnull)location;
/// Called immediately when the location manager detects the user will exit a tunnel.
/// \param manager The <code>TunnelIntersectionManager</code> that currently sends the location updates.
///
/// \param location The user’s current location where the tunnel was detected.
///
- (void)tunnelIntersectionManager:(MBTunnelIntersectionManager * _Nonnull)manager willDisableAnimationAtLocation:(CLLocation * _Nonnull)location;
@end


@interface MBNavigationViewController (SWIFT_EXTENSION(OlaMapNavigationSDK)) <MBTunnelIntersectionManagerDelegate>
- (void)tunnelIntersectionManager:(MBTunnelIntersectionManager * _Nonnull)manager willEnableAnimationAtLocation:(CLLocation * _Nonnull)location;
- (void)tunnelIntersectionManager:(MBTunnelIntersectionManager * _Nonnull)manager willDisableAnimationAtLocation:(CLLocation * _Nonnull)location;
@end


@interface MBNavigationViewController (SWIFT_EXTENSION(OlaMapNavigationSDK)) <MBStyleManagerDelegate>
- (CLLocation * _Nullable)locationForStyleManager:(MBStyleManager * _Nonnull)styleManager SWIFT_WARN_UNUSED_RESULT;
- (void)styleManager:(MBStyleManager * _Nonnull)styleManager didApply:(MBStyle * _Nonnull)style;
- (void)styleManagerDidRefreshAppearance:(MBStyleManager * _Nonnull)styleManager;
@end


@interface MBNavigationViewController (SWIFT_EXTENSION(OlaMapNavigationSDK)) <MBRouteControllerDelegate>
- (BOOL)routeController:(MBRouteController * _Nonnull)routeController shouldRerouteFromLocation:(CLLocation * _Nonnull)location SWIFT_WARN_UNUSED_RESULT;
- (void)routeController:(MBRouteController * _Nonnull)routeController willRerouteFromLocation:(CLLocation * _Nonnull)location;
- (void)routeController:(MBRouteController * _Nonnull)routeController didRerouteAlong:(MBRoute * _Nonnull)route;
- (void)routeController:(MBRouteController * _Nonnull)routeController didFailToRerouteWithError:(NSError * _Nonnull)error;
- (BOOL)routeController:(MBRouteController * _Nonnull)routeController shouldDiscardLocation:(CLLocation * _Nonnull)location SWIFT_WARN_UNUSED_RESULT;
- (void)routeController:(MBRouteController * _Nonnull)routeController didUpdateLocations:(NSArray<CLLocation *> * _Nonnull)locations;
- (BOOL)routeController:(MBRouteController * _Nonnull)routeController didArriveAtWaypoint:(MBWaypoint * _Nonnull)waypoint SWIFT_WARN_UNUSED_RESULT;
@end


/// The <code>VoiceControllerDelegate</code> protocol defines a method that allows an object to customize presented visual instructions.
SWIFT_PROTOCOL_NAMED("VisualInstructionDelegate")
@protocol MBVisualInstructionDelegate
@optional
/// Called when an InstructionLabel will present a visual instruction.
/// \param label The label that the instruction will be presented on.
///
/// \param instruction the <code>VisualInstruction</code> that will be presented.
///
/// \param presented the formatted string that is provided by the instruction presenter
///
///
/// returns:
/// optionally, a customized NSAttributedString that will be presented instead of the default, or if nil, the default behavior will be used.
- (NSAttributedString * _Nullable)label:(MBInstructionLabel * _Nonnull)label willPresentVisualInstruction:(MBVisualInstruction * _Nonnull)instruction asAttributedString:(NSAttributedString * _Nonnull)presented SWIFT_WARN_UNUSED_RESULT;
@end

@class MGLSource;
@class MGLStyleLayer;
@class MGLShape;
@class MGLAnnotationImage;

@interface MBNavigationViewController (SWIFT_EXTENSION(OlaMapNavigationSDK))
- (MGLStyleLayer * _Nullable)navigationMapView:(MBNavigationMapView * _Nonnull)mapView routeCasingStyleLayerWithIdentifier:(NSString * _Nonnull)identifier source:(MGLSource * _Nonnull)source SWIFT_WARN_UNUSED_RESULT;
- (MGLStyleLayer * _Nullable)navigationMapView:(MBNavigationMapView * _Nonnull)mapView routeStyleLayerWithIdentifier:(NSString * _Nonnull)identifier source:(MGLSource * _Nonnull)source SWIFT_WARN_UNUSED_RESULT;
- (void)navigationMapView:(MBNavigationMapView * _Nonnull)mapView didSelectRoute:(MBRoute * _Nonnull)route;
- (MGLShape * _Nullable)navigationMapView:(MBNavigationMapView * _Nonnull)mapView shapeForRoutes:(NSArray<MBRoute *> * _Nonnull)routes SWIFT_WARN_UNUSED_RESULT;
- (MGLShape * _Nullable)navigationMapView:(MBNavigationMapView * _Nonnull)mapView simplifiedShapeForRoute:(MBRoute * _Nonnull)route SWIFT_WARN_UNUSED_RESULT;
- (MGLStyleLayer * _Nullable)navigationMapView:(MBNavigationMapView * _Nonnull)mapView waypointStyleLayerWithIdentifier:(NSString * _Nonnull)identifier source:(MGLSource * _Nonnull)source SWIFT_WARN_UNUSED_RESULT;
- (MGLStyleLayer * _Nullable)navigationMapView:(MBNavigationMapView * _Nonnull)mapView waypointSymbolStyleLayerWithIdentifier:(NSString * _Nonnull)identifier source:(MGLSource * _Nonnull)source SWIFT_WARN_UNUSED_RESULT;
- (MGLShape * _Nullable)navigationMapView:(MBNavigationMapView * _Nonnull)mapView shapeForWaypoints:(NSArray<MBWaypoint *> * _Nonnull)waypoints legIndex:(NSInteger)legIndex SWIFT_WARN_UNUSED_RESULT;
- (MGLAnnotationImage * _Nullable)navigationMapView:(MGLMapView * _Nonnull)mapView imageForAnnotation:(id <MGLAnnotation> _Nonnull)annotation SWIFT_WARN_UNUSED_RESULT;
- (MGLAnnotationView * _Nullable)navigationMapView:(MGLMapView * _Nonnull)mapView viewForAnnotation:(id <MGLAnnotation> _Nonnull)annotation SWIFT_WARN_UNUSED_RESULT;
- (CGPoint)navigationMapViewUserAnchorPoint:(MBNavigationMapView * _Nonnull)mapView SWIFT_WARN_UNUSED_RESULT;
- (NSAttributedString * _Nullable)label:(MBInstructionLabel * _Nonnull)label willPresentVisualInstruction:(MBVisualInstruction * _Nonnull)instruction asAttributedString:(NSAttributedString * _Nonnull)presented SWIFT_WARN_UNUSED_RESULT;
- (void)mapView:(MGLMapView * _Nonnull)mapView regionDidChangeWith:(MGLCameraChangeReason)reason animated:(BOOL)animated;
@end


/// :nodoc:
IB_DESIGNABLE
SWIFT_CLASS_NAMED("NextBannerView")
@interface MBNextBannerView : UIView
- (nonnull instancetype)initWithFrame:(CGRect)frame SWIFT_UNAVAILABLE;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
- (void)prepareForInterfaceBuilder;
/// Updates the instructions banner info with a given <code>VisualInstructionBanner</code>.
- (void)updateForVisualInstructionBanner:(MBVisualInstructionBanner * _Nullable)visualInstruction;
@end


/// :nodoc:
SWIFT_CLASS_NAMED("NextInstructionLabel")
@interface MBNextInstructionLabel : MBInstructionLabel
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
@end


/// <code>NightStyle</code> is the default night style for Mapbox Navigation SDK. Only will be applied when necessary and if <code>automaticallyAdjustStyleForSunPosition</code>.
SWIFT_CLASS_NAMED("NightStyle")
@interface MBNightStyle : MBDayStyle
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
- (void)apply;
@end



SWIFT_CLASS("_TtC19OlaMapNavigationSDK11OlaGeofence")
@interface OlaGeofence : NSObject
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

@class CLRegion;

@interface OlaGeofence (SWIFT_EXTENSION(OlaMapNavigationSDK)) <CLLocationManagerDelegate>
- (void)locationManager:(CLLocationManager * _Nonnull)manager didExitRegion:(CLRegion * _Nonnull)region;
- (void)locationManager:(CLLocationManager * _Nonnull)manager didEnterRegion:(CLRegion * _Nonnull)region;
@end


SWIFT_CLASS("_TtC19OlaMapNavigationSDK13OlaMapService")
@interface OlaMapService : NSObject
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

















@protocol MGLLocationManager;
@class MGLPolyline;
@class MGLPolygon;

@interface OlaMapService (SWIFT_EXTENSION(OlaMapNavigationSDK)) <MGLMapViewDelegate>
- (void)mapView:(MGLMapView * _Nonnull)mapView tapOnCalloutForAnnotation:(id <MGLAnnotation> _Nonnull)annotation;
- (void)mapView:(MGLMapView * _Nonnull)mapView didFailToLocateUserWithError:(NSError * _Nonnull)error;
- (void)mapViewWillStartLoadingMap:(MGLMapView * _Nonnull)mapView;
- (void)mapViewRegionIsChanging:(MGLMapView * _Nonnull)mapView;
- (void)mapViewDidFailLoadingMap:(MGLMapView * _Nonnull)mapView withError:(NSError * _Nonnull)error;
- (void)mapView:(MGLMapView * _Nonnull)mapView didAddAnnotationViews:(NSArray<MGLAnnotationView *> * _Nonnull)annotationViews;
- (void)mapViewDidBecomeIdle:(MGLMapView * _Nonnull)mapView;
- (void)mapView:(MGLMapView * _Nonnull)mapView regionDidChangeWithReason:(MGLCameraChangeReason)reason animated:(BOOL)animated;
- (void)mapView:(MGLMapView * _Nonnull)mapView didChangeLocationManagerAuthorization:(id <MGLLocationManager> _Nonnull)manager;
- (void)mapView:(MGLMapView * _Nonnull)mapView regionDidChangeAnimated:(BOOL)animated;
- (void)mapView:(MGLMapView * _Nonnull)mapView didChangeUserTrackingMode:(MGLUserTrackingMode)mode animated:(BOOL)animated;
- (UIImage * _Nullable)mapView:(MGLMapView * _Nonnull)mapView didFailToLoadImage:(NSString * _Nonnull)imageName SWIFT_WARN_UNUSED_RESULT;
- (void)mapView:(MGLMapView * _Nonnull)mapView didFinishLoadingStyle:(MGLStyle * _Nonnull)style;
- (void)mapViewDidFinishLoadingMap:(MGLMapView * _Nonnull)mapView;
- (void)mapViewDidFinishRenderingMap:(MGLMapView * _Nonnull)mapView fullyRendered:(BOOL)fullyRendered;
- (void)mapViewDidFinishRenderingFrame:(MGLMapView * _Nonnull)mapView fullyRendered:(BOOL)fullyRendered;
- (MGLAnnotationView * _Nullable)mapView:(MGLMapView * _Nonnull)mapView viewForAnnotation:(id <MGLAnnotation> _Nonnull)annotation SWIFT_WARN_UNUSED_RESULT;
- (BOOL)mapView:(MGLMapView * _Nonnull)mapView annotationCanShowCallout:(id <MGLAnnotation> _Nonnull)annotation SWIFT_WARN_UNUSED_RESULT;
- (UIColor * _Nonnull)mapView:(MGLMapView * _Nonnull)mapView strokeColorForShapeAnnotation:(MGLShape * _Nonnull)annotation SWIFT_WARN_UNUSED_RESULT;
- (CGFloat)mapView:(MGLMapView * _Nonnull)mapView lineWidthForPolylineAnnotation:(MGLPolyline * _Nonnull)annotation SWIFT_WARN_UNUSED_RESULT;
- (CGFloat)mapView:(MGLMapView * _Nonnull)mapView alphaForShapeAnnotation:(MGLShape * _Nonnull)annotation SWIFT_WARN_UNUSED_RESULT;
- (UIColor * _Nonnull)mapView:(MGLMapView * _Nonnull)mapView fillColorForPolygonAnnotation:(MGLPolygon * _Nonnull)annotation SWIFT_WARN_UNUSED_RESULT;
- (void)mapView:(MGLMapView * _Nonnull)mapView didSelectAnnotation:(id <MGLAnnotation> _Nonnull)annotation;
- (void)mapView:(MGLMapView * _Nonnull)mapView didSelectAnnotationView:(MGLAnnotationView * _Nonnull)annotationView;
- (BOOL)mapView:(MGLMapView * _Nonnull)mapView shouldChangeFromCamera:(MGLMapCamera * _Nonnull)oldCamera toCamera:(MGLMapCamera * _Nonnull)newCamera SWIFT_WARN_UNUSED_RESULT;
- (void)mapView:(MGLMapView * _Nonnull)mapView regionIsChangingWithReason:(MGLCameraChangeReason)reason;
@end


SWIFT_CLASS("_TtC19OlaMapNavigationSDK9PopupView")
@interface PopupView : OlaAnnotationView
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder SWIFT_UNAVAILABLE;
@end


/// :nodoc:
SWIFT_CLASS_NAMED("PrimaryLabel")
@interface MBPrimaryLabel : MBInstructionLabel
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
@end



/// :nodoc:
SWIFT_CLASS_NAMED("ProgressBar")
@interface MBProgressBar : UIView
@property (nonatomic, strong) UIColor * _Nonnull barColor;
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
- (void)layoutSubviews;
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
@end


/// <code>ReplayLocationManager</code> replays an array of locations exactly as they were
/// recorded with the single exception of the location’s timestamp which will be
/// adjusted by interval between locations.
SWIFT_CLASS_NAMED("ReplayLocationManager")
@interface MBReplayLocationManager : MBNavigationLocationManager
/// <code>speedMultiplier</code> adjusts the speed of the replay.
@property (nonatomic) NSTimeInterval speedMultiplier;
/// <code>locations</code> to be replayed.
@property (nonatomic, copy) NSArray<CLLocation *> * _Null_unspecified locations;
@property (nonatomic, readonly, strong) CLLocation * _Nullable location;
- (void)startUpdatingLocation;
- (void)stopUpdatingLocation;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// :nodoc:
SWIFT_CLASS_NAMED("ReportButton")
@interface MBReportButton : MBButton
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
@end


/// :nodoc:
IB_DESIGNABLE
SWIFT_CLASS_NAMED("ResumeButton")
@interface MBResumeButton : UIControl
@property (nonatomic, strong) UIColor * _Null_unspecified tintColor;
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
- (void)prepareForInterfaceBuilder;
@end


@class MBRouteProgress;

SWIFT_PROTOCOL("_TtP19OlaMapNavigationSDK6Router_")
@protocol Router <CLLocationManagerDelegate>
@property (nonatomic, readonly, strong) MBNavigationLocationManager * _Null_unspecified locationManager;
@property (nonatomic, readonly) BOOL usesDefaultUserInterface;
@property (nonatomic, readonly, strong) MBRouteProgress * _Nonnull routeProgress;
- (void)endNavigation;
@property (nonatomic, readonly, strong) CLLocation * _Nullable location;
@end


/// A <code>RouteController</code> tracks the user’s progress along a route, posting notifications as the user reaches significant points along the route. On every location update, the route controller evaluates the user’s location, determining whether the user remains on the route. If not, the route controller calculates a new route.
/// <code>RouteController</code> is responsible for the core navigation logic whereas
/// <code>NavigationViewController</code> is responsible for displaying a default drop-in navigation UI.
SWIFT_CLASS_NAMED("RouteController")
@interface MBRouteController : NSObject <Router>
/// The route controller’s delegate.
@property (nonatomic, weak) id <MBRouteControllerDelegate> _Nullable delegate;
/// The route controller’s associated location manager.
@property (nonatomic, strong) MBNavigationLocationManager * _Null_unspecified locationManager;
/// The Directions object used to create the route.
@property (nonatomic, strong) MBDirections * _Nonnull directions;
/// If true, location updates will be simulated when driving through tunnels or other areas where there is none or bad GPS reception.
@property (nonatomic) BOOL isDeadReckoningEnabled;
/// If true, the <code>RouteController</code> attempts to calculate a more optimal route for the user on an interval defined by <code>routeControllerProactiveReroutingInterval</code>.
@property (nonatomic) BOOL reroutesProactively;
/// Details about the user’s progress along the current route, leg, and step.
@property (nonatomic, strong) MBRouteProgress * _Nonnull routeProgress;
/// :nodoc: This is used internally when the navigation UI is being used
@property (nonatomic) BOOL usesDefaultUserInterface;
@property (nonatomic) BOOL userHasArrivedAtDestinationRegion;
- (nonnull instancetype)initWithRoute:(MBRoute * _Nonnull)route directions:(MBDirections * _Nonnull)directions locationManager:(MBNavigationLocationManager * _Nonnull)locationManager OBJC_DESIGNATED_INITIALIZER;
/// Starts monitoring the user’s location along the route.
/// Will continue monitoring until <code>suspendLocationUpdates()</code> is called.
- (void)resume;
/// Stops monitoring the user’s location along the route.
- (void)suspendLocationUpdates;
/// Ends the current navigation session.
- (void)endNavigation;
/// The idealized user location. Snapped to the route line, if applicable, otherwise raw.
/// seealso:
/// snappedLocation, rawLocation
@property (nonatomic, readonly, strong) CLLocation * _Nullable location;
@property (nonatomic, readonly) CLLocationDistance reroutingTolerance;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

/// Describes a reason for rerouting and applying a new route
typedef SWIFT_ENUM(NSInteger, RerouteReason, open) {
/// When we check for a faster route we can also reroute the user when we just want to update the ETA. For example when the user is driving on a route where a Trafficjam appears, it should update the ETA
  RerouteReasonETAUpdate = 0,
/// When the user diverts from the route, we reroute to take the new diversion into account
  RerouteReasonDivertedFromRoute = 1,
/// When the route is faster than the current route, we can also reroute the user
  RerouteReasonFasterRoute = 2,
};


@interface MBRouteController (SWIFT_EXTENSION(OlaMapNavigationSDK)) <MBTunnelIntersectionManagerDelegate>
- (void)tunnelIntersectionManager:(MBTunnelIntersectionManager * _Nonnull)manager willEnableAnimationAtLocation:(CLLocation * _Nonnull)location;
- (void)tunnelIntersectionManager:(MBTunnelIntersectionManager * _Nonnull)manager willDisableAnimationAtLocation:(CLLocation * _Nonnull)location;
@end

@class CLHeading;

@interface MBRouteController (SWIFT_EXTENSION(OlaMapNavigationSDK)) <CLLocationManagerDelegate>
- (void)locationManager:(CLLocationManager * _Nonnull)manager didUpdateHeading:(CLHeading * _Nonnull)newHeading;
- (void)locationManager:(CLLocationManager * _Nonnull)manager didUpdateLocations:(NSArray<CLLocation *> * _Nonnull)locations;
/// Given a users current location, returns a Boolean whether they are currently on the route.
/// If the user is not on the route, they should be rerouted.
- (BOOL)userIsOnRoute:(CLLocation * _Nonnull)location SWIFT_WARN_UNUSED_RESULT;
@end


@class MBRouteLeg;
@class MBRouteStep;
@class MBRouteStepProgress;

/// <code>RouteLegProgress</code> stores the user’s progress along a route leg.
SWIFT_CLASS_NAMED("RouteLegProgress")
@interface MBRouteLegProgress : NSObject
/// Returns the current <code>RouteLeg</code>.
@property (nonatomic, readonly, strong) MBRouteLeg * _Nonnull leg;
/// Index representing the current step.
@property (nonatomic) NSInteger stepIndex;
/// The remaining steps for user to complete.
@property (nonatomic, readonly, copy) NSArray<MBRouteStep *> * _Nonnull remainingSteps;
/// Total distance traveled in meters along current leg.
@property (nonatomic, readonly) CLLocationDistance distanceTraveled;
/// Duration remaining in seconds on current leg.
@property (nonatomic, readonly) NSTimeInterval durationRemaining;
/// Distance remaining on the current leg.
@property (nonatomic, readonly) CLLocationDistance distanceRemaining;
/// Number between 0 and 1 representing how far along the current leg the user has traveled.
@property (nonatomic, readonly) double fractionTraveled;
@property (nonatomic) BOOL userHasArrivedAtWaypoint;
/// Returns the <code>RouteStep</code> before a given step. Returns <code>nil</code> if there is no step prior.
- (MBRouteStep * _Nullable)stepBefore:(MBRouteStep * _Nonnull)step SWIFT_WARN_UNUSED_RESULT;
/// Returns the <code>RouteStep</code> after a given step. Returns <code>nil</code> if there is not a step after.
- (MBRouteStep * _Nullable)stepAfter:(MBRouteStep * _Nonnull)step SWIFT_WARN_UNUSED_RESULT;
/// Returns the <code>RouteStep</code> before the current step.
/// If there is no <code>priorStep</code>, nil is returned.
@property (nonatomic, readonly, strong) MBRouteStep * _Nullable priorStep;
/// Returns the current <code>RouteStep</code> for the leg the user is on.
@property (nonatomic, readonly, strong) MBRouteStep * _Nonnull currentStep;
/// Returns the upcoming <code>RouteStep</code>.
/// If there is no <code>upcomingStep</code>, nil is returned.
@property (nonatomic, readonly, strong) MBRouteStep * _Nullable upComingStep;
/// Returns step 2 steps ahead.
/// If there is no <code>followOnStep</code>, nil is returned.
@property (nonatomic, readonly, strong) MBRouteStep * _Nullable followOnStep;
/// Return bool whether step provided is the current <code>RouteStep</code> the user is on.
- (BOOL)isCurrentStep:(MBRouteStep * _Nonnull)step SWIFT_WARN_UNUSED_RESULT;
/// Returns the progress along the current <code>RouteStep</code>.
@property (nonatomic, strong) MBRouteStepProgress * _Nonnull currentStepProgress;
/// Intializes a new <code>RouteLegProgress</code>.
/// \param leg Leg on a <code>Route</code>.
///
/// \param stepIndex Current step the user is on.
///
- (nonnull instancetype)initWithLeg:(MBRouteLeg * _Nonnull)leg stepIndex:(NSInteger)stepIndex spokenInstructionIndex:(NSInteger)spokenInstructionIndex OBJC_DESIGNATED_INITIALIZER;
/// Returns an array of <code>CLLocationCoordinate2D</code> of the prior, current and upcoming step geometry.
@property (nonatomic, readonly, copy) NSArray<NSValue *> * _Nonnull nearbyCoordinates;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end



/// <code>RouteProgress</code> stores the user’s progress along a route.
SWIFT_CLASS_NAMED("RouteProgress")
@interface MBRouteProgress : NSObject
/// Returns the current <code>Route</code>.
@property (nonatomic, readonly, strong) MBRoute * _Nonnull route;
/// Index representing current <code>RouteLeg</code>.
@property (nonatomic) NSInteger legIndex;
/// If waypoints are provided in the <code>Route</code>, this will contain which leg the user is on.
@property (nonatomic, readonly, strong) MBRouteLeg * _Nonnull currentLeg;
/// Total distance traveled by user along all legs.
@property (nonatomic, readonly) CLLocationDistance distanceTraveled;
/// Total seconds remaining on all legs.
@property (nonatomic, readonly) NSTimeInterval durationRemaining;
/// Number between 0 and 1 representing how far along the <code>Route</code> the user has traveled.
@property (nonatomic, readonly) double fractionTraveled;
/// Total distance remaining in meters along route.
@property (nonatomic, readonly) CLLocationDistance distanceRemaining;
/// Number of waypoints remaining on the current route.
@property (nonatomic, readonly, copy) NSArray<MBWaypoint *> * _Nonnull remainingWaypoints;
/// Returns the progress along the current <code>RouteLeg</code>.
@property (nonatomic, strong) MBRouteLegProgress * _Nonnull currentLegProgress;
/// Intializes a new <code>RouteProgress</code>.
/// \param route The route to follow.
///
/// \param legIndex Zero-based index indicating the current leg the user is on.
///
- (nonnull instancetype)initWithRoute:(MBRoute * _Nonnull)route legIndex:(NSInteger)legIndex spokenInstructionIndex:(NSInteger)spokenInstructionIndex OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end



@class MBIntersection;

/// <code>RouteStepProgress</code> stores the user’s progress along a route step.
SWIFT_CLASS_NAMED("RouteStepProgress")
@interface MBRouteStepProgress : NSObject
/// Returns the current <code>RouteStep</code>.
@property (nonatomic, readonly, strong) MBRouteStep * _Nonnull step;
/// Returns distance user has traveled along current step.
@property (nonatomic) CLLocationDistance distanceTraveled;
/// Returns distance from user to end of step.
@property (nonatomic) CLLocationDistance userDistanceToManeuverLocation;
/// Total distance in meters remaining on current step.
@property (nonatomic, readonly) CLLocationDistance distanceRemaining;
/// Number between 0 and 1 representing fraction of current step traveled.
@property (nonatomic, readonly) double fractionTraveled;
/// Number of seconds remaining on current step.
@property (nonatomic, readonly) NSTimeInterval durationRemaining;
/// Intializes a new <code>RouteStepProgress</code>.
/// \param step Step on a <code>RouteLeg</code>.
///
- (nonnull instancetype)initWithStep:(MBRouteStep * _Nonnull)step spokenInstructionIndex:(NSInteger)spokenInstructionIndex OBJC_DESIGNATED_INITIALIZER;
/// All intersections on the current <code>RouteStep</code> and also the first intersection on the upcoming <code>RouteStep</code>.
/// The upcoming <code>RouteStep</code> first <code>Intersection</code> is added because it is omitted from the current step.
@property (nonatomic, copy) NSArray<MBIntersection *> * _Nullable intersectionsIncludingUpcomingManeuverIntersection;
/// The next intersection the user will travel through.
/// The step must contain <code>intersectionsIncludingUpcomingManeuverIntersection</code> otherwise this property will be <code>nil</code>.
@property (nonatomic, readonly, strong) MBIntersection * _Nullable upcomingIntersection;
/// Index representing the current intersection.
@property (nonatomic) NSInteger intersectionIndex;
/// The current intersection the user will travel through.
/// The step must contain <code>intersectionsIncludingUpcomingManeuverIntersection</code> otherwise this property will be <code>nil</code>.
@property (nonatomic, readonly, strong) MBIntersection * _Nullable currentIntersection;
/// Returns an array of the calculated distances from the current intersection to the next intersection on the current step.
@property (nonatomic, copy) NSArray<NSNumber *> * _Nullable intersectionDistances;
/// Index into <code>step.instructionsDisplayedAlongStep</code> representing the current visual instruction for the step.
@property (nonatomic) NSInteger visualInstructionIndex;
/// An <code>Array</code> of remaining <code>VisualInstruction</code> for a step.
@property (nonatomic, readonly, copy) NSArray<MBVisualInstructionBanner *> * _Nullable remainingVisualInstructions;
/// Index into <code>step.instructionsSpokenAlongStep</code> representing the current spoken instruction.
@property (nonatomic) NSInteger spokenInstructionIndex;
/// An <code>Array</code> of remaining <code>SpokenInstruction</code> for a step.
@property (nonatomic, readonly, copy) NSArray<MBSpokenInstruction *> * _Nullable remainingSpokenInstructions;
/// Current spoken instruction for the user’s progress along a step.
@property (nonatomic, readonly, strong) MBSpokenInstruction * _Nullable currentSpokenInstruction;
/// Current visual instruction for the user’s progress along a step.
@property (nonatomic, readonly, strong) MBVisualInstructionBanner * _Nullable currentVisualInstruction;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end




/// :nodoc:
SWIFT_CLASS_NAMED("SecondaryLabel")
@interface MBSecondaryLabel : MBInstructionLabel
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
@end


/// :nodoc:
SWIFT_CLASS_NAMED("SeparatorView")
@interface MBSeparatorView : UIView
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
@end


/// The <code>SimulatedLocationManager</code> class simulates location updates along a given route.
/// The route will be replaced upon a <code>RouteControllerDidReroute</code> notification.
SWIFT_CLASS_NAMED("SimulatedLocationManager")
@interface MBSimulatedLocationManager : MBNavigationLocationManager
/// Specify the multiplier to use when calculating speed based on the RouteLeg’s <code>expectedSegmentTravelTimes</code>.
@property (nonatomic) double speedMultiplier;
@property (nonatomic, readonly, strong) CLLocation * _Nullable location;
- (id _Nonnull)copyWithZone:(struct _NSZone * _Nullable)zone SWIFT_WARN_UNUSED_RESULT;
/// Initalizes a new <code>SimulatedLocationManager</code> with the given route.
/// \param route The initial route.
///
///
/// returns:
/// A <code>SimulatedLocationManager</code>
- (nonnull instancetype)initWithRoute:(MBRoute * _Nonnull)route OBJC_DESIGNATED_INITIALIZER;
/// Initalizes a new <code>SimulatedLocationManager</code> with the given routeProgress.
/// \param routeProgress The routeProgress of the current route.
///
///
/// returns:
/// A <code>SimulatedLocationManager</code>
- (nonnull instancetype)initWithRouteProgress:(MBRouteProgress * _Nonnull)routeProgress OBJC_DESIGNATED_INITIALIZER;
- (void)startUpdatingLocation;
- (void)stopUpdatingLocation;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

typedef SWIFT_ENUM_NAMED(NSUInteger, MBSpeechGender, "SpeechGender", open) {
  MBSpeechGenderFemale = 0,
  MBSpeechGenderMale = 1,
  MBSpeechGenderNeuter = 2,
};

@class NSLocale;

SWIFT_CLASS_NAMED("SpeechOptions")
@interface MBSpeechOptions : NSObject
- (nonnull instancetype)initWithText:(NSString * _Nonnull)text OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithSsml:(NSString * _Nonnull)ssml OBJC_DESIGNATED_INITIALIZER;
/// <code>String</code> to create audiofile for. Can either be plain text or <a href="https://en.wikipedia.org/wiki/Speech_Synthesis_Markup_Language"><code>SSML</code></a>.
/// If <code>SSML</code> is provided, <code>TextType</code> must be <code>TextType.ssml</code>.
@property (nonatomic, copy) NSString * _Nonnull text;
/// Audio format for outputted audio file.
@property (nonatomic) enum MBAudioFormat outputFormat;
/// The locale in which the audio is spoken.
/// By default, the user’s system locale will be used to decide upon an appropriate voice.
@property (nonatomic, copy) NSLocale * _Nonnull locale;
/// Gender of voice speeking text.
/// Note: not all languages have both genders.
@property (nonatomic) enum MBSpeechGender speechGender;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

@class NSError;
@class NSURLSessionDataTask;

/// A <code>SpeechSynthesizer</code> object converts text into spoken audio. Unlike <code>AVSpeechSynthesizer</code>, a <code>SpeechSynthesizer</code> object produces audio by sending an HTTP request to the Mapbox Voice API, which produces more natural-sounding audio in various languages. With a speech synthesizer object, you can asynchronously generate audio data based on the <code>SpeechOptions</code> object you provide, or you can get the URL used to make this request.
/// Use <code>AVAudioPlayer</code> to play the audio that a speech synthesizer object produces.
SWIFT_CLASS_NAMED("SpeechSynthesizer")
@interface MBSpeechSynthesizer : NSObject
/// The shared speech synthesizer object.
/// To use this object, specify a Mapbox <a href="https://www.mapbox.com/help/define-access-token/">access token</a> in the <code>MGLMapboxAccessToken</code> key in the main application bundle’s Info.plist.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) MBSpeechSynthesizer * _Nonnull sharedSpeechSynthesizer;)
+ (MBSpeechSynthesizer * _Nonnull)sharedSpeechSynthesizer SWIFT_WARN_UNUSED_RESULT;
/// Initializes a newly created speech synthesizer object with an optional access token and host.
/// \param accessToken A Mapbox <a href="https://www.mapbox.com/help/define-access-token/">access token</a>. If an access token is not specified when initializing the speech synthesizer object, it should be specified in the <code>MGLMapboxAccessToken</code> key in the main application bundle’s Info.plist.
///
/// \param host An optional hostname to the server API. The Mapbox Voice API endpoint is used by default.
///
- (nonnull instancetype)initWithAccessToken:(NSString * _Nullable)accessToken host:(NSString * _Nullable)host OBJC_DESIGNATED_INITIALIZER;
/// Initializes a newly created speech synthesizer object with an optional access token.
/// \param accessToken A Mapbox <a href="https://www.mapbox.com/help/define-access-token/">access token</a>. If an access token is not specified when initializing the speech synthesizer object, it should be specified in the <code>MGLMapboxAccessToken</code> key in the main application bundle’s Info.plist.
///
- (nonnull instancetype)initWithAccessToken:(NSString * _Nullable)accessToken;
/// Begins asynchronously fetching the audio file.
/// This method retrieves the audio asynchronously over a network connection. If a connection error or server error occurs, details about the error are passed into the given completion handler in lieu of the audio file.
/// \param options A <code>SpeechOptions</code> object specifying the requirements for the resulting audio file.
///
/// \param completionHandler The closure (block) to call with the resulting audio. This closure is executed on the application’s main thread.
///
///
/// returns:
/// The data task used to perform the HTTP request. If, while waiting for the completion handler to execute, you no longer want the resulting audio, cancel this task.
- (NSURLSessionDataTask * _Nonnull)audioDataWithOptions:(MBSpeechOptions * _Nonnull)options completionHandler:(void (^ _Nonnull)(NSData * _Nullable, NSError * _Nullable))completionHandler;
/// The HTTP URL used to fetch audio from the API.
- (NSURL * _Nonnull)URLForSynthesizingSpeechWithOptions:(MBSpeechOptions * _Nonnull)options SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


@protocol StatusViewDelegate;

/// :nodoc:
IB_DESIGNABLE
SWIFT_CLASS_NAMED("StatusView")
@interface MBStatusView : UIView
@property (nonatomic, weak) id <StatusViewDelegate> _Nullable delegate;
@property (nonatomic) BOOL canChangeValue;
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
@end


/// A protocol for listening in on changed mades made to a <code>StatusView</code>.
SWIFT_PROTOCOL("_TtP19OlaMapNavigationSDK18StatusViewDelegate_")
@protocol StatusViewDelegate
@optional
/// Indicates a value in the status view has changed by the user interacting with it.
- (void)statusView:(MBStatusView * _Nonnull)statusView valueChangedTo:(double)value;
@end


/// :nodoc:
SWIFT_CLASS_NAMED("StepInstructionsView")
@interface MBStepInstructionsView : BaseInstructionsBannerView
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
@end


/// :nodoc:
SWIFT_CLASS_NAMED("StepListIndicatorView")
@interface MBDraggableView : UIView
@property (nonatomic, copy) NSArray<UIColor *> * _Nonnull gradientColors;
- (void)layoutSubviews;
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
@end


/// :nodoc:
SWIFT_CLASS_NAMED("StepTableViewCell")
@interface MBStepTableViewCell : UITableViewCell
- (nonnull instancetype)initWithStyle:(UITableViewCellStyle)style reuseIdentifier:(NSString * _Nullable)reuseIdentifier SWIFT_UNAVAILABLE;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
- (void)prepareForReuse;
@end


/// :nodoc:
SWIFT_CLASS_NAMED("StepsBackgroundView")
@interface MBStepsBackgroundView : UIView
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
@end


/// :nodoc:
SWIFT_CLASS_NAMED("StepsViewController")
@interface MBStepsViewController : UIViewController
- (void)viewDidLoad;
- (nonnull instancetype)initWithNibName:(NSString * _Nullable)nibNameOrNil bundle:(NSBundle * _Nullable)nibBundleOrNil OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
@end

@class UITableView;

@interface MBStepsViewController (SWIFT_EXTENSION(OlaMapNavigationSDK)) <UITableViewDelegate>
- (void)tableView:(UITableView * _Nonnull)tableView didSelectRowAtIndexPath:(NSIndexPath * _Nonnull)indexPath;
@end


@interface MBStepsViewController (SWIFT_EXTENSION(OlaMapNavigationSDK)) <UITableViewDataSource>
- (NSInteger)numberOfSectionsInTableView:(UITableView * _Nonnull)tableView SWIFT_WARN_UNUSED_RESULT;
- (NSInteger)tableView:(UITableView * _Nonnull)tableView numberOfRowsInSection:(NSInteger)section SWIFT_WARN_UNUSED_RESULT;
- (CGFloat)tableView:(UITableView * _Nonnull)tableView heightForRowAtIndexPath:(NSIndexPath * _Nonnull)indexPath SWIFT_WARN_UNUSED_RESULT;
- (UITableViewCell * _Nonnull)tableView:(UITableView * _Nonnull)tableView cellForRowAtIndexPath:(NSIndexPath * _Nonnull)indexPath SWIFT_WARN_UNUSED_RESULT;
- (void)tableView:(UITableView * _Nonnull)tableView willDisplayCell:(UITableViewCell * _Nonnull)cell forRowAtIndexPath:(NSIndexPath * _Nonnull)indexPath;
- (NSString * _Nullable)tableView:(UITableView * _Nonnull)tableView titleForHeaderInSection:(NSInteger)section SWIFT_WARN_UNUSED_RESULT;
@end


/// <code>StepsViewControllerDelegate</code> provides methods for user interactions in a <code>StepsViewController</code>.
SWIFT_PROTOCOL("_TtP19OlaMapNavigationSDK27StepsViewControllerDelegate_")
@protocol StepsViewControllerDelegate
@optional
/// Called when the user selects a step in a <code>StepsViewController</code>.
- (void)stepsViewController:(MBStepsViewController * _Nonnull)viewController didSelect:(NSInteger)legIndex stepIndex:(NSInteger)stepIndex cell:(MBStepTableViewCell * _Nonnull)cell;
@required
/// Called when the user dismisses the <code>StepsViewController</code>.
- (void)didDismissStepsViewController:(MBStepsViewController * _Nonnull)viewController;
@end







SWIFT_CLASS_NAMED("StyleKitMarker")
@interface MBStyleKitMarker : NSObject
/// / Drawing Methods
+ (void)drawMarkerWithFrame:(CGRect)frame innerColor:(UIColor * _Nonnull)innerColor shadowColor:(UIColor * _Nonnull)shadowColor pinColor:(UIColor * _Nonnull)pinColor strokeColor:(UIColor * _Nonnull)strokeColor;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/// A manager that handles <code>Style</code> objects. The manager listens for significant time changes
/// and changes to the content size to apply an approriate style for the given condition.
SWIFT_CLASS_NAMED("StyleManager")
@interface MBStyleManager : NSObject
/// The receiver of the delegate. See <code>StyleManagerDelegate</code> for more information.
@property (nonatomic, weak) id <MBStyleManagerDelegate> _Nullable delegate;
/// Determines whether the style manager should apply a new style given the time of day.
/// precondition:
/// Two styles must be provided for this property to have any effect.
@property (nonatomic) BOOL automaticallyAdjustsStyleForTimeOfDay;
/// The styles that are in circulation. Active style is set based on
/// the sunrise and sunset at your current location. A change of
/// preferred content size by the user will also trigger an update.
/// precondition:
/// Two styles must be provided for
/// <code>StyleManager.automaticallyAdjustsStyleForTimeOfDay</code> to have any effect.
@property (nonatomic, copy) NSArray<MBStyle *> * _Nonnull styles;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


typedef SWIFT_ENUM_NAMED(NSInteger, MBStyleType, "StyleType", open) {
  MBStyleTypeDay = 0,
  MBStyleTypeNight = 1,
};


/// :nodoc:
SWIFT_CLASS_NAMED("SubtitleLabel")
@interface MBSubtitleLabel : MBStylableLabel
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
@end

typedef SWIFT_ENUM_NAMED(NSUInteger, MBTextType, "TextType", open) {
  MBTextTypeText = 0,
  MBTextTypeSsml = 1,
};


/// :nodoc:
SWIFT_CLASS_NAMED("TimeRemainingLabel")
@interface MBTimeRemainingLabel : MBStylableLabel
@property (nonatomic, strong) UIColor * _Nonnull trafficUnknownColor;
@property (nonatomic, strong) UIColor * _Nonnull trafficLowColor;
@property (nonatomic, strong) UIColor * _Nonnull trafficModerateColor;
@property (nonatomic, strong) UIColor * _Nonnull trafficHeavyColor;
@property (nonatomic, strong) UIColor * _Nonnull trafficSevereColor;
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
@end


/// :nodoc:
SWIFT_CLASS_NAMED("TitleLabel")
@interface MBTitleLabel : MBStylableLabel
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS_NAMED("TunnelIntersectionManager")
@interface MBTunnelIntersectionManager : NSObject
/// The associated delegate for tunnel intersection manager.
@property (nonatomic, weak) id <MBTunnelIntersectionManagerDelegate> _Nullable delegate;
/// The simulated location manager dedicated to tunnel simulated navigation.
@property (nonatomic, strong) MBSimulatedLocationManager * _Nullable animatedLocationManager;
/// An array of bad location updates recorded upon exit of a tunnel.
@property (nonatomic, copy) NSArray<CLLocation *> * _Nonnull tunnelExitLocations;
/// Flag indicating whether the user is animated through tunnels.
@property (nonatomic) BOOL tunnelSimulationEnabled;
/// Given a user’s current location and the route progress,
/// detects whether the upcoming intersection contains a tunnel road class, and
/// returns a Boolean whether they are within the minimum radius of a tunnel entrance.
- (BOOL)userWithinTunnelEntranceRadiusAt:(CLLocation * _Nonnull)location routeProgress:(MBRouteProgress * _Nonnull)routeProgress SWIFT_WARN_UNUSED_RESULT;
- (void)enableTunnelAnimationWithRouteController:(MBRouteController * _Nonnull)routeController routeProgress:(MBRouteProgress * _Nonnull)routeProgress;
- (void)suspendTunnelAnimationAt:(CLLocation * _Nonnull)location routeController:(MBRouteController * _Nonnull)routeController;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end













@interface UIDevice (SWIFT_EXTENSION(OlaMapNavigationSDK))
/// Returns a <code>Bool</code> whether the device is plugged in. Returns false if not an iOS device.
@property (nonatomic, readonly) BOOL isPluggedIn;
@end




@interface UIFont (SWIFT_EXTENSION(OlaMapNavigationSDK))
/// Returns an adjusted font for the <code>preferredContentSizeCategory</code>.
@property (nonatomic, readonly, strong) UIFont * _Nonnull adjustedFont;
@end






















/// A view representing the user’s location on screen.
SWIFT_CLASS_NAMED("UserPuckCourseView")
@interface MBUserPuckCourseView : UIView
@property (nonatomic, strong) UIColor * _Nonnull puckColor;
@property (nonatomic, strong) UIColor * _Nonnull fillColor;
@property (nonatomic, strong) UIColor * _Nonnull shadowColor;
- (nonnull instancetype)initWithFrame:(CGRect)frame SWIFT_UNAVAILABLE;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
@end





/// The <code>VoiceControllerDelegate</code> protocol defines methods that allow an object to respond to significant events related to spoken instructions.
SWIFT_PROTOCOL_NAMED("VoiceControllerDelegate")
@protocol MBVoiceControllerDelegate
@optional
/// Called when the voice controller failed to speak an instruction.
/// \param voiceController The voice controller that experienced the failure.
///
/// \param error An error explaining the failure and its cause. The <code>MBSpokenInstructionErrorCodeKey</code> key of the error’s user info dictionary is a <code>SpokenInstructionErrorCode</code> indicating the cause of the failure.
///
- (void)voiceController:(MBRouteVoiceController * _Nonnull)voiceController spokenInstrucionsDidFailWithError:(NSError * _Nonnull)error;
/// Called when one spoken instruction interrupts another instruction currently being spoken.
/// \param voiceController The voice controller that experienced the interruption.
///
/// \param interruptedInstruction The spoken instruction currently in progress that has been interrupted.
///
/// \param interruptingInstruction The spoken instruction that is interrupting the current instruction.
///
- (void)voiceController:(MBRouteVoiceController * _Nonnull)voiceController didInterruptSpokenInstruction:(MBSpokenInstruction * _Nonnull)interruptedInstruction withInstruction:(MBSpokenInstruction * _Nonnull)interruptingInstruction;
/// Called when a spoken is about to speak. Useful if it is necessary to give a custom instruction instead. Noting, changing the <code>distanceAlongStep</code> property on <code>SpokenInstruction</code> will have no impact on when the instruction will be said.
/// \code
/// - parameter voiceController: The voice controller that will speak an instruction.
/// - parameter instruction: The spoken instruction that will be said.
/// - parameter routeProgress: The `RouteProgress` just before when the instruction is scheduled to be spoken.
/// *
///
/// \endcode
- (MBSpokenInstruction * _Nullable)voiceController:(MBRouteVoiceController * _Nonnull)voiceController willSpeakSpokenInstruction:(MBSpokenInstruction * _Nonnull)instruction routeProgress:(MBRouteProgress * _Nonnull)routeProgress SWIFT_WARN_UNUSED_RESULT;
@end


/// :nodoc:
SWIFT_CLASS_NAMED("WayNameLabel")
@interface MBWayNameLabel : MBStylableLabel
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
@end


/// :nodoc:
SWIFT_CLASS_NAMED("WayNameView")
@interface MBWayNameView : UIView
@property (nonatomic, strong) UIColor * _Nullable borderColor;
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
- (void)layoutSubviews;
@end


#endif
#if __has_attribute(external_source_symbol)
# pragma clang attribute pop
#endif
#if defined(__cplusplus)
#endif
#pragma clang diagnostic pop
#endif

#else
#error unsupported Swift architecture
#endif
