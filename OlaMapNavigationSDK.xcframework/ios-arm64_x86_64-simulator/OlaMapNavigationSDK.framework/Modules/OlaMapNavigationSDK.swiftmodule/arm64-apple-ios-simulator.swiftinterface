// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.9 (swiftlang-5.9.0.128.108 clang-1500.0.40.1)
// swift-module-flags: -target arm64-apple-ios13.0-simulator -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -module-name OlaMapNavigationSDK
// swift-module-flags-ignorable: -enable-bare-slash-regex
import AVFoundation
import CarPlay
import Combine
import CoreGraphics
import CoreLocation
import DeveloperToolsSupport
import Foundation
import Mapbox
import MoEngageSDK
import ObjectiveC
import OlaMapDirectionFramework
@_exported import OlaMapNavigationSDK
import OlaTurf
import Swift
import SwiftUI
import UIKit.UIDevice
import UIKit
import _Concurrency
import _StringProcessing
import _SwiftConcurrencyShims
public enum CommuteMode {
  case walking
  case driving
  case solid
  public static func == (a: OlaMapNavigationSDK.CommuteMode, b: OlaMapNavigationSDK.CommuteMode) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public protocol OlaNavigationProtocol : AnyObject {
  func didUpdateVisualInstruction(_ instruction: OlaMapNavigationSDK.OlaVisualInstruction)
  func didUpdateSpokenInstruction(_ instruction: OlaMapNavigationSDK.OlaInstruction)
  func didNavigationCompleted()
  func didArrivedInDestinationRegion()
  func didUpdateBottomInstruction(_ instruction: OlaMapNavigationSDK.OlaInstruction)
  func availableSteps(_ steps: [OlaMapNavigationSDK.InstructionList])
  func didUpdateVisualDistance(_ distance: CoreLocation.CLLocationDistance, _ formattedString: Swift.String?)
  func regionIsChanging(_ gesture: OlaMapNavigationSDK.OlaMapGesture)
  func willReroute(_ lastLocation: CoreLocation.CLLocation, _ tailCoordinate: CoreLocation.CLLocationCoordinate2D?)
  func didReroute(_ lastLocation: CoreLocation.CLLocation, _ tailCoordinate: CoreLocation.CLLocationCoordinate2D?)
  func didFailToRerouteWith(_ error: any Swift.Error)
  func navigationDidDismiss()
  func didReceiveInvalidRoute(type: OlaMapNavigationSDK.RouteInValidType)
  func didRequestETARefresh(_ location: CoreLocation.CLLocation, completion: @escaping (Swift.Result<OlaMapNavigationSDK.EtaRefreshResponseModel, any Swift.Error>) -> Swift.Void)
}
extension OlaMapNavigationSDK.OlaNavigationProtocol {
  public func didUpdateSpokenInstruction(_ instruction: OlaMapNavigationSDK.OlaInstruction)
  public func regionIsChanging(_ gesture: OlaMapNavigationSDK.OlaMapGesture)
  public func didUpdateVisualInstruction(_ instruction: OlaMapNavigationSDK.OlaVisualInstruction)
  public func didNavigationCompleted()
  public func didUpdateBottomInstruction(_ instruction: OlaMapNavigationSDK.OlaInstruction)
  public func availableSteps(_ steps: [OlaMapNavigationSDK.InstructionList])
  public func didUpdateVisualDistance(_ distance: CoreLocation.CLLocationDistance, _ formattedString: Swift.String?)
  public func willReroute(_ lastLocation: CoreLocation.CLLocation, _ tailCoordinate: CoreLocation.CLLocationCoordinate2D?)
  public func didReroute(_ lastLocation: CoreLocation.CLLocation, _ tailCoordinate: CoreLocation.CLLocationCoordinate2D?)
  public func didFailToRerouteWith(_ error: any Swift.Error)
  public func navigationDidDismiss()
  public func didReceiveInvalidRoute(type: OlaMapNavigationSDK.RouteInValidType)
  public func didArrivedInDestinationRegion()
  public func didRequestETARefresh(_ location: CoreLocation.CLLocation, completion: @escaping (Swift.Result<OlaMapNavigationSDK.EtaRefreshResponseModel, any Swift.Error>) -> Swift.Void)
}
public enum NavigationResult {
  case success(_: UIKit.UIViewController)
  case failed(OlaMapNavigationSDK.OlaMapError)
}
public class OlaMapNavigationService {
  public var subviewsManager: any OlaMapNavigationSDK.OLAMapSubviewsProtocol
  weak public var delegate: (any OlaMapNavigationSDK.OlaNavigationProtocol)?
  public var etaRefreshTimeInterval: Swift.Double {
    get
    set
  }
  public var isCompassViewHidden: Swift.Bool {
    get
    set
  }
  public var compassViewMargins: CoreFoundation.CGPoint {
    get
    set
  }
  public var compassViewPosition: Mapbox.MGLOrnamentPosition {
    get
    set
  }
  public func setDebugLogs(_ isEnabled: Swift.Bool)
  public func setRegionRadius(_ value: Swift.Double)
  public func setTrackUser(_ userId: Swift.String, fullName: Swift.String?, email: Swift.String?, mobile: Swift.String?)
  public init(token: Swift.String, tileURL: Foundation.URL, env: OlaMapNavigationSDK.ConfigEnvironment = .production)
  public init(token: Swift.String, tileURL: Foundation.URL, env: OlaMapNavigationSDK.ConfigEnvironment = .production, clientId: Swift.String = "NA", userId: Swift.String? = "NA")
  public func setSimulation(_ state: Swift.Bool, _ simulationWithCSVFile: Swift.String? = nil)
  public func setMaxZoom(_ value: Swift.Double)
  public func setMinZoom(_ value: Swift.Double)
  public var compassView: UIKit.UIView? {
    get
  }
  @objc deinit
  public func convertToMapboxCompatible(_ jsonData: Foundation.Data) -> [[Swift.String : Any]]?
  public func setStyle(_ tileURL: Foundation.URL)
  public func routePreview(directionJSON: [[Swift.String : Any]], origin: CoreLocation.CLLocation, destination: CoreLocation.CLLocation, onCompletion: @escaping (_ vc: UIKit.UIViewController?) -> Swift.Void)
  public func onUpdateNavigation(_ directionJSON: [Swift.String : Any])
  public func navigate(jsonData: Foundation.Data, origin: CoreLocation.CLLocation, destination: CoreLocation.CLLocation, mode: OlaMapNavigationSDK.CommuteMode = .driving, mapDecorator: OlaMapNavigationSDK.MapDecorator = MapDecorator(), onCompletion: @escaping (_ state: OlaMapNavigationSDK.NavigationResult) -> Swift.Void)
}
extension OlaMapNavigationSDK.OlaMapNavigationService {
  public func recenterMap()
  public func toggleOverview()
  public func endNavigation()
  public func stopSimulation()
  public func getIncidentReportVC() -> UIKit.UIViewController
}
extension Swift.String {
  public var nonEmptyString: Swift.String? {
    get
  }
}
public class LocationPersmission {
  public init()
  public func request()
  public func userLocationAvailable() -> Swift.Bool
  @objc deinit
}
extension OlaMapNavigationSDK.OlaMapService {
  public func setTileURL(_ url: Foundation.URL)
  public func reloadStyle()
}
extension Foundation.NSNotification.Name {
  public static let navigationSettingsDidChange: Foundation.NSNotification.Name
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @objc(MBNavigationSettings) public class NavigationSettings : ObjectiveC.NSObject {
  @objc dynamic public var voiceVolume: Swift.Float
  @objc dynamic public var voiceMuted: Swift.Bool
  @objc dynamic public var distanceUnit: Foundation.LengthFormatter.Unit
  public static let shared: OlaMapNavigationSDK.NavigationSettings
  @objc deinit
  @objc override dynamic public func observeValue(forKeyPath keyPath: Swift.String?, of object: Any?, change: [Foundation.NSKeyValueChangeKey : Any]?, context: Swift.UnsafeMutableRawPointer?)
}
@_inheritsConvenienceInitializers @objc(MBDataCache) public class DataCache : ObjectiveC.NSObject, OlaMapNavigationSDK.BimodalDataCache {
  @objc override dynamic public init()
  @objc public func store(_ data: Foundation.Data, forKey key: Swift.String, toDisk: Swift.Bool, completion: OlaMapNavigationSDK.CompletionHandler?)
  @objc public func data(forKey key: Swift.String?) -> Foundation.Data?
  @objc public func clearMemory()
  @objc public func clearDisk(completion: OlaMapNavigationSDK.CompletionHandler?)
  @objc deinit
}
@_inheritsConvenienceInitializers @objc(MBInstructionLabel) @_Concurrency.MainActor(unsafe) open class InstructionLabel : OlaMapNavigationSDK.StylableLabel {
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
@objc(MBVisualInstructionDelegate) public protocol VisualInstructionDelegate {
  @objc(label:willPresentVisualInstruction:asAttributedString:) optional func label(_ label: OlaMapNavigationSDK.InstructionLabel, willPresent instruction: OlaMapDirectionFramework.VisualInstruction, as presented: Foundation.NSAttributedString) -> Foundation.NSAttributedString?
}
@_inheritsConvenienceInitializers @objc(MBManeuversStyleKit) public class ManeuversStyleKit : ObjectiveC.NSObject {
  @objc dynamic public class func drawArrow180right(frame targetFrame: CoreFoundation.CGRect = CGRect(x: 0, y: 0, width: 32, height: 32), resizing: OlaMapNavigationSDK.ManeuversStyleKit.ResizingBehavior = .aspectFit, primaryColor: UIKit.UIColor = UIColor(red: 0.000, green: 0.000, blue: 0.000, alpha: 1.000), size: CoreFoundation.CGSize = CGSize(width: 32, height: 32))
  @objc dynamic public class func drawArrowright(frame targetFrame: CoreFoundation.CGRect = CGRect(x: 0, y: 0, width: 32, height: 32), resizing: OlaMapNavigationSDK.ManeuversStyleKit.ResizingBehavior = .aspectFit, primaryColor: UIKit.UIColor = UIColor(red: 0.000, green: 0.000, blue: 0.000, alpha: 1.000), size: CoreFoundation.CGSize = CGSize(width: 32, height: 32))
  @objc dynamic public class func drawArrowslightright(frame targetFrame: CoreFoundation.CGRect = CGRect(x: 0, y: 0, width: 32, height: 32), resizing: OlaMapNavigationSDK.ManeuversStyleKit.ResizingBehavior = .aspectFit, primaryColor: UIKit.UIColor = UIColor(red: 0.000, green: 0.000, blue: 0.000, alpha: 1.000), size: CoreFoundation.CGSize = CGSize(width: 32, height: 32))
  @objc dynamic public class func drawArrowstraight(frame targetFrame: CoreFoundation.CGRect = CGRect(x: 0, y: 0, width: 32, height: 32), resizing: OlaMapNavigationSDK.ManeuversStyleKit.ResizingBehavior = .aspectFit, primaryColor: UIKit.UIColor = UIColor(red: 0.000, green: 0.000, blue: 0.000, alpha: 1.000), size: CoreFoundation.CGSize = CGSize(width: 32, height: 32))
  @objc dynamic public class func drawArrowsharpright(frame targetFrame: CoreFoundation.CGRect = CGRect(x: 0, y: 0, width: 32, height: 32), resizing: OlaMapNavigationSDK.ManeuversStyleKit.ResizingBehavior = .aspectFit, primaryColor: UIKit.UIColor = UIColor(red: 0.000, green: 0.000, blue: 0.000, alpha: 1.000), size: CoreFoundation.CGSize = CGSize(width: 32, height: 32))
  @objc dynamic public class func drawArrive(frame targetFrame: CoreFoundation.CGRect = CGRect(x: 0, y: 0, width: 32, height: 32), resizing: OlaMapNavigationSDK.ManeuversStyleKit.ResizingBehavior = .aspectFit, primaryColor: UIKit.UIColor = UIColor(red: 0.000, green: 0.000, blue: 0.000, alpha: 1.000), size: CoreFoundation.CGSize = CGSize(width: 32, height: 32))
  @objc dynamic public class func drawStarting(frame targetFrame: CoreFoundation.CGRect = CGRect(x: 0, y: 0, width: 32, height: 32), resizing: OlaMapNavigationSDK.ManeuversStyleKit.ResizingBehavior = .aspectFit, primaryColor: UIKit.UIColor = UIColor(red: 0.000, green: 0.000, blue: 0.000, alpha: 1.000), size: CoreFoundation.CGSize = CGSize(width: 32, height: 32))
  @objc dynamic public class func drawDestination(frame targetFrame: CoreFoundation.CGRect = CGRect(x: 0, y: 0, width: 32, height: 32), resizing: OlaMapNavigationSDK.ManeuversStyleKit.ResizingBehavior = .aspectFit, primaryColor: UIKit.UIColor = UIColor(red: 0.000, green: 0.000, blue: 0.000, alpha: 1.000), size: CoreFoundation.CGSize = CGSize(width: 32, height: 32))
  @objc dynamic public class func drawMerge(frame targetFrame: CoreFoundation.CGRect = CGRect(x: 0, y: 0, width: 32, height: 32), resizing: OlaMapNavigationSDK.ManeuversStyleKit.ResizingBehavior = .aspectFit, primaryColor: UIKit.UIColor = UIColor(red: 0.000, green: 0.000, blue: 0.000, alpha: 1.000), secondaryColor: UIKit.UIColor = UIColor(red: 0.618, green: 0.618, blue: 0.618, alpha: 1.000), size: CoreFoundation.CGSize = CGSize(width: 32, height: 32))
  @objc dynamic public class func drawFork(frame targetFrame: CoreFoundation.CGRect = CGRect(x: 0, y: 0, width: 32, height: 32), resizing: OlaMapNavigationSDK.ManeuversStyleKit.ResizingBehavior = .aspectFit, primaryColor: UIKit.UIColor = UIColor(red: 0.000, green: 0.000, blue: 0.000, alpha: 1.000), secondaryColor: UIKit.UIColor = UIColor(red: 0.618, green: 0.618, blue: 0.618, alpha: 1.000), size: CoreFoundation.CGSize = CGSize(width: 32, height: 32))
  @objc dynamic public class func drawOfframp(frame targetFrame: CoreFoundation.CGRect = CGRect(x: 0, y: 0, width: 32, height: 32), resizing: OlaMapNavigationSDK.ManeuversStyleKit.ResizingBehavior = .aspectFit, primaryColor: UIKit.UIColor = UIColor(red: 0.000, green: 0.000, blue: 0.000, alpha: 1.000), secondaryColor: UIKit.UIColor = UIColor(red: 0.618, green: 0.618, blue: 0.618, alpha: 1.000), size: CoreFoundation.CGSize = CGSize(width: 32, height: 32))
  @objc dynamic public class func drawArriveright(frame targetFrame: CoreFoundation.CGRect = CGRect(x: 0, y: 0, width: 32, height: 32), resizing: OlaMapNavigationSDK.ManeuversStyleKit.ResizingBehavior = .aspectFit, primaryColor: UIKit.UIColor = UIColor(red: 0.000, green: 0.000, blue: 0.000, alpha: 1.000), size: CoreFoundation.CGSize = CGSize(width: 32, height: 32))
  @objc dynamic public class func drawRoundabout(frame targetFrame: CoreFoundation.CGRect = CGRect(x: 0, y: 0, width: 32, height: 32), resizing: OlaMapNavigationSDK.ManeuversStyleKit.ResizingBehavior = .aspectFit, primaryColor: UIKit.UIColor = UIColor(red: 0.000, green: 0.000, blue: 0.000, alpha: 1.000), secondaryColor: UIKit.UIColor = UIColor(red: 0.618, green: 0.618, blue: 0.618, alpha: 1.000), size: CoreFoundation.CGSize = CGSize(width: 32, height: 32), roundabout_angle: CoreFoundation.CGFloat = 90, roundabout_radius: CoreFoundation.CGFloat = 6.5)
  @objc dynamic public class func drawArriveright2(frame targetFrame: CoreFoundation.CGRect = CGRect(x: 0, y: 0, width: 32, height: 32), resizing: OlaMapNavigationSDK.ManeuversStyleKit.ResizingBehavior = .aspectFit, primaryColor: UIKit.UIColor = UIColor(red: 0.000, green: 0.000, blue: 0.000, alpha: 1.000), size: CoreFoundation.CGSize = CGSize(width: 32, height: 32))
  @objc(ManeuversStyleKitResizingBehavior) public enum ResizingBehavior : Swift.Int {
    case aspectFit
    case aspectFill
    case stretch
    case center
    public func apply(rect: CoreFoundation.CGRect, target: CoreFoundation.CGRect) -> CoreFoundation.CGRect
    public init?(rawValue: Swift.Int)
    public typealias RawValue = Swift.Int
    public var rawValue: Swift.Int {
      get
    }
  }
  @objc override dynamic public init()
  @objc deinit
}
public typealias CompletionHandler = () -> Swift.Void
@objc(MBBimodalCache) public protocol BimodalCache {
  @objc func clearMemory()
  @objc func clearDisk(completion: OlaMapNavigationSDK.CompletionHandler?)
}
@objc(MBBimodalImageCache) public protocol BimodalImageCache : OlaMapNavigationSDK.BimodalCache {
  @objc func store(_ image: UIKit.UIImage, forKey key: Swift.String, toDisk: Swift.Bool, completion completionBlock: OlaMapNavigationSDK.CompletionHandler?)
  @objc func image(forKey: Swift.String?) -> UIKit.UIImage?
}
@objc(MBBimodalDataCache) public protocol BimodalDataCache : OlaMapNavigationSDK.BimodalCache {
  @objc func store(_ data: Foundation.Data, forKey key: Swift.String, toDisk: Swift.Bool, completion completionBlock: OlaMapNavigationSDK.CompletionHandler?)
  @objc func data(forKey: Swift.String?) -> Foundation.Data?
}
@objc public protocol Router : CoreLocation.CLLocationManagerDelegate {
  @objc var locationManager: OlaMapNavigationSDK.NavigationLocationManager! { get }
  @objc var usesDefaultUserInterface: Swift.Bool { get }
  @objc var routeProgress: OlaMapNavigationSDK.RouteProgress { get }
  @objc func endNavigation()
  @objc var location: CoreLocation.CLLocation? { get }
}
public protocol MapServiceProtocol {
  func recenterMap()
  func addWaterMark(_ view: UIKit.UIView)
  func addCurrentLocationButton(_ view: UIKit.UIView)
  func setCamera(at coordinates: OlaMapNavigationSDK.OlaCoordinate, _ zoom: Swift.Double)
  func setMarker(at coordinates: OlaMapNavigationSDK.OlaCoordinate, marker: OlaMapNavigationSDK.OlaMapMarker)
  func setCustomAnnotationMarker(at olaCoordinates: [OlaMapNavigationSDK.OlaCoordinate], annotationView: OlaMapNavigationSDK.OlaAnnotationView)
  func loadMap(onView: UIKit.UIView, coordinate: OlaMapNavigationSDK.OlaCoordinate?, showWaterMark: Swift.Bool, showCurrentLocationIcon: Swift.Bool, loadStyleFromLocale: Swift.Bool)
  func isOlaAnnotation(byId id: Swift.String) -> Swift.Bool
}
@_inheritsConvenienceInitializers @objc(MBLanesStyleKit) public class LanesStyleKit : ObjectiveC.NSObject {
  @objc dynamic public class func drawLane_straight_right(primaryColor: UIKit.UIColor = UIColor(red: 0.000, green: 0.000, blue: 0.000, alpha: 1.000))
  @objc dynamic public class func drawLane_straight_only(primaryColor: UIKit.UIColor = UIColor(red: 0.000, green: 0.000, blue: 0.000, alpha: 1.000), secondaryColor: UIKit.UIColor = UIColor(red: 0.618, green: 0.618, blue: 0.618, alpha: 1.000))
  @objc dynamic public class func drawLane_right_h(primaryColor: UIKit.UIColor = UIColor(red: 0.000, green: 0.000, blue: 0.000, alpha: 1.000))
  @objc dynamic public class func drawLane_right_only(primaryColor: UIKit.UIColor = UIColor(red: 0.000, green: 0.000, blue: 0.000, alpha: 1.000), secondaryColor: UIKit.UIColor = UIColor(red: 0.618, green: 0.618, blue: 0.618, alpha: 1.000))
  @objc dynamic public class func drawLane_straight(primaryColor: UIKit.UIColor = UIColor(red: 0.000, green: 0.000, blue: 0.000, alpha: 1.000))
  @objc dynamic public class func drawLane_uturn(primaryColor: UIKit.UIColor = UIColor(red: 0.000, green: 0.000, blue: 0.000, alpha: 1.000))
  @objc dynamic public class func drawLane_slight_right(primaryColor: UIKit.UIColor = UIColor(red: 0.000, green: 0.000, blue: 0.000, alpha: 1.000), scale: CoreFoundation.CGFloat = 1)
  @objc override dynamic public init()
  @objc deinit
}
extension Swift.Array {
  public static func locations(from filePath: Swift.String) -> [CoreLocation.CLLocation]!
}
extension OlaMapNavigationSDK.OlaMapService {
  public func recenterMap()
  public func setCamera(at coordinates: OlaMapNavigationSDK.OlaCoordinate, _ zoom: Swift.Double = 16.0)
  public func setCamera(_ coordinate: CoreLocation.CLLocationCoordinate2D)
  public func setCamera(at coordinate: OlaMapNavigationSDK.OlaCoordinate, zoomLevel: Swift.Double?)
  public func setMapCamera(_ altitude: Swift.Double, _ pitch: Swift.Double, heading: Swift.Double)
  public func setMapCamera(_ coordinate: OlaMapNavigationSDK.OlaCoordinate, _ zoom: Swift.Double, _ heading: Swift.Double, _ altitude: Swift.Double)
  public func setMapCamera(_ coordinates: [OlaMapNavigationSDK.OlaCoordinate], isAnimated: Swift.Bool?)
  public func setMapCamera(_ coordinates: [OlaMapNavigationSDK.OlaCoordinate], _ edgePadding: UIKit.UIEdgeInsets = UIEdgeInsets(top: 30, left: 30, bottom: 30, right: 30))
  public func setMapCamera(_ coordinate: OlaMapNavigationSDK.OlaCoordinate, _ edgePadding: UIKit.UIEdgeInsets = UIEdgeInsets(top: 0, left: 0, bottom: 0, right: 0))
}
@_inheritsConvenienceInitializers @objc(MBStepsBackgroundView) @_Concurrency.MainActor(unsafe) open class StepsBackgroundView : UIKit.UIView {
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
@objc public protocol StepsViewControllerDelegate {
  @objc optional func stepsViewController(_ viewController: OlaMapNavigationSDK.StepsViewController, didSelect legIndex: Swift.Int, stepIndex: Swift.Int, cell: OlaMapNavigationSDK.StepTableViewCell)
  @objc func didDismissStepsViewController(_ viewController: OlaMapNavigationSDK.StepsViewController)
}
@_inheritsConvenienceInitializers @objc(MBStepsViewController) @_Concurrency.MainActor(unsafe) public class StepsViewController : UIKit.UIViewController {
  @_Concurrency.MainActor(unsafe) weak public var delegate: (any OlaMapNavigationSDK.StepsViewControllerDelegate)?
  @_Concurrency.MainActor(unsafe) convenience public init(routeProgress: OlaMapNavigationSDK.RouteProgress)
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func viewDidLoad()
  @objc deinit
  @_Concurrency.MainActor(unsafe) public func dropDownAnimation()
  @_Concurrency.MainActor(unsafe) public func slideUpAnimation(completion: OlaMapNavigationSDK.CompletionHandler? = nil)
  @_Concurrency.MainActor(unsafe) public func dismiss(completion: OlaMapNavigationSDK.CompletionHandler? = nil)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(nibName nibNameOrNil: Swift.String?, bundle nibBundleOrNil: Foundation.Bundle?)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
}
extension OlaMapNavigationSDK.StepsViewController : UIKit.UITableViewDelegate {
  @_Concurrency.MainActor(unsafe) @objc dynamic public func tableView(_ tableView: UIKit.UITableView, didSelectRowAt indexPath: Foundation.IndexPath)
}
extension OlaMapNavigationSDK.StepsViewController : UIKit.UITableViewDataSource {
  @_Concurrency.MainActor(unsafe) @objc dynamic public func numberOfSections(in tableView: UIKit.UITableView) -> Swift.Int
  @_Concurrency.MainActor(unsafe) @objc dynamic public func tableView(_ tableView: UIKit.UITableView, numberOfRowsInSection section: Swift.Int) -> Swift.Int
  @_Concurrency.MainActor(unsafe) @objc dynamic public func tableView(_ tableView: UIKit.UITableView, heightForRowAt indexPath: Foundation.IndexPath) -> CoreFoundation.CGFloat
  @_Concurrency.MainActor(unsafe) @objc dynamic public func tableView(_ tableView: UIKit.UITableView, cellForRowAt indexPath: Foundation.IndexPath) -> UIKit.UITableViewCell
  @_Concurrency.MainActor(unsafe) @objc dynamic public func tableView(_ tableView: UIKit.UITableView, willDisplay cell: UIKit.UITableViewCell, forRowAt indexPath: Foundation.IndexPath)
  @_Concurrency.MainActor(unsafe) @objc dynamic public func tableView(_ tableView: UIKit.UITableView, titleForHeaderInSection section: Swift.Int) -> Swift.String?
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @objc(MBStepInstructionsView) @_Concurrency.MainActor(unsafe) open class StepInstructionsView : OlaMapNavigationSDK.BaseInstructionsBannerView {
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @objc(MBStepTableViewCell) @_Concurrency.MainActor(unsafe) open class StepTableViewCell : UIKit.UITableViewCell {
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func prepareForReuse()
  @objc deinit
}
public struct EtaRefreshResponseModel : Swift.Codable {
  public let duration: Swift.String?
  public let readableDuration: Swift.String?
  public let travelAdvisory: Swift.String?
  public init(duration: Swift.String? = nil, readableDuration: Swift.String? = nil, travelAdvisory: Swift.String? = nil)
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) final public class IncidentReportViewController : UIKit.UIViewController {
  @_Concurrency.MainActor(unsafe) @objc override final public func viewDidLoad()
  @_Concurrency.MainActor(unsafe) @objc override final public func viewWillAppear(_ animated: Swift.Bool)
  @objc deinit
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(nibName nibNameOrNil: Swift.String?, bundle nibBundleOrNil: Foundation.Bundle?)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
}
public class OlaMapMarker {
  public var imageName: Swift.String?
  public var identifier: Swift.String
  public var title: Swift.String?
  public var image: UIKit.UIImage?
  public init(identifier: Swift.String?, title: Swift.String?, image: UIKit.UIImage?, imageName: Swift.String?)
  public func removeMarker()
  @objc deinit
}
extension OlaMapNavigationSDK.OlaMapService {
  public func calculateGeoDistance(previous: CoreLocation.CLLocationCoordinate2D, next: CoreLocation.CLLocationCoordinate2D) -> Swift.Double
  public func calculateBearingValue(previous: CoreLocation.CLLocationCoordinate2D, next: CoreLocation.CLLocationCoordinate2D) -> Swift.Double
}
extension OlaMapDirectionFramework.CongestionLevel {
  @available(iOS 12.0, *)
  public var asCPTimeRemainingColor: CarPlay.CPTimeRemainingColor {
    get
  }
}
public struct Solar {
  public let coordinate: CoreLocation.CLLocationCoordinate2D
  public var date: Foundation.Date {
    get
  }
  public var sunrise: Foundation.Date? {
    get
  }
  public var sunset: Foundation.Date? {
    get
  }
  public var civilSunrise: Foundation.Date? {
    get
  }
  public var civilSunset: Foundation.Date? {
    get
  }
  public var nauticalSunrise: Foundation.Date? {
    get
  }
  public var nauticalSunset: Foundation.Date? {
    get
  }
  public var astronomicalSunrise: Foundation.Date? {
    get
  }
  public var astronomicalSunset: Foundation.Date? {
    get
  }
  public init?(for date: Foundation.Date = Date(), coordinate: CoreLocation.CLLocationCoordinate2D)
  public mutating func calculate()
}
extension OlaMapNavigationSDK.Solar {
  public var isDaytime: Swift.Bool {
    get
  }
  public var isNighttime: Swift.Bool {
    get
  }
}
extension OlaMapNavigationSDK.IncidentReportViewController : UIKit.UICollectionViewDataSource, UIKit.UICollectionViewDelegate {
  @_Concurrency.MainActor(unsafe) @objc final public func collectionView(_ collectionView: UIKit.UICollectionView, numberOfItemsInSection section: Swift.Int) -> Swift.Int
  @_Concurrency.MainActor(unsafe) @objc final public func collectionView(_ collectionView: UIKit.UICollectionView, cellForItemAt indexPath: Foundation.IndexPath) -> UIKit.UICollectionViewCell
  @_Concurrency.MainActor(unsafe) @objc final public func collectionView(_ collectionView: UIKit.UICollectionView, didSelectItemAt indexPath: Foundation.IndexPath)
}
extension OlaMapNavigationSDK.IncidentReportViewController : UIKit.UICollectionViewDelegateFlowLayout {
  @_Concurrency.MainActor(unsafe) @objc final public func collectionView(_ collectionView: UIKit.UICollectionView, layout collectionViewLayout: UIKit.UICollectionViewLayout, sizeForItemAt indexPath: Foundation.IndexPath) -> CoreFoundation.CGSize
}
public enum RouteInValidType : Swift.String {
  case emptyPolylineCoordinate
  case invalidStepDistance
  case emptyLegs
  case emptySteps
  case none
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @IBDesignable @objc(MBNavigationView) @_Concurrency.MainActor(unsafe) open class NavigationView : UIKit.UIView {
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func prepareForInterfaceBuilder()
  @objc deinit
}
@_inheritsConvenienceInitializers @IBDesignable @objc(MBDashedLineView) @_Concurrency.MainActor(unsafe) public class DashedLineView : OlaMapNavigationSDK.LineView {
  @objc @IBInspectable @_Concurrency.MainActor(unsafe) public var dashedLength: CoreFoundation.CGFloat {
    @objc get
    @objc set
  }
  @objc @IBInspectable @_Concurrency.MainActor(unsafe) public var dashedGap: CoreFoundation.CGFloat {
    @objc get
    @objc set
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func layoutSubviews()
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
@objc open class EndOfRouteFeedback : ObjectiveC.NSObject {
  @nonobjc public init(rating: Swift.Int? = nil, comment: Swift.String? = nil)
  @objc convenience public init(rating ratingNumber: Foundation.NSNumber?, comment: Swift.String?)
  @objc deinit
}
@_inheritsConvenienceInitializers @objc(MBLaneView) @_Concurrency.MainActor(unsafe) open class LaneView : UIKit.UIView {
  @_Concurrency.MainActor(unsafe) @objc override dynamic open var intrinsicContentSize: CoreFoundation.CGSize {
    @objc get
  }
  @objc @_Concurrency.MainActor(unsafe) dynamic public var primaryColor: UIKit.UIColor {
    @objc get
    @objc set
  }
  @objc @_Concurrency.MainActor(unsafe) dynamic public var secondaryColor: UIKit.UIColor {
    @objc get
    @objc set
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func draw(_ rect: CoreFoundation.CGRect)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
@_hasMissingDesignatedInitializers public class OlaDistanceFormatter {
  public class func format(_ distance: CoreLocation.CLLocationDistance) -> (absoluteValue: Swift.Double, valueInString: Swift.String)
  @objc deinit
}
public protocol MapInstrumentationProtocol : AnyObject {
  func tapOnCalloutView(_ identifier: Swift.String?)
  func didFailToLocateUser(_ error: any Swift.Error)
  func mapWillStartLoading()
  func mapRegionIsChanging()
  func mapDidFailLoading(_ error: any Swift.Error)
  func addAnnotationView(_ annotations: [Mapbox.MGLAnnotationView])
  func mapBecameIdle()
  func didFinishMapLoading()
  func didFinishMapRendering(_ isRendered: Swift.Bool)
  func didFinishMapRenderingFrame(_ isRendered: Swift.Bool)
  func didSelectAnnotation(_ annotation: any Mapbox.MGLAnnotation)
  func didSelectAnnotationView(_ annotationView: Mapbox.MGLAnnotationView)
  func didFaileToLoadImage(_ imageName: Swift.String)
  func didChangeTrackingMode(_ mode: Mapbox.MGLUserTrackingMode)
  func regionDidChange(_ reason: Mapbox.MGLCameraChangeReason)
  func loadAnnotationView(_ annotationView: Mapbox.MGLAnnotationView?)
}
public protocol OlaMapInstrumentationDelegate : AnyObject {
  func tapOnCalloutView(_ identifier: Swift.String?)
  func didFailToLocateUser(_ error: any Swift.Error)
  func mapWillStartLoading()
  func mapRegionIsChanging()
  func mapDidFailLoading(_ error: any Swift.Error)
  func addAnnotationView()
  func mapBecameIdle()
  func didFinishMapLoadingStyle()
  func didFinishMapLoading()
  func didFinishMapRendering(_ isRendered: Swift.Bool)
  func didFinishMapRenderingFrame(_ isRendered: Swift.Bool)
  func didSelectAnnotation()
  func didSelectAnnotationView()
  func didFaileToLoadImage(_ imageName: Swift.String)
  func didChangeTrackingMode()
  func regionDidChange()
  func loadAnnotationView()
}
@_hasMissingDesignatedInitializers public class OlaMapInstrumentation : OlaMapNavigationSDK.MapInstrumentationProtocol {
  public func tapOnCalloutView(_ identifier: Swift.String?)
  public func didFailToLocateUser(_ error: any Swift.Error)
  public func mapWillStartLoading()
  public func mapRegionIsChanging()
  public func mapDidFailLoading(_ error: any Swift.Error)
  public func addAnnotationView(_ annotations: [Mapbox.MGLAnnotationView])
  public func mapBecameIdle()
  public func didFinishLoadingMapStyle()
  public func didFailedToLoadMapStyle()
  public func didFinishMapLoading()
  public func didFinishMapRendering(_ isRendered: Swift.Bool)
  public func didFinishMapRenderingFrame(_ isRendered: Swift.Bool)
  public func didSelectAnnotation(_ annotation: any Mapbox.MGLAnnotation)
  public func didSelectAnnotationView(_ annotationView: Mapbox.MGLAnnotationView)
  public func didFaileToLoadImage(_ imageName: Swift.String)
  public func didChangeTrackingMode(_ mode: Mapbox.MGLUserTrackingMode)
  public func regionDidChange(_ reason: Mapbox.MGLCameraChangeReason)
  public func loadAnnotationView(_ annotationView: Mapbox.MGLAnnotationView?)
  public func logTrafficPolyline(_ encodedPolyline: Swift.String, travelAdvisory: Swift.String, count: Swift.Int)
  public func mapLoadTime(_ time: Swift.Double)
  @objc deinit
}
extension OlaMapNavigationSDK.OlaMapInstrumentation {
  public func didNavigationCompleted(wayPointName: Swift.String, description: Swift.String)
  public func didArrivedInDestinationRegion(_ distance: Swift.Double)
  public func willReroute(_ location: CoreLocation.CLLocation)
  public func didReroute(_ location: CoreLocation.CLLocation)
  public func didFailToRerouteWith(_ error: any Swift.Error)
  public func onUpdateNavigation(_ data: [Swift.String : Any])
  public func onDirectionData(_ data: [Swift.String : Any], origin: CoreLocation.CLLocation, destination: CoreLocation.CLLocation)
  public func endNavigation()
  public func mapPermissionStatus(_ status: Swift.String)
}
@_hasMissingDesignatedInitializers public class OlaDirectionBrdige {
  public static func intoMapboxCompatible(_ stringOlaBackendAPIResponse: Foundation.Data, routeIndex: Swift.Int) -> Foundation.Data
  @objc deinit
}
extension UIKit.UIDevice {
  @objc @_Concurrency.MainActor(unsafe) dynamic public var isPluggedIn: Swift.Bool {
    @objc get
  }
}
@objc(MBStyleType) public enum StyleType : Swift.Int, Swift.CustomStringConvertible {
  case day
  case night
  public init?(description: Swift.String)
  public var description: Swift.String {
    get
  }
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@_inheritsConvenienceInitializers @objc(MBStyle) open class Style : ObjectiveC.NSObject {
  @objc public var tintColor: UIKit.UIColor?
  public var statusBarStyle: UIKit.UIStatusBarStyle?
  @objc public var fontFamily: Swift.String?
  @objc public var styleType: OlaMapNavigationSDK.StyleType
  @objc open var mapStyleURL: Foundation.URL
  @objc open var previewMapStyleURL: Foundation.URL
  @objc open func apply()
  @objc required override dynamic public init()
  @objc deinit
}
@_inheritsConvenienceInitializers @objc(MBButton) @_Concurrency.MainActor(unsafe) open class Button : OlaMapNavigationSDK.StylableButton {
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
@_inheritsConvenienceInitializers @objc(MBCancelButton) @_Concurrency.MainActor(unsafe) open class CancelButton : OlaMapNavigationSDK.Button {
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
@_inheritsConvenienceInitializers @objc(MBDismissButton) @_Concurrency.MainActor(unsafe) open class DismissButton : OlaMapNavigationSDK.Button {
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
@_inheritsConvenienceInitializers @objc(MBFloatingButton) @_Concurrency.MainActor(unsafe) open class FloatingButton : OlaMapNavigationSDK.Button {
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
@_inheritsConvenienceInitializers @objc(MBReportButton) @_Concurrency.MainActor(unsafe) public class ReportButton : OlaMapNavigationSDK.Button {
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @objc deinit
}
@_inheritsConvenienceInitializers @objc(MBHighlightedButton) @_Concurrency.MainActor(unsafe) public class HighlightedButton : OlaMapNavigationSDK.Button {
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
@_inheritsConvenienceInitializers @IBDesignable @objc(MBResumeButton) @_Concurrency.MainActor(unsafe) public class ResumeButton : UIKit.UIControl {
  @_Concurrency.MainActor(unsafe) @objc override dynamic public var tintColor: UIKit.UIColor! {
    @objc get
    @objc set
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func prepareForInterfaceBuilder()
  @objc deinit
}
@_inheritsConvenienceInitializers @objc(MBDraggableView) @_Concurrency.MainActor(unsafe) open class StepListIndicatorView : UIKit.UIView {
  @objc @_Concurrency.MainActor(unsafe) dynamic open var gradientColors: [UIKit.UIColor] {
    @objc get
    @objc set
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func layoutSubviews()
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
@_inheritsConvenienceInitializers @objc(MBStylableLabel) @_Concurrency.MainActor(unsafe) open class StylableLabel : UIKit.UILabel {
  @objc @_Concurrency.MainActor(unsafe) dynamic open var normalTextColor: UIKit.UIColor {
    @objc get
    @objc set
  }
  @objc @_Concurrency.MainActor(unsafe) dynamic open var normalFont: UIKit.UIFont {
    @objc get
    @objc set
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
@_inheritsConvenienceInitializers @objc(MBStylableView) @_Concurrency.MainActor(unsafe) open class StylableView : UIKit.UIView {
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
@_inheritsConvenienceInitializers @objc(MBStylableTextView) @_Concurrency.MainActor(unsafe) open class StylableTextView : UIKit.UITextView {
  @objc @_Concurrency.MainActor(unsafe) dynamic open var normalTextColor: UIKit.UIColor {
    @objc get
    @objc set
  }
  @available(iOS 7.0, *)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreFoundation.CGRect, textContainer: UIKit.NSTextContainer?)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
@_inheritsConvenienceInitializers @objc(MBDistanceLabel) @_Concurrency.MainActor(unsafe) open class DistanceLabel : OlaMapNavigationSDK.StylableLabel {
  @objc @_Concurrency.MainActor(unsafe) dynamic public var valueTextColor: UIKit.UIColor {
    @objc get
    @objc set
  }
  @objc @_Concurrency.MainActor(unsafe) dynamic public var unitTextColor: UIKit.UIColor {
    @objc get
    @objc set
  }
  @objc @_Concurrency.MainActor(unsafe) dynamic public var valueFont: UIKit.UIFont {
    @objc get
    @objc set
  }
  @objc @_Concurrency.MainActor(unsafe) dynamic public var unitFont: UIKit.UIFont {
    @objc get
    @objc set
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
@_inheritsConvenienceInitializers @objc(MBPrimaryLabel) @_Concurrency.MainActor(unsafe) open class PrimaryLabel : OlaMapNavigationSDK.InstructionLabel {
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
@_inheritsConvenienceInitializers @objc(MBSecondaryLabel) @_Concurrency.MainActor(unsafe) open class SecondaryLabel : OlaMapNavigationSDK.InstructionLabel {
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
@_inheritsConvenienceInitializers @objc(MBTimeRemainingLabel) @_Concurrency.MainActor(unsafe) open class TimeRemainingLabel : OlaMapNavigationSDK.StylableLabel {
  @objc @_Concurrency.MainActor(unsafe) dynamic public var trafficUnknownColor: UIKit.UIColor {
    @objc get
    @objc set
  }
  @objc @_Concurrency.MainActor(unsafe) dynamic public var trafficLowColor: UIKit.UIColor
  @objc @_Concurrency.MainActor(unsafe) dynamic public var trafficModerateColor: UIKit.UIColor
  @objc @_Concurrency.MainActor(unsafe) dynamic public var trafficHeavyColor: UIKit.UIColor
  @objc @_Concurrency.MainActor(unsafe) dynamic public var trafficSevereColor: UIKit.UIColor
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
@_inheritsConvenienceInitializers @objc(MBDistanceRemainingLabel) @_Concurrency.MainActor(unsafe) open class DistanceRemainingLabel : OlaMapNavigationSDK.StylableLabel {
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
@_inheritsConvenienceInitializers @objc(MBArrivalTimeLabel) @_Concurrency.MainActor(unsafe) open class ArrivalTimeLabel : OlaMapNavigationSDK.StylableLabel {
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
@_inheritsConvenienceInitializers @objc(MBTitleLabel) @_Concurrency.MainActor(unsafe) open class TitleLabel : OlaMapNavigationSDK.StylableLabel {
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
@_inheritsConvenienceInitializers @objc(MBSubtitleLabel) @_Concurrency.MainActor(unsafe) open class SubtitleLabel : OlaMapNavigationSDK.StylableLabel {
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
@_inheritsConvenienceInitializers @objc(MBWayNameView) @_Concurrency.MainActor(unsafe) open class WayNameView : UIKit.UIView {
  @objc @_Concurrency.MainActor(unsafe) dynamic public var borderColor: UIKit.UIColor? {
    @objc get
    @objc set
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func layoutSubviews()
  @objc deinit
}
@_inheritsConvenienceInitializers @objc(MBWayNameLabel) @_Concurrency.MainActor(unsafe) open class WayNameLabel : OlaMapNavigationSDK.StylableLabel {
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
@_inheritsConvenienceInitializers @objc(MBProgressBar) @_Concurrency.MainActor(unsafe) public class ProgressBar : UIKit.UIView {
  @objc @_Concurrency.MainActor(unsafe) dynamic public var barColor: UIKit.UIColor {
    @objc get
    @objc set
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic open var description: Swift.String {
    @objc get
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func layoutSubviews()
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
@_inheritsConvenienceInitializers @objc(MBLineView) @_Concurrency.MainActor(unsafe) public class LineView : UIKit.UIView {
  @objc @_Concurrency.MainActor(unsafe) dynamic public var lineColor: UIKit.UIColor {
    @objc get
    @objc set
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
@_inheritsConvenienceInitializers @objc(MBSeparatorView) @_Concurrency.MainActor(unsafe) public class SeparatorView : UIKit.UIView {
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
@_inheritsConvenienceInitializers @objc(MBStylableButton) @_Concurrency.MainActor(unsafe) open class StylableButton : UIKit.UIButton {
  @objc @_Concurrency.MainActor(unsafe) dynamic open var textFont: UIKit.UIFont {
    @objc get
    @objc set
  }
  @objc @_Concurrency.MainActor(unsafe) dynamic open var textColor: UIKit.UIColor {
    @objc get
    @objc set
  }
  @objc @_Concurrency.MainActor(unsafe) dynamic open var borderColor: UIKit.UIColor {
    @objc get
    @objc set
  }
  @objc @_Concurrency.MainActor(unsafe) dynamic open var borderWidth: CoreFoundation.CGFloat {
    @objc get
    @objc set
  }
  @objc @_Concurrency.MainActor(unsafe) dynamic open var cornerRadius: CoreFoundation.CGFloat {
    @objc get
    @objc set
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
@_inheritsConvenienceInitializers @objc(MBManeuverContainerView) @_Concurrency.MainActor(unsafe) open class ManeuverContainerView : UIKit.UIView {
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
@_inheritsConvenienceInitializers @objc(MBInstructionsBannerContentView) @_Concurrency.MainActor(unsafe) open class InstructionsBannerContentView : UIKit.UIView {
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
@_inheritsConvenienceInitializers @objc(MBBottomBannerContentView) @_Concurrency.MainActor(unsafe) open class BottomBannerContentView : UIKit.UIView {
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
@_inheritsConvenienceInitializers @objc(MBMarkerView) @_Concurrency.MainActor(unsafe) public class MarkerView : UIKit.UIView {
  @objc @_Concurrency.MainActor(unsafe) dynamic public var innerColor: UIKit.UIColor {
    @objc get
    @objc set
  }
  @objc @_Concurrency.MainActor(unsafe) dynamic public var shadowColor: UIKit.UIColor {
    @objc get
    @objc set
  }
  @objc @_Concurrency.MainActor(unsafe) dynamic public var pinColor: UIKit.UIColor {
    @objc get
    @objc set
  }
  @objc @_Concurrency.MainActor(unsafe) dynamic public var strokeColor: UIKit.UIColor {
    @objc get
    @objc set
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic public var intrinsicContentSize: CoreFoundation.CGSize {
    @objc get
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func layoutSubviews()
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func draw(_ rect: CoreFoundation.CGRect)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
@_inheritsConvenienceInitializers @objc(MBNavigationMapView) @_Concurrency.MainActor(unsafe) open class NavigationMapView : Mapbox.MGLMapView, UIKit.UIGestureRecognizerDelegate {
  @objc @_Concurrency.MainActor(unsafe) public var defaultAltitude: Swift.Double
  @objc @_Concurrency.MainActor(unsafe) public var isWalking: Swift.Bool
  @objc @_Concurrency.MainActor(unsafe) public var isSolidPolylineType: Swift.Bool
  @objc @_Concurrency.MainActor(unsafe) public var zoomedOutMotorwayAltitude: Swift.Double
  @objc @_Concurrency.MainActor(unsafe) public var longManeuverDistance: Swift.Double
  @objc @_Concurrency.MainActor(unsafe) public var tapGestureDistanceThreshold: CoreFoundation.CGFloat
  @_Concurrency.MainActor(unsafe) weak public var courseTrackingDelegate: (any OlaMapNavigationSDK.NavigationMapViewCourseTrackingDelegate)?
  @objc @_Concurrency.MainActor(unsafe) dynamic public var trafficUnknownColor: UIKit.UIColor
  @objc @_Concurrency.MainActor(unsafe) dynamic public var trafficLowColor: UIKit.UIColor
  @objc @_Concurrency.MainActor(unsafe) dynamic public var trafficModerateColor: UIKit.UIColor
  @objc @_Concurrency.MainActor(unsafe) dynamic public var trafficHeavyColor: UIKit.UIColor
  @objc @_Concurrency.MainActor(unsafe) dynamic public var trafficSevereColor: UIKit.UIColor
  @objc @_Concurrency.MainActor(unsafe) dynamic public var routeLineColor: UIKit.UIColor
  @objc @_Concurrency.MainActor(unsafe) dynamic public var routeLineAlternativeColor: UIKit.UIColor
  @objc @_Concurrency.MainActor(unsafe) dynamic public var routeLineCasingColor: UIKit.UIColor
  @objc @_Concurrency.MainActor(unsafe) dynamic public var routeLineCasingAlternativeColor: UIKit.UIColor
  @objc @_Concurrency.MainActor(unsafe) dynamic public var maneuverArrowColor: UIKit.UIColor
  @objc @_Concurrency.MainActor(unsafe) dynamic public var maneuverArrowStrokeColor: UIKit.UIColor
  @_Concurrency.MainActor(unsafe) @objc override dynamic open var showsUserLocation: Swift.Bool {
    @objc get
    @objc set
  }
  @_Concurrency.MainActor(unsafe) open var tracksUserCourse: Swift.Bool {
    get
    set
  }
  @objc @_Concurrency.MainActor(unsafe) public var userCourseView: OlaMapNavigationSDK.UserPuckCourseView? {
    @objc get
    @objc set
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder decoder: Foundation.NSCoder)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreFoundation.CGRect, styleURL: Foundation.URL?)
  @_Concurrency.MainActor(unsafe) convenience public init(frame: CoreFoundation.CGRect, styleURL: Foundation.URL?, config: OlaMapNavigationSDK.MNConfig? = nil)
  @objc deinit
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func prepareForInterfaceBuilder()
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func layoutSubviews()
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func anchorPoint(forGesture gesture: UIKit.UIGestureRecognizer) -> CoreFoundation.CGPoint
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func mapViewDidFinishRenderingFrameFullyRendered(_ fullyRendered: Swift.Bool)
  @objc @_Concurrency.MainActor(unsafe) public func updateCourseTracking(location: CoreLocation.CLLocation?, camera: Mapbox.MGLMapCamera? = nil, animated: Swift.Bool = false)
  @_Concurrency.MainActor(unsafe) public static let defaultPadding: UIKit.UIEdgeInsets
  @objc @_Concurrency.MainActor(unsafe) public func showcase(_ routes: [OlaMapDirectionFramework.Route], padding: UIKit.UIEdgeInsets = NavigationMapView.defaultPadding, animated: Swift.Bool = false)
  @objc @_Concurrency.MainActor(unsafe) public func showRoutes(_ routes: [OlaMapDirectionFramework.Route], legIndex: Swift.Int = 0)
  @objc @_Concurrency.MainActor(unsafe) public func removeRoutes()
  @objc @_Concurrency.MainActor(unsafe) public func showWaypoints(_ route: OlaMapDirectionFramework.Route, legIndex: Swift.Int = 0)
  @objc @_Concurrency.MainActor(unsafe) public func removeWaypoints()
  @objc @_Concurrency.MainActor(unsafe) public func addArrow(route: OlaMapDirectionFramework.Route, legIndex: Swift.Int, stepIndex: Swift.Int)
  @objc @_Concurrency.MainActor(unsafe) public func removeArrow()
  @objc @_Concurrency.MainActor(unsafe) public func localizeLabels()
  @objc @_Concurrency.MainActor(unsafe) public func showVoiceInstructionsOnMap(route: OlaMapDirectionFramework.Route)
  @objc @_Concurrency.MainActor(unsafe) public func setOverheadCameraView(from userLocation: CoreLocation.CLLocationCoordinate2D, along coordinates: [CoreLocation.CLLocationCoordinate2D], for bounds: UIKit.UIEdgeInsets)
  @objc @_Concurrency.MainActor(unsafe) public func recenterMap()
}
@objc(MBNavigationMapViewCourseTrackingDelegate) public protocol NavigationMapViewCourseTrackingDelegate {
  @objc(navigationMapViewDidStartTrackingCourse:) optional func navigationMapViewDidStartTrackingCourse(_ mapView: OlaMapNavigationSDK.NavigationMapView)
  @objc(navigationMapViewDidStopTrackingCourse:) optional func navigationMapViewDidStopTrackingCourse(_ mapView: OlaMapNavigationSDK.NavigationMapView)
}
public struct OlaAutoCompletePlaceResponseModel : Swift.Codable {
  public let predictions: [OlaMapNavigationSDK.Prediction]?
  public let warnings: [Swift.String]?
  public let errors: [Swift.String?]?
  public let status: Swift.String?
  public let message: Swift.String?
  public let infoMessgae: [Swift.String]?
  public let errorMessage: Swift.String?
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct Prediction : Swift.Codable {
  public let predictionDescription: Swift.String?
  public let matchedSubstrings: [OlaMapNavigationSDK.MatchedSubstring]?
  public let placeID: Swift.String?, reference: Swift.String?
  public let structuredFormatting: OlaMapNavigationSDK.StructuredFormatting?
  public let terms: [OlaMapNavigationSDK.Term]?
  public let types: [Swift.String]?
  public let layer: [Swift.String]?
  public let distanceMeters: Swift.Int?
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct MatchedSubstring : Swift.Codable {
  public let length: Swift.Int?, offset: Swift.Int?
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct StructuredFormatting : Swift.Codable {
  public let mainText: Swift.String?
  public let mainTextMatchedSubstrings: [OlaMapNavigationSDK.MatchedSubstring]?
  public let secondaryText: Swift.String?
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct Term : Swift.Codable {
  public let offset: Swift.Int?
  public let value: Swift.String?
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
extension Mapbox.MGLStyle {
  @objc dynamic public class var navigationGuidanceDayStyleURL: Foundation.URL {
    @objc get
  }
  @objc dynamic public class var navigationGuidanceNightStyleURL: Foundation.URL {
    @objc get
  }
  @objc dynamic public class func navigationGuidanceDayStyleURL(version: Swift.Int) -> Foundation.URL
  @objc dynamic public class func navigationGuidanceNightStyleURL(version: Swift.Int) -> Foundation.URL
  @objc dynamic public class var navigationPreviewDayStyleURL: Foundation.URL {
    @objc get
  }
  @objc dynamic public class var navigationPreviewNightStyleURL: Foundation.URL {
    @objc get
  }
  @objc dynamic public class func navigationPreviewDayStyleURL(version: Swift.Int) -> Foundation.URL
  @objc dynamic public class func navigationPreviewNightStyleURL(version: Swift.Int) -> Foundation.URL
}
public protocol MapGeocoderProtocol {
  func forwardGeocoding(_ place: Swift.String, payload: [Swift.String : Swift.String]?, headers: [Swift.String : Swift.String]?, onCompletion: @escaping (_ result: Swift.Result<OlaMapNavigationSDK.DemoOlaForwordPlaceResponseModel, OlaMapNavigationSDK.OlaMapError>) -> Swift.Void)
  func reverseGeocoding(coordinate: OlaMapNavigationSDK.OlaCoordinate, payload: [Swift.String : Swift.String]?, headers: [Swift.String : Swift.String]?, onCompletion: @escaping (_ result: Swift.Result<OlaMapNavigationSDK.DemoOlaReversePlaceResponseModel, OlaMapNavigationSDK.OlaMapError>) -> Swift.Void)
}
public class OlaMapGeocoder : OlaMapNavigationSDK.MapGeocoderProtocol {
  public init()
  public func forwardGeocoding(_ place: Swift.String, payload: [Swift.String : Swift.String]? = nil, headers: [Swift.String : Swift.String]? = nil, onCompletion: @escaping (_ result: Swift.Result<OlaMapNavigationSDK.DemoOlaForwordPlaceResponseModel, OlaMapNavigationSDK.OlaMapError>) -> Swift.Void)
  public func reverseGeocoding(coordinate: OlaMapNavigationSDK.OlaCoordinate, payload: [Swift.String : Swift.String]? = nil, headers: [Swift.String : Swift.String]? = nil, onCompletion: @escaping (_ result: Swift.Result<OlaMapNavigationSDK.DemoOlaReversePlaceResponseModel, OlaMapNavigationSDK.OlaMapError>) -> Swift.Void)
  @objc deinit
}
@objc(MBSimulatedLocationManager) open class SimulatedLocationManager : OlaMapNavigationSDK.NavigationLocationManager {
  @objc public var speedMultiplier: Swift.Double
  @objc override dynamic open var location: CoreLocation.CLLocation? {
    @objc get
  }
  @objc override public func copy(with zone: ObjectiveC.NSZone? = nil) -> Any
  @objc public init(route: OlaMapDirectionFramework.Route)
  @objc public init(routeProgress: OlaMapNavigationSDK.RouteProgress)
  @objc deinit
  @objc override dynamic open func startUpdatingLocation()
  @objc override dynamic open func stopUpdatingLocation()
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @_Concurrency.MainActor(unsafe) public class CabAnnotationView : OlaMapNavigationSDK.OlaAnnotationView {
  @_Concurrency.MainActor(unsafe) convenience public init(identifier: Swift.String, cabImage: UIKit.UIImage?, color: UIKit.UIColor? = nil, opacity: CoreFoundation.CGFloat? = nil, markerView: UIKit.UIView? = nil)
  @_Concurrency.MainActor(unsafe) convenience public init(identifier: Swift.String, cabImage: UIKit.UIImage?, color: UIKit.UIColor? = nil, opacity: CoreFoundation.CGFloat? = nil, markerView: UIKit.UIView? = nil, rotation: Swift.Double)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func layoutSubviews()
  @_Concurrency.MainActor(unsafe) public func rotate(_ angle: Swift.Double)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func setSelected(_ selected: Swift.Bool, animated: Swift.Bool)
  @objc deinit
}
extension Foundation.Locale {
  public static var preferredLocalLanguageCountryCode: Swift.String {
    get
  }
  public static var nationalizedCurrent: Foundation.Locale
  public static var usesMetric: Swift.Bool {
    get
  }
  public var usesMetric: Swift.Bool {
    get
  }
}
public enum OlaTrafficType : Swift.Codable {
  case LOW
  case JAM
  case HEAVY
  case MODERATE
  public var text: Swift.String {
    get
  }
  public func color(config: OlaMapNavigationSDK.Configuration?) -> UIKit.UIColor
  public static func == (a: OlaMapNavigationSDK.OlaTrafficType, b: OlaMapNavigationSDK.OlaTrafficType) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public func encode(to encoder: any Swift.Encoder) throws
  public var hashValue: Swift.Int {
    get
  }
  public init(from decoder: any Swift.Decoder) throws
}
@_inheritsConvenienceInitializers @IBDesignable @objc(MBManeuverView) @_Concurrency.MainActor(unsafe) open class ManeuverView : UIKit.UIView {
  @objc @_Concurrency.MainActor(unsafe) dynamic public var primaryColor: UIKit.UIColor {
    @objc get
    @objc set
  }
  @objc @_Concurrency.MainActor(unsafe) dynamic public var secondaryColor: UIKit.UIColor {
    @objc get
    @objc set
  }
  @objc @_Concurrency.MainActor(unsafe) public var isStart: Swift.Bool {
    @objc get
    @objc set
  }
  @objc @_Concurrency.MainActor(unsafe) public var isEnd: Swift.Bool {
    @objc get
    @objc set
  }
  @objc @_Concurrency.MainActor(unsafe) public var visualInstruction: OlaMapDirectionFramework.VisualInstruction? {
    @objc get
    @objc set
  }
  @objc @_Concurrency.MainActor(unsafe) public var drivingSide: OlaMapDirectionFramework.DrivingSide {
    @objc get
    @objc set
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func draw(_ rect: CoreFoundation.CGRect)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
public protocol AutoCompletePlaceProtocol {
  func search(_ text: Swift.String, payload: [Swift.String : Swift.String]?, headers: [Swift.String : Swift.String]?, onCompltion: @escaping (_ result: Swift.Result<OlaMapNavigationSDK.OlaAutoCompletePlaceResponseModel, OlaMapNavigationSDK.OlaMapError>) -> Swift.Void)
}
public class OlaAutoCompletePlace : OlaMapNavigationSDK.AutoCompletePlaceProtocol {
  public init()
  public func search(_ text: Swift.String, payload: [Swift.String : Swift.String]? = nil, headers: [Swift.String : Swift.String]? = nil, onCompltion: @escaping (_ result: Swift.Result<OlaMapNavigationSDK.OlaAutoCompletePlaceResponseModel, OlaMapNavigationSDK.OlaMapError>) -> Swift.Void)
  @objc deinit
}
extension UIKit.UIView {
  @_Concurrency.MainActor(unsafe) public func makeToast(_ message: Swift.String?, duration: Foundation.TimeInterval = ToastManager.shared.duration, position: OlaMapNavigationSDK.ToastPosition = ToastManager.shared.position, title: Swift.String? = nil, image: UIKit.UIImage? = nil, style: OlaMapNavigationSDK.ToastStyle = ToastManager.shared.style, completion: ((_ didTap: Swift.Bool) -> Swift.Void)? = nil)
  @_Concurrency.MainActor(unsafe) public func makeToast(_ message: Swift.String?, duration: Foundation.TimeInterval = ToastManager.shared.duration, point: CoreFoundation.CGPoint, title: Swift.String?, image: UIKit.UIImage?, style: OlaMapNavigationSDK.ToastStyle = ToastManager.shared.style, completion: ((_ didTap: Swift.Bool) -> Swift.Void)?)
  @_Concurrency.MainActor(unsafe) public func showToast(_ toast: UIKit.UIView, duration: Foundation.TimeInterval = ToastManager.shared.duration, position: OlaMapNavigationSDK.ToastPosition = ToastManager.shared.position, completion: ((_ didTap: Swift.Bool) -> Swift.Void)? = nil)
  @_Concurrency.MainActor(unsafe) public func showToast(_ toast: UIKit.UIView, duration: Foundation.TimeInterval = ToastManager.shared.duration, point: CoreFoundation.CGPoint, completion: ((_ didTap: Swift.Bool) -> Swift.Void)? = nil)
  @_Concurrency.MainActor(unsafe) public func hideToast()
  @_Concurrency.MainActor(unsafe) public func hideToast(_ toast: UIKit.UIView)
  @_Concurrency.MainActor(unsafe) public func hideAllToasts(includeActivity: Swift.Bool = false, clearQueue: Swift.Bool = true)
  @_Concurrency.MainActor(unsafe) public func clearToastQueue()
  @_Concurrency.MainActor(unsafe) public func makeToastActivity(_ position: OlaMapNavigationSDK.ToastPosition)
  @_Concurrency.MainActor(unsafe) public func makeToastActivity(_ point: CoreFoundation.CGPoint)
  @_Concurrency.MainActor(unsafe) public func hideToastActivity()
  @_Concurrency.MainActor(unsafe) public func toastViewForMessage(_ message: Swift.String?, title: Swift.String?, image: UIKit.UIImage?, style: OlaMapNavigationSDK.ToastStyle) throws -> UIKit.UIView
}
public struct ToastStyle {
  public init()
  public var backgroundColor: UIKit.UIColor
  public var titleColor: UIKit.UIColor
  public var messageColor: UIKit.UIColor
  public var maxWidthPercentage: CoreFoundation.CGFloat {
    get
    set
  }
  public var maxHeightPercentage: CoreFoundation.CGFloat {
    get
    set
  }
  public var horizontalPadding: CoreFoundation.CGFloat
  public var verticalPadding: CoreFoundation.CGFloat
  public var cornerRadius: CoreFoundation.CGFloat
  public var titleFont: UIKit.UIFont
  public var messageFont: UIKit.UIFont
  public var titleAlignment: UIKit.NSTextAlignment
  public var messageAlignment: UIKit.NSTextAlignment
  public var titleNumberOfLines: Swift.Int
  public var messageNumberOfLines: Swift.Int
  public var displayShadow: Swift.Bool
  public var shadowColor: UIKit.UIColor
  public var shadowOpacity: Swift.Float {
    get
    set
  }
  public var shadowRadius: CoreFoundation.CGFloat
  public var shadowOffset: CoreFoundation.CGSize
  public var imageSize: CoreFoundation.CGSize
  public var activitySize: CoreFoundation.CGSize
  public var fadeDuration: Swift.Double
  public var activityIndicatorColor: UIKit.UIColor
  public var activityBackgroundColor: UIKit.UIColor
}
@_hasMissingDesignatedInitializers public class ToastManager {
  public static let shared: OlaMapNavigationSDK.ToastManager
  public var style: OlaMapNavigationSDK.ToastStyle
  public var isTapToDismissEnabled: Swift.Bool
  public var isQueueEnabled: Swift.Bool
  public var duration: Swift.Double
  public var position: OlaMapNavigationSDK.ToastPosition
  @objc deinit
}
public enum ToastPosition {
  case top
  case center
  case bottom
  public static func == (a: OlaMapNavigationSDK.ToastPosition, b: OlaMapNavigationSDK.ToastPosition) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
@objc(MBTextType) public enum TextType : Swift.UInt, Swift.CustomStringConvertible, Swift.Codable {
  case text
  case ssml
  public init?(description: Swift.String)
  public var description: Swift.String {
    get
  }
  public init?(rawValue: Swift.UInt)
  public typealias RawValue = Swift.UInt
  public var rawValue: Swift.UInt {
    get
  }
}
@objc(MBAudioFormat) public enum AudioFormat : Swift.UInt, Swift.CustomStringConvertible, Swift.Codable {
  case mp3
  public init?(description: Swift.String)
  public var description: Swift.String {
    get
  }
  public init?(rawValue: Swift.UInt)
  public typealias RawValue = Swift.UInt
  public var rawValue: Swift.UInt {
    get
  }
}
@objc(MBSpeechGender) public enum SpeechGender : Swift.UInt, Swift.CustomStringConvertible, Swift.Codable {
  case female
  case male
  case neuter
  public init?(description: Swift.String)
  public var description: Swift.String {
    get
  }
  public init?(rawValue: Swift.UInt)
  public typealias RawValue = Swift.UInt
  public var rawValue: Swift.UInt {
    get
  }
}
@objc(MBSpeechOptions) open class SpeechOptions : ObjectiveC.NSObject, Swift.Codable {
  @objc public init(text: Swift.String)
  @objc public init(ssml: Swift.String)
  @objc open var text: Swift.String
  @objc open var outputFormat: OlaMapNavigationSDK.AudioFormat
  @objc open var locale: Foundation.Locale
  @objc open var speechGender: OlaMapNavigationSDK.SpeechGender
  @objc deinit
  open func encode(to encoder: any Swift.Encoder) throws
  required public init(from decoder: any Swift.Decoder) throws
}
@objc public protocol StatusViewDelegate {
  @objc optional func statusView(_ statusView: OlaMapNavigationSDK.StatusView, valueChangedTo value: Swift.Double)
}
@_inheritsConvenienceInitializers @IBDesignable @objc(MBStatusView) @_Concurrency.MainActor(unsafe) public class StatusView : UIKit.UIView {
  @objc @_Concurrency.MainActor(unsafe) weak public var delegate: (any OlaMapNavigationSDK.StatusViewDelegate)?
  @objc @_Concurrency.MainActor(unsafe) public var canChangeValue: Swift.Bool
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @_Concurrency.MainActor(unsafe) public func show(_ title: Swift.String, showSpinner: Swift.Bool, interactive: Swift.Bool = false)
  @_Concurrency.MainActor(unsafe) public func hide(delay: Foundation.TimeInterval = 0, animated: Swift.Bool = true)
  @objc deinit
}
public enum OLAMapButton : Swift.CaseIterable {
  case compass
  public static func == (a: OlaMapNavigationSDK.OLAMapButton, b: OlaMapNavigationSDK.OLAMapButton) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public typealias AllCases = [OlaMapNavigationSDK.OLAMapButton]
  public static var allCases: [OlaMapNavigationSDK.OLAMapButton] {
    get
  }
  public var hashValue: Swift.Int {
    get
  }
}
public var screenWidth: CoreFoundation.CGFloat {
  get
}
public var screenHeight: CoreFoundation.CGFloat {
  get
}
public let MBRouteLineWidthByZoomLevel: [Swift.Int : Foundation.NSExpression]
public let MBGradientRouteLineByZoomLevel: [Swift.Int : Foundation.NSExpression]
public var NavigationMapViewMinimumDistanceForOverheadZooming: Swift.Double
public let MBCurrentLegAttribute: Swift.String
public let MBCongestionAttribute: Swift.String
public let NavigationViewMinimumVolumeForWarning: Swift.Float
extension CoreLocation.CLLocation {
  public var dictionaryRepresentation: [Swift.String : Any] {
    get
  }
  convenience public init(dictionary: [Swift.String : Any])
}
extension OlaMapNavigationSDK.OlaMapService {
  public func drawPolygon(identifier: Swift.String, _ coordinates: [OlaMapNavigationSDK.OlaCoordinate], zoneColor: UIKit.UIColor? = nil, strokeColor: UIKit.UIColor? = nil, storkeWidth: CoreFoundation.CGFloat? = nil)
}
extension OlaMapNavigationSDK.OlaMapService {
  public func drawCircle(id: Swift.String, centerCoordinate: OlaMapNavigationSDK.OlaCoordinate, radius: Swift.Double, strokeColor: UIKit.UIColor = .systemGreen, zoneColor: UIKit.UIColor, strokeWidth: CoreFoundation.CGFloat)
}
@objc(MBFeedbackType) public enum FeedbackType : Swift.Int, Swift.CustomStringConvertible {
  case general
  case accident
  case hazard
  case roadClosed
  case notAllowed
  case missingRoad
  case missingExit
  case routingError
  case confusingInstruction
  case reportTraffic
  case mapIssue
  public var description: Swift.String {
    get
  }
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@objc(MBFeedbackSource) public enum FeedbackSource : Swift.Int, Swift.CustomStringConvertible {
  case user
  case reroute
  case unknown
  public var description: Swift.String {
    get
  }
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
public struct OlaGeoCodeResponseModel : Swift.Codable {
  public let plusCode: OlaMapNavigationSDK.PlusCode?
  public let results: [OlaMapNavigationSDK.ResultPlace]?
  public let status: Swift.String?
  public let message: Swift.String?
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct PlusCode : Swift.Codable {
  public let compoundCode: Swift.String?, globalCode: Swift.String?
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct ResultPlace : Swift.Codable {
  public let addressComponents: [OlaMapNavigationSDK.AddressComponent]?
  public let formattedAddress: Swift.String?
  public let geometry: OlaMapNavigationSDK.Geometry?
  public let placeID: Swift.String?
  public let plusCode: OlaMapNavigationSDK.PlusCode?
  public let types: [Swift.String]?
  public let postcodeLocalities: [Swift.String]?
  public let partialMatch: Swift.Bool?
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct AddressComponent : Swift.Codable {
  public let longName: Swift.String?, shortName: Swift.String?
  public let types: [Swift.String]?
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct Geometry : Swift.Codable {
  public let location: OlaMapNavigationSDK.Location?
  public let locationType: Swift.String?
  public let viewport: OlaMapNavigationSDK.Viewport?
  public let bounds: OlaMapNavigationSDK.Bounds?
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct Bounds : Swift.Codable {
  public let northeast: OlaMapNavigationSDK.Location?, southwest: OlaMapNavigationSDK.Location?
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct Location : Swift.Codable {
  public let lat: Swift.Double?, lng: Swift.Double?
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct Viewport : Swift.Codable {
  public let northeast: OlaMapNavigationSDK.Location?, southwest: OlaMapNavigationSDK.Location?
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
extension UIKit.UIEdgeInsets {
  public static func + (left: UIKit.UIEdgeInsets, right: UIKit.UIEdgeInsets) -> UIKit.UIEdgeInsets
  public static func > (lhs: UIKit.UIEdgeInsets, rhs: UIKit.UIEdgeInsets) -> Swift.Bool
}
extension UIKit.UIEdgeInsets : Swift.ExpressibleByFloatLiteral {
  public typealias FloatLiteralType = Swift.Double
  public init(floatLiteral value: UIKit.UIEdgeInsets.FloatLiteralType)
}
public enum GeoCodingResponseStatus {
  case ok
  case invalidRequest
  case overDailyLimit
  case overQueryLimit
  case requestDenied
  case unknownError
  case zeroResults
  case unknown(Swift.String)
}
extension OlaMapNavigationSDK.GeoCodingResponseStatus : Swift.RawRepresentable {
  public typealias RawValue = Swift.String
  public init?(rawValue: Swift.String)
  public var rawValue: Swift.String {
    get
  }
  public static func getValue(from value: Swift.String) -> OlaMapNavigationSDK.GeoCodingResponseStatus
}
public struct DemoOlaReversePlaceResponseModel : Swift.Codable {
  public let plusCode: OlaMapNavigationSDK.DemoPlusCode?
  public let result: [OlaMapNavigationSDK.DemoResultPlace]?
  public let warnings: [Swift.String]?
  public let errors: [Swift.String?]?
  public let status: Swift.String?
  public let message: Swift.String?
  public let errorMessage: Swift.String?
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct DemoPlusCode : Swift.Codable {
  public let compoundCode: Swift.String?, globalCode: Swift.String?
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct DemoResultPlace : Swift.Codable {
  public let addressComponents: [OlaMapNavigationSDK.DemoAddressComponent]?
  public let formattedAddress: Swift.String?
  public let geometry: OlaMapNavigationSDK.DemoGeometry?
  public let placeID: Swift.String?
  public let plusCode: OlaMapNavigationSDK.DemoPlusCode?
  public let types: [Swift.String]?
  public let layer: [Swift.String]?
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct DemoAddressComponent : Swift.Codable {
  public let longName: Swift.String?, shortName: Swift.String?
  public let types: [Swift.String]?
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct DemoGeometry : Swift.Codable {
  public let location: OlaMapNavigationSDK.DemoLocation?
  public let viewport: OlaMapNavigationSDK.DemoViewport?
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct DemoLocation : Swift.Codable {
  public let lat: Swift.Double?, lng: Swift.Double?
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct DemoViewport : Swift.Codable {
  public let northeast: OlaMapNavigationSDK.DemoLocation?, southwest: OlaMapNavigationSDK.DemoLocation?
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
extension UIKit.UIFont {
  @objc dynamic public var adjustedFont: UIKit.UIFont {
    @objc get
  }
}
extension OlaMapNavigationSDK.OlaMapService {
  public func getUserLocation() -> OlaMapNavigationSDK.OlaCoordinate?
  public func setCurrentLocationMarkerColor(_ color: UIKit.UIColor)
  public func addCurrentLocationButton(_ view: UIKit.UIView)
}
public struct OlaCoordinate : Swift.Equatable, Swift.CustomStringConvertible {
  public init(latitude: Swift.Double, longitude: Swift.Double)
  public init(_ cooridnate: CoreLocation.CLLocationCoordinate2D)
  public init(_ location: CoreLocation.CLLocation)
  public var getLatitude: Swift.Double {
    get
  }
  public var getLongitude: Swift.Double {
    get
  }
  public var inDelimeter: Swift.String {
    get
  }
  public func getCLCoordinate2D() -> CoreLocation.CLLocationCoordinate2D
  public var description: Swift.String {
    get
  }
  public static func == (lhs: OlaMapNavigationSDK.OlaCoordinate, rhs: OlaMapNavigationSDK.OlaCoordinate) -> Swift.Bool
}
public class OlaStepRoute {
  public init(start: OlaMapNavigationSDK.OlaCoordinate, end: OlaMapNavigationSDK.OlaCoordinate, color: UIKit.UIColor, width: Swift.Double = 4.5)
  @objc deinit
}
extension CoreLocation.CLLocationCoordinate2D {
  public func encodedString() -> Swift.String
  public func encodedUniqueString(_ str: Swift.String) -> Swift.String
}
extension UIKit.UIImage {
  public func roundedWithBorder(width: CoreFoundation.CGFloat, color: UIKit.UIColor) -> UIKit.UIImage?
}
public struct DemoOlaForwordPlaceResponseModel : Swift.Codable {
  public let geocoding: OlaMapNavigationSDK.DemoGeocoding?
  public let type: Swift.String?
  public let features: [OlaMapNavigationSDK.DemoFeature]?
  public let bbox: [Swift.Double]?
  public let message: Swift.String?
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct DemoFeature : Swift.Codable {
  public let type: Swift.String?
  public let geometry: OlaMapNavigationSDK.DemoPlaceGeometry?
  public let properties: OlaMapNavigationSDK.DemoProperties?
  public let bbox: [Swift.Double]?
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct DemoPlaceGeometry : Swift.Codable {
  public let type: Swift.String?
  public let coordinates: [Swift.Double]?
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct DemoProperties : Swift.Codable {
  public let id: Swift.String?, gid: Swift.String?, layer: Swift.String?, source: Swift.String?
  public let sourceID: Swift.String?, countryCode: Swift.String?, name: Swift.String?, postalcode: Swift.String?
  public let postalcodeGid: Swift.String?
  public let confidence: Swift.Double?
  public let matchType: Swift.String?
  public let distance: Swift.Int?
  public let accuracy: Swift.String?, country: Swift.String?, countryGid: Swift.String?, countryA: Swift.String?
  public let region: Swift.String?, regionGid: Swift.String?, locality: Swift.String?, localityGid: Swift.String?
  public let label: Swift.String?
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct DemoGeocoding : Swift.Codable {
  public let version: Swift.String?
  public let attribution: Swift.String?
  public let query: OlaMapNavigationSDK.DemoQuery?
  public let warnings: [Swift.String]?
  public let engine: OlaMapNavigationSDK.DemoEngine?
  public let timestamp: Swift.Int?
  public let service: Swift.String?
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct DemoEngine : Swift.Codable {
  public let name: Swift.String?, author: Swift.String?, version: Swift.String?
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct DemoQuery : Swift.Codable {
  public let text: Swift.String?
  public let size: Swift.Int?
  public let queryPrivate: Swift.Bool?
  public let focusPointLat: Swift.Double?, focusPointLon: Swift.Double?
  public let mock: Swift.Bool?
  public let lang: OlaMapNavigationSDK.DemoLang?
  public let querySize: Swift.Int?
  public let parser: Swift.String?
  public let parsedText: OlaMapNavigationSDK.DemoParsedText?
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct DemoLang : Swift.Codable {
  public let name: Swift.String?, iso6391: Swift.String?, iso6393: Swift.String?, via: Swift.String?
  public let defaulted: Swift.Bool?
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct DemoParsedText : Swift.Codable {
  public let postcode: Swift.String?, state: Swift.String?, county: Swift.String?, notProcessed: Swift.String?
  public let addressQuality: Swift.Int?
  public let subject: [Swift.String]?
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
extension OlaMapNavigationSDK.OlaMapService : Mapbox.MGLMapViewDelegate {
  @objc dynamic public func mapView(_ mapView: Mapbox.MGLMapView, tapOnCalloutFor annotation: any Mapbox.MGLAnnotation)
  @objc dynamic public func mapView(_ mapView: Mapbox.MGLMapView, didFailToLocateUserWithError error: any Swift.Error)
  @objc dynamic public func mapViewWillStartLoadingMap(_ mapView: Mapbox.MGLMapView)
  @objc dynamic public func mapViewRegionIsChanging(_ mapView: Mapbox.MGLMapView)
  @objc dynamic public func mapViewDidFailLoadingMap(_ mapView: Mapbox.MGLMapView, withError error: any Swift.Error)
  @objc dynamic public func mapView(_ mapView: Mapbox.MGLMapView, didAdd annotationViews: [Mapbox.MGLAnnotationView])
  @objc dynamic public func mapViewDidBecomeIdle(_ mapView: Mapbox.MGLMapView)
  @objc dynamic public func mapView(_ mapView: Mapbox.MGLMapView, regionDidChangeWith reason: Mapbox.MGLCameraChangeReason, animated: Swift.Bool)
  @objc dynamic public func mapView(_ mapView: Mapbox.MGLMapView, didChangeLocationManagerAuthorization manager: any Mapbox.MGLLocationManager)
  @objc dynamic public func mapView(_ mapView: Mapbox.MGLMapView, regionDidChangeAnimated animated: Swift.Bool)
  @objc dynamic public func mapView(_ mapView: Mapbox.MGLMapView, didChange mode: Mapbox.MGLUserTrackingMode, animated: Swift.Bool)
  @objc dynamic public func mapView(_ mapView: Mapbox.MGLMapView, didFailToLoadImage imageName: Swift.String) -> UIKit.UIImage?
  @objc dynamic public func mapView(_ mapView: Mapbox.MGLMapView, didFinishLoading style: Mapbox.MGLStyle)
  @objc dynamic public func mapViewDidFinishLoadingMap(_ mapView: Mapbox.MGLMapView)
  @objc dynamic public func mapViewDidFinishRenderingMap(_ mapView: Mapbox.MGLMapView, fullyRendered: Swift.Bool)
  @objc dynamic public func mapViewDidFinishRenderingFrame(_ mapView: Mapbox.MGLMapView, fullyRendered: Swift.Bool)
  @objc dynamic public func mapView(_ mapView: Mapbox.MGLMapView, viewFor annotation: any Mapbox.MGLAnnotation) -> Mapbox.MGLAnnotationView?
  @objc dynamic public func mapView(_ mapView: Mapbox.MGLMapView, annotationCanShowCallout annotation: any Mapbox.MGLAnnotation) -> Swift.Bool
  @objc dynamic public func mapView(_ mapView: Mapbox.MGLMapView, strokeColorForShapeAnnotation annotation: Mapbox.MGLShape) -> UIKit.UIColor
  @objc dynamic public func mapView(_ mapView: Mapbox.MGLMapView, lineWidthForPolylineAnnotation annotation: Mapbox.MGLPolyline) -> CoreFoundation.CGFloat
  @objc dynamic public func mapView(_ mapView: Mapbox.MGLMapView, alphaForShapeAnnotation annotation: Mapbox.MGLShape) -> CoreFoundation.CGFloat
  @objc dynamic public func mapView(_ mapView: Mapbox.MGLMapView, fillColorForPolygonAnnotation annotation: Mapbox.MGLPolygon) -> UIKit.UIColor
  @objc dynamic public func mapView(_ mapView: Mapbox.MGLMapView, didSelect annotation: any Mapbox.MGLAnnotation)
  @objc dynamic public func mapView(_ mapView: Mapbox.MGLMapView, didSelect annotationView: Mapbox.MGLAnnotationView)
  @objc dynamic public func mapView(_ mapView: Mapbox.MGLMapView, shouldChangeFrom oldCamera: Mapbox.MGLMapCamera, to newCamera: Mapbox.MGLMapCamera) -> Swift.Bool
  @objc dynamic public func mapView(_ mapView: Mapbox.MGLMapView, regionIsChangingWith reason: Mapbox.MGLCameraChangeReason)
}
public struct PolylineDecorator {
  public let strokeColor: UIKit.UIColor
  public let strokWidth: Swift.Double
  public let strokeAlpha: Swift.Double
  public init(strokeColor: UIKit.UIColor = .black, strokWidth: Swift.Double = 3.5, strokeAlpha: Swift.Double = 0.5)
}
public struct PopupDecoratedModel {
  public let font: UIKit.UIFont
  public let labelActiveColor: UIKit.UIColor
  public let labelInactiveColor: UIKit.UIColor
  public let activeBackgroudColor: UIKit.UIColor
  public let inactiveBackgroundColor: UIKit.UIColor
  public let height: CoreFoundation.CGFloat
  public let cornerRadius: CoreFoundation.CGFloat
  public init(font: UIKit.UIFont = UIFont.systemFont(ofSize: 16, weight: .medium), labelActiveColor: UIKit.UIColor = .black, labelInactiveColor: UIKit.UIColor = .white, activeBackgroudColor: UIKit.UIColor = .white, inactiveBackgroundColor: UIKit.UIColor = UIColor(hex: "#687986") ?? .gray, height: CoreFoundation.CGFloat = 32.0, cornerRadius: CoreFoundation.CGFloat = 4.0)
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @_Concurrency.MainActor(unsafe) public class PopupView : OlaMapNavigationSDK.OlaAnnotationView {
  @_Concurrency.MainActor(unsafe) convenience public init(identifier: Swift.String, model: OlaMapNavigationSDK.PopupDecoratedModel, text: Swift.String, isActive: Swift.Bool)
  @objc deinit
}
extension UIKit.UIColor {
  public static let olaGreen: UIKit.UIColor
  public static let lightBlue: UIKit.UIColor
}
extension UIKit.UIColor {
  convenience public init(hexString: Swift.String, alpha: CoreFoundation.CGFloat = 1.0)
  public func toHexString() -> Swift.String
}
public class OlaMapNavigationDirection {
  public init(_ config: OlaMapNavigationSDK.Configuration)
  public func route(payload: [Swift.String : Any]? = nil, headers: [Swift.String : Swift.String]? = nil, onCompltion: @escaping (_ result: Swift.Result<OlaMapNavigationSDK.OlaMapNavigationResponseModel, OlaMapNavigationSDK.OlaMapError>) -> Swift.Void)
  public func routeWithData(payload: [Swift.String : Any]? = nil, headers: [Swift.String : Swift.String]? = nil, onCompltion: @escaping (_ result: Swift.Result<Foundation.Data, OlaMapNavigationSDK.OlaMapError>) -> Swift.Void)
  public func routeEtaRefresh(jwtToken: Swift.String, origin: CoreLocation.CLLocation, destination: CoreLocation.CLLocation)
  @objc deinit
}
public struct OlaPlacesDetailResponseModel : Swift.Codable {
  public let htmlAttributions: [Swift.String]?
  public let result: OlaMapNavigationSDK.ResultModel?
  public let warnings: [Swift.String]?
  public let errors: [Swift.String]?
  public let status: Swift.String?
  public let message: Swift.String?
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct ResultModel : Swift.Codable {
  public let addressComponents: [OlaMapNavigationSDK.AddressComponents]?
  public let formattedAddress: Swift.String?
  public let geometry: OlaMapNavigationSDK.Geometry?
  public let placeId: Swift.String?
  public let reference: Swift.String?
  public let businessStatus: Swift.String?
  public let formattedPhoneNumber: Swift.String?
  public let icon: Swift.String?
  public let iconBackgroundColor: Swift.String?
  public let iconMaskBaseUri: Swift.String?
  public let internationalPhoneNumber: Swift.String?
  public let name: Swift.String?
  public let openingHours: OlaMapNavigationSDK.OpeningHours?
  public let plusCode: OlaMapNavigationSDK.PlusCode?
  public let rating: Swift.Int?
  public let reviews: [OlaMapNavigationSDK.Review]?
  public let types: [Swift.String]?
  public let url: Swift.String?
  public let userRatingsTotal: Swift.Int?
  public let utcOffset: Swift.Int?
  public let vicinity: Swift.String?
  public let website: Swift.String?
  public let photos: [Swift.String]?
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct Review : Swift.Codable {
  public let authorName: Swift.String?
  public let authorUrl: Swift.String?
  public let language: Swift.String?
  public let profilePhotoUrl: Swift.String?
  public let rating: Swift.Int?
  public let relativeTimeDescription: Swift.String?
  public let text: Swift.String?
  public let time: Swift.Int?
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct OpeningHours : Swift.Codable {
  public let openNow: Swift.Bool?
  public let periods: [Swift.String]?
  public let weekdayText: [Swift.String]?
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct AddressComponents : Swift.Codable {
  public let longName: Swift.String?
  public let shortName: Swift.String?
  public let types: [Swift.String]?
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
@_hasMissingDesignatedInitializers public class PlacesDetailService {
  @objc deinit
}
public protocol PlacesDetailProtocol {
  func search(_ placeId: Swift.String, _ text: Swift.String, payload: [Swift.String : Swift.String]?, headers: [Swift.String : Swift.String]?, onCompletion: @escaping (_ result: Swift.Result<OlaMapNavigationSDK.OlaPlacesDetailResponseModel, OlaMapNavigationSDK.OlaMapError>) -> Swift.Void)
}
public class OlaPlacesDetail : OlaMapNavigationSDK.PlacesDetailProtocol {
  public init()
  public func search(_ placeId: Swift.String, _ text: Swift.String, payload: [Swift.String : Swift.String]? = nil, headers: [Swift.String : Swift.String]? = nil, onCompletion: @escaping (_ result: Swift.Result<OlaMapNavigationSDK.OlaPlacesDetailResponseModel, OlaMapNavigationSDK.OlaMapError>) -> Swift.Void)
  @objc deinit
}
@objc @_hasMissingDesignatedInitializers @_Concurrency.MainActor(unsafe) public class MapPickerViewController : UIKit.UIViewController {
  @_Concurrency.MainActor(unsafe) final public let viewModel: OlaMapNavigationSDK.MapPickerViewModel?
  @_Concurrency.MainActor(unsafe) public init(_ viewModel: OlaMapNavigationSDK.MapPickerViewModel)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func viewDidLoad()
  @_Concurrency.MainActor(unsafe) public func setStyle(_ isLocale: Swift.Bool)
  @objc deinit
}
@_inheritsConvenienceInitializers @objc(MBEndOfRouteContentView) @_Concurrency.MainActor(unsafe) open class EndOfRouteContentView : UIKit.UIView {
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
@_inheritsConvenienceInitializers @objc(MBEndOfRouteTitleLabel) @_Concurrency.MainActor(unsafe) open class EndOfRouteTitleLabel : OlaMapNavigationSDK.StylableLabel {
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
@_inheritsConvenienceInitializers @objc(MBEndOfRouteStaticLabel) @_Concurrency.MainActor(unsafe) open class EndOfRouteStaticLabel : OlaMapNavigationSDK.StylableLabel {
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
@_inheritsConvenienceInitializers @objc(MBEndOfRouteCommentView) @_Concurrency.MainActor(unsafe) open class EndOfRouteCommentView : OlaMapNavigationSDK.StylableTextView {
  @available(iOS 7.0, *)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreFoundation.CGRect, textContainer: UIKit.NSTextContainer?)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
@_inheritsConvenienceInitializers @objc(MBEndOfRouteButton) @_Concurrency.MainActor(unsafe) open class EndOfRouteButton : OlaMapNavigationSDK.StylableButton {
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
extension OlaMapNavigationSDK.OlaMapService {
  public func deleteMarker(id: Swift.String)
  public func setMarker(at coordinate: OlaMapNavigationSDK.OlaCoordinate, marker: OlaMapNavigationSDK.OlaMapMarker)
  public func isOlaAnnotatinonLayer(_ id: Swift.String) -> Swift.Bool
  public func hideMarker(_ marker: OlaMapNavigationSDK.OlaMapMarker)
}
public enum SpokenInstructionErrorCode : Swift.Int {
  case unknown
  case audioPlayerFailedToPlay
  case emptyMapboxSpeechResponse
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
public enum MBErrorCode : Swift.Int {
  case unknown
  case spokenInstructionFailed
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
public enum OlaMapStyle {
  case lightEnglish
  case darkEnglish
  case lightKannada
  case darkKannada
  case lightHindi
  case darkHindi
  case lightMarathi
  case darkMarathi
  case lightTamil
  case darkTamil
  case lighTelgu
  case darkTelgu
  public func getURL(_ config: OlaMapNavigationSDK.Configuration) -> Foundation.URL?
  public static func == (a: OlaMapNavigationSDK.OlaMapStyle, b: OlaMapNavigationSDK.OlaMapStyle) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
extension OlaMapNavigationSDK.BottomBannerView {
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func traitCollectionDidChange(_ previousTraitCollection: UIKit.UITraitCollection?)
}
public let MBSpeechErrorDomain: Swift.String
@objc(MBSpeechSynthesizer) open class SpeechSynthesizer : ObjectiveC.NSObject {
  public typealias CompletionHandler = (_ data: Foundation.Data?, _ error: Foundation.NSError?) -> Swift.Void
  @objc(sharedSpeechSynthesizer) public static let shared: OlaMapNavigationSDK.SpeechSynthesizer
  @objc public init(accessToken: Swift.String?, host: Swift.String?)
  @objc convenience public init(accessToken: Swift.String?)
  @discardableResult
  @objc(audioDataWithOptions:completionHandler:) open func audioData(with options: OlaMapNavigationSDK.SpeechOptions, completionHandler: @escaping OlaMapNavigationSDK.SpeechSynthesizer.CompletionHandler) -> Foundation.URLSessionDataTask
  @objc(URLForSynthesizingSpeechWithOptions:) open func url(forSynthesizing options: OlaMapNavigationSDK.SpeechOptions) -> Foundation.URL
  @objc deinit
}
extension OlaMapDirectionFramework.RouteStep {
  public var isMotorway: Swift.Bool {
    get
  }
  public var lastInstruction: OlaMapDirectionFramework.SpokenInstruction? {
    get
  }
}
public enum ConfigEnvironment {
  case stage
  case production
  public var text: Swift.String {
    get
  }
  public static func == (a: OlaMapNavigationSDK.ConfigEnvironment, b: OlaMapNavigationSDK.ConfigEnvironment) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
final public class Configuration {
  final public var baseURL: Swift.String?
  final public var tileURL: Swift.String?
  public init(_ env: OlaMapNavigationSDK.ConfigEnvironment)
  @objc deinit
}
public class OlaVisualInstruction {
  final public let primaryText: Swift.String?
  final public let secondaryText: Swift.String?
  final public let tertiaryInstruction: Swift.String?
  final public let distanceAlongStep: CoreLocation.CLLocationDistance?
  final public let formatedDistanceAlongStep: Swift.String?
  final public let currentStep: Swift.Int
  final public let maneuver: OlaMapNavigationSDK.OlaManeuverType
  final public let upComingInstruction: Swift.String?
  final public let upComingManeuver: OlaMapNavigationSDK.OlaManeuverType?
  public init(primaryText: Swift.String?, secondaryText: Swift.String?, tertiaryInstruction: Swift.String?, distanceAlongStep: Swift.Double?, formatedDistanceAlongStep: Swift.String?, currentStep: Swift.Int, maneuver: OlaMapNavigationSDK.OlaManeuverType, upComingInstruction: Swift.String?, upComingManeuver: OlaMapNavigationSDK.OlaManeuverType?)
  @objc deinit
}
public class OlaInstruction : Swift.CustomStringConvertible {
  final public let text: Swift.String?
  final public let duration: Foundation.TimeInterval
  final public let durationRemaining: Foundation.TimeInterval
  final public let distanceRemaining: CoreLocation.CLLocationDistance
  final public let formattedDistanceRemaining: Swift.String
  final public let arrivalTime: Swift.String?
  public init(_ text: Swift.String?, _ duration: Foundation.TimeInterval, _ durationRemaining: Foundation.TimeInterval, _ distanceRemaining: CoreLocation.CLLocationDistance, _ arrivalTime: Swift.String?, _ formattedDistanceRemaining: Swift.String)
  public var description: Swift.String {
    get
  }
  @objc deinit
}
public enum OlaManeuverType : Swift.String {
  case none
  case depart
  case turn
  case `continue`
  case passNameChange
  case merge
  case takeOnRamp
  case takeOffRamp
  case reachFork
  case reachEnd
  case useLane
  case takeRoundabout
  case takeRotary
  case turnAtRoundabout
  case exitRoundabout
  case exitRotary
  case heedWarning
  case arrive
  case passWaypoint
  case turnRight
  case turnLeft
  case turnSharpRight
  case turnSharpLeft
  case turnSlightRight
  case turnSlightLeft
  case uturn
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public struct InstructionList : Swift.CustomStringConvertible {
  public let maneuver: OlaMapNavigationSDK.OlaManeuverType
  public let instruction: Swift.String
  public let distance: CoreLocation.CLLocationDistance
  public let formattedDistance: Swift.String
  public var description: Swift.String {
    get
  }
}
extension Mapbox.MGLMapView {
  @_Concurrency.MainActor(unsafe) public var showsTraffic: Swift.Bool {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var showsIncidents: Swift.Bool {
    get
    set
  }
}
extension Swift.Dictionary where Key == Swift.Int, Value : Foundation.NSExpression {
  public func multiplied(by factor: Swift.Double) -> Swift.Dictionary<Key, Value>
}
@_inheritsConvenienceInitializers @objc(MBNextInstructionLabel) @_Concurrency.MainActor(unsafe) open class NextInstructionLabel : OlaMapNavigationSDK.InstructionLabel {
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @IBDesignable @objc(MBNextBannerView) @_Concurrency.MainActor(unsafe) open class NextBannerView : UIKit.UIView {
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func prepareForInterfaceBuilder()
  @objc(updateForVisualInstructionBanner:) @_Concurrency.MainActor(unsafe) public func update(for visualInstruction: OlaMapDirectionFramework.VisualInstructionBanner?)
  @_Concurrency.MainActor(unsafe) public func show()
  @_Concurrency.MainActor(unsafe) public func hide()
  @objc deinit
}
extension Swift.Double {
  public var miles: Swift.Double {
    get
  }
  public var feet: Swift.Double {
    get
  }
  public var yards: Swift.Double {
    get
  }
  public var kilometers: Swift.Double {
    get
  }
  public func inMiles() -> Swift.Double
  public func inYards() -> Swift.Double
}
extension Foundation.NSAttributedString.Key {
  public static let quantity: Foundation.NSAttributedString.Key
}
@objc(MBDistanceFormatter) open class DistanceFormatter : Foundation.LengthFormatter {
  public var unit: Foundation.LengthFormatter.Unit {
    get
  }
  @objc public init(approximate: Swift.Bool = false)
  @objc required dynamic public init?(coder decoder: Foundation.NSCoder)
  @objc override dynamic open func encode(with aCoder: Foundation.NSCoder)
  @objc public func string(from distance: CoreLocation.CLLocationDistance) -> Swift.String
  @objc override dynamic open func string(fromMeters numberInMeters: Swift.Double) -> Swift.String
  @available(iOS 10.0, *)
  @objc(measurementOfDistance:) public func measurement(of distance: CoreLocation.CLLocationDistance) -> Foundation.Measurement<Foundation.UnitLength>
  @objc override dynamic open func attributedString(for obj: Any, withDefaultAttributes attrs: [Foundation.NSAttributedString.Key : Any]? = nil) -> Foundation.NSAttributedString?
  @objc deinit
}
public struct MNConfig {
  public var routeLineColor: UIKit.UIColor
  public var routeLineAlpha: Swift.Double
  public var routeLineColorForCApp: UIKit.UIColor
  public var routeLineCasingColor: UIKit.UIColor
  public var routeLineCasingColorCApp: UIKit.UIColor
  public var routeLineCasingAlpha: Swift.Double
  public var routeLineAlternativeColor: UIKit.UIColor
  public var routeLineAlternativeColorCApp: UIKit.UIColor
  public var routeLineAlternativeAlpha: Swift.Double
  public var routeLineCasingAlternativeColor: UIKit.UIColor
  public var routeLineCasingAlternativeColorCApp: UIKit.UIColor
  public var routeLineCasingAlternativeAlpha: Swift.Double
  public var routeArrowColor: UIKit.UIColor
  public var routeArrowCasingColor: UIKit.UIColor
  public init()
}
extension Foundation.URLRequest {
  public func cURL(pretty: Swift.Bool = false) -> Swift.String
}
@_inheritsConvenienceInitializers @objc(MBDayStyle) open class DayStyle : OlaMapNavigationSDK.Style {
  @objc required dynamic public init()
  @objc override open func apply()
  @objc deinit
}
@_inheritsConvenienceInitializers @objc(MBNightStyle) open class NightStyle : OlaMapNavigationSDK.DayStyle {
  @objc required dynamic public init()
  @objc override open func apply()
  @objc deinit
}
@objc(MBRouteProgress) open class RouteProgress : ObjectiveC.NSObject {
  @objc final public let route: OlaMapDirectionFramework.Route
  @objc public var legIndex: Swift.Int {
    @objc get
    @objc set
  }
  @objc public var currentLeg: OlaMapDirectionFramework.RouteLeg {
    @objc get
  }
  public var isFinalLeg: Swift.Bool {
    get
  }
  @objc public var distanceTraveled: CoreLocation.CLLocationDistance {
    @objc get
  }
  @objc public var durationRemaining: Foundation.TimeInterval {
    @objc get
  }
  @objc public var fractionTraveled: Swift.Double {
    @objc get
  }
  @objc public var distanceRemaining: CoreLocation.CLLocationDistance {
    @objc get
  }
  @objc public var remainingWaypoints: [OlaMapDirectionFramework.Waypoint] {
    @objc get
  }
  @objc public var currentLegProgress: OlaMapNavigationSDK.RouteLegProgress
  public typealias TimedCongestionLevel = (OlaMapDirectionFramework.CongestionLevel, Foundation.TimeInterval)
  public var congestionTravelTimesSegmentsByStep: [[[OlaMapNavigationSDK.RouteProgress.TimedCongestionLevel]]]
  public var congestionTimesPerStep: [[[OlaMapDirectionFramework.CongestionLevel : Foundation.TimeInterval]]]
  @objc public init(route: OlaMapDirectionFramework.Route, legIndex: Swift.Int = 0, spokenInstructionIndex: Swift.Int = 0)
  public var averageCongestionLevelRemainingOnLeg: OlaMapDirectionFramework.CongestionLevel? {
    get
  }
  @objc deinit
}
@objc(MBRouteLegProgress) open class RouteLegProgress : ObjectiveC.NSObject {
  @objc final public let leg: OlaMapDirectionFramework.RouteLeg
  @objc public var stepIndex: Swift.Int {
    @objc get
    @objc set
  }
  @objc public var remainingSteps: [OlaMapDirectionFramework.RouteStep] {
    @objc get
  }
  @objc public var distanceTraveled: CoreLocation.CLLocationDistance {
    @objc get
  }
  @objc public var durationRemaining: Foundation.TimeInterval {
    @objc get
  }
  @objc public var distanceRemaining: CoreLocation.CLLocationDistance {
    @objc get
  }
  @objc public var fractionTraveled: Swift.Double {
    @objc get
  }
  @objc public var userHasArrivedAtWaypoint: Swift.Bool
  @objc public func stepBefore(_ step: OlaMapDirectionFramework.RouteStep) -> OlaMapDirectionFramework.RouteStep?
  @objc public func stepAfter(_ step: OlaMapDirectionFramework.RouteStep) -> OlaMapDirectionFramework.RouteStep?
  @objc public var priorStep: OlaMapDirectionFramework.RouteStep? {
    @objc get
  }
  @objc public var currentStep: OlaMapDirectionFramework.RouteStep {
    @objc get
  }
  @objc public var upComingStep: OlaMapDirectionFramework.RouteStep? {
    @objc get
  }
  @objc public var followOnStep: OlaMapDirectionFramework.RouteStep? {
    @objc get
  }
  @objc public func isCurrentStep(_ step: OlaMapDirectionFramework.RouteStep) -> Swift.Bool
  @objc public var currentStepProgress: OlaMapNavigationSDK.RouteStepProgress
  @objc public init(leg: OlaMapDirectionFramework.RouteLeg, stepIndex: Swift.Int = 0, spokenInstructionIndex: Swift.Int = 0)
  @objc public var nearbyCoordinates: [CoreLocation.CLLocationCoordinate2D] {
    @objc get
  }
  @objc deinit
}
@objc(MBRouteStepProgress) open class RouteStepProgress : ObjectiveC.NSObject {
  @objc final public let step: OlaMapDirectionFramework.RouteStep
  @objc public var distanceTraveled: Swift.Double
  @objc public var userDistanceToManeuverLocation: Swift.Double
  @objc public var distanceRemaining: CoreLocation.CLLocationDistance {
    @objc get
  }
  @objc public var fractionTraveled: Swift.Double {
    @objc get
  }
  @objc public var durationRemaining: Foundation.TimeInterval {
    @objc get
  }
  @objc public init(step: OlaMapDirectionFramework.RouteStep, spokenInstructionIndex: Swift.Int = 0)
  @objc public var intersectionsIncludingUpcomingManeuverIntersection: [OlaMapDirectionFramework.Intersection]?
  @objc public var upcomingIntersection: OlaMapDirectionFramework.Intersection? {
    @objc get
  }
  @objc public var intersectionIndex: Swift.Int
  @objc public var currentIntersection: OlaMapDirectionFramework.Intersection? {
    @objc get
  }
  @objc public var intersectionDistances: Swift.Array<CoreLocation.CLLocationDistance>?
  public var userDistanceToUpcomingIntersection: CoreLocation.CLLocationDistance?
  @objc public var visualInstructionIndex: Swift.Int
  @objc public var remainingVisualInstructions: [OlaMapDirectionFramework.VisualInstructionBanner]? {
    @objc get
  }
  @objc public var spokenInstructionIndex: Swift.Int
  @objc public var remainingSpokenInstructions: [OlaMapDirectionFramework.SpokenInstruction]? {
    @objc get
  }
  @objc public var currentSpokenInstruction: OlaMapDirectionFramework.SpokenInstruction? {
    @objc get
  }
  @objc public var currentVisualInstruction: OlaMapDirectionFramework.VisualInstructionBanner? {
    @objc get
  }
  @objc deinit
}
extension Foundation.Bundle {
  public var backgroundModes: Swift.Set<Swift.String> {
    get
  }
}
extension CoreFoundation.CGPoint {
  public func distance(to: CoreFoundation.CGPoint) -> CoreFoundation.CGFloat
}
@objc(MBRouteControllerDelegate) public protocol RouteControllerDelegate {
  @objc(routeController:shouldRerouteFromLocation:) optional func routeController(_ routeController: OlaMapNavigationSDK.RouteController, shouldRerouteFrom location: CoreLocation.CLLocation) -> Swift.Bool
  @objc(routeController:willRerouteFromLocation:) optional func routeController(_ routeController: OlaMapNavigationSDK.RouteController, willRerouteFrom location: CoreLocation.CLLocation)
  @objc(routeController:shouldDiscardLocation:) optional func routeController(_ routeController: OlaMapNavigationSDK.RouteController, shouldDiscard location: CoreLocation.CLLocation) -> Swift.Bool
  @objc(routeController:didRerouteAlongRoute:reason:) optional func routeController(_ routeController: OlaMapNavigationSDK.RouteController, didRerouteAlong route: OlaMapDirectionFramework.Route, reason: OlaMapNavigationSDK.RouteController.RerouteReason)
  @objc(routeController:didFailToRerouteWithError:) optional func routeController(_ routeController: OlaMapNavigationSDK.RouteController, didFailToRerouteWith error: any Swift.Error)
  @objc(routeController:didUpdateLocations:) optional func routeController(_ routeController: OlaMapNavigationSDK.RouteController, didUpdate locations: [CoreLocation.CLLocation])
  @objc(routeController:didArriveAtWaypoint:) optional func routeController(_ routeController: OlaMapNavigationSDK.RouteController, didArriveAt waypoint: OlaMapDirectionFramework.Waypoint) -> Swift.Bool
  @objc(routeController:shouldPreventReroutesWhenArrivingAtWaypoint:) optional func routeController(_ routeController: OlaMapNavigationSDK.RouteController, shouldPreventReroutesWhenArrivingAt waypoint: OlaMapDirectionFramework.Waypoint) -> Swift.Bool
  @objc(routeControllerShouldDisableBatteryMonitoring:) optional func routeControllerShouldDisableBatteryMonitoring(_ routeController: OlaMapNavigationSDK.RouteController) -> Swift.Bool
  @objc(routeController:didUpdateUserLocation:) optional func routeControllerUpdateUserLocation(_ routeController: OlaMapNavigationSDK.RouteController, didUpdateUserLocation locations: CoreLocation.CLLocation)
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @IBDesignable @objc(MBLanesView) @_Concurrency.MainActor(unsafe) open class LanesView : UIKit.UIView {
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func prepareForInterfaceBuilder()
  @objc(updateForVisualInstructionBanner:) @_Concurrency.MainActor(unsafe) public func update(for visualInstruction: OlaMapDirectionFramework.VisualInstructionBanner?)
  @_Concurrency.MainActor(unsafe) public func show(animated: Swift.Bool = true)
  @_Concurrency.MainActor(unsafe) public func hide()
  @objc deinit
}
@objc(MBRouteController) open class RouteController : ObjectiveC.NSObject, OlaMapNavigationSDK.Router {
  public var routeControllerProactiveReroutingInterval: Swift.Double
  public var shouldReturnTestingETAUpdateReroutes: Swift.Bool
  public var shouldCheckForRerouteInLastMinutes: Swift.Bool
  @objc weak public var delegate: (any OlaMapNavigationSDK.RouteControllerDelegate)?
  @objc public var locationManager: OlaMapNavigationSDK.NavigationLocationManager! {
    @objc get
    @objc set
  }
  @objc public var directions: OlaMapDirectionFramework.Directions
  @objc public var isDeadReckoningEnabled: Swift.Bool
  @objc public var reroutesProactively: Swift.Bool
  public var tunnelIntersectionManager: OlaMapNavigationSDK.TunnelIntersectionManager
  @objc public var routeProgress: OlaMapNavigationSDK.RouteProgress {
    @objc get
    @objc set
  }
  @objc public var usesDefaultUserInterface: Swift.Bool
  @objc public enum RerouteReason : Swift.Int, Swift.CustomStringConvertible {
    case ETAUpdate
    case divertedFromRoute
    case fasterRoute
    public var description: Swift.String {
      get
    }
    public init?(rawValue: Swift.Int)
    public typealias RawValue = Swift.Int
    public var rawValue: Swift.Int {
      get
    }
  }
  @objc public var userHasArrivedAtDestinationRegion: Swift.Bool
  @objc(initWithRoute:directions:locationManager:) public init(along route: OlaMapDirectionFramework.Route, directions: OlaMapDirectionFramework.Directions = Directions(), locationManager: OlaMapNavigationSDK.NavigationLocationManager = NavigationLocationManager())
  @objc deinit
  @objc public func resume()
  @objc public func suspendLocationUpdates()
  @objc public func endNavigation()
  @objc public var location: CoreLocation.CLLocation? {
    @objc get
  }
  @objc public var reroutingTolerance: CoreLocation.CLLocationDistance {
    @objc get
  }
}
extension OlaMapNavigationSDK.RouteController : CoreLocation.CLLocationManagerDelegate {
  @objc dynamic public func locationManager(_ manager: CoreLocation.CLLocationManager, didUpdateHeading newHeading: CoreLocation.CLHeading)
  @objc dynamic public func locationManager(_ manager: CoreLocation.CLLocationManager, didUpdateLocations locations: [CoreLocation.CLLocation])
  @objc dynamic public func userIsOnRoute(_ location: CoreLocation.CLLocation) -> Swift.Bool
}
extension OlaMapNavigationSDK.RouteController : OlaMapNavigationSDK.TunnelIntersectionManagerDelegate {
  @objc dynamic public func tunnelIntersectionManager(_ manager: OlaMapNavigationSDK.TunnelIntersectionManager, willEnableAnimationAt location: CoreLocation.CLLocation)
  @objc dynamic public func tunnelIntersectionManager(_ manager: OlaMapNavigationSDK.TunnelIntersectionManager, willDisableAnimationAt location: CoreLocation.CLLocation)
}
@_hasMissingDesignatedInitializers @available(iOS 12.0, *)
@objc(MBCarPlayNavigationViewController) @_Concurrency.MainActor(unsafe) public class CarPlayNavigationViewController : UIKit.UIViewController, Mapbox.MGLMapViewDelegate {
  @objc @_Concurrency.MainActor(unsafe) weak public var carPlayNavigationDelegate: (any OlaMapNavigationSDK.CarPlayNavigationDelegate)?
  @objc @_Concurrency.MainActor(unsafe) public var drivingSide: OlaMapDirectionFramework.DrivingSide
  @objc(initForRouteController:mapTemplate:interfaceController:) @_Concurrency.MainActor(unsafe) public init(for routeController: OlaMapNavigationSDK.RouteController, mapTemplate: CarPlay.CPMapTemplate, interfaceController: CarPlay.CPInterfaceController)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func viewDidLoad()
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func viewWillDisappear(_ animated: Swift.Bool)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func viewSafeAreaInsetsDidChange()
  @objc(startNavigationSessionForTrip:) @_Concurrency.MainActor(unsafe) public func startNavigationSession(for trip: CarPlay.CPTrip)
  @objc(exitNavigationByCanceling:) @_Concurrency.MainActor(unsafe) public func exitNavigation(byCanceling canceled: Swift.Bool = false)
  @objc @_Concurrency.MainActor(unsafe) public func showFeedback()
  @objc @_Concurrency.MainActor(unsafe) public var tracksUserCourse: Swift.Bool {
    @objc get
    @objc set
  }
  @_Concurrency.MainActor(unsafe) public func beginPanGesture()
  @_Concurrency.MainActor(unsafe) @objc public func mapView(_ mapView: Mapbox.MGLMapView, didFinishLoading style: Mapbox.MGLStyle)
  @objc deinit
}
@available(iOS 12.0, *)
extension OlaMapNavigationSDK.CarPlayNavigationViewController : OlaMapNavigationSDK.StyleManagerDelegate {
  @_Concurrency.MainActor(unsafe) @objc dynamic public func locationFor(styleManager: OlaMapNavigationSDK.StyleManager) -> CoreLocation.CLLocation?
  @_Concurrency.MainActor(unsafe) @objc dynamic public func styleManager(_ styleManager: OlaMapNavigationSDK.StyleManager, didApply style: OlaMapNavigationSDK.Style)
  @_Concurrency.MainActor(unsafe) @objc dynamic public func styleManagerDidRefreshAppearance(_ styleManager: OlaMapNavigationSDK.StyleManager)
}
@available(iOS 12.0, *)
extension OlaMapNavigationSDK.CarPlayNavigationViewController : OlaMapNavigationSDK.RouteControllerDelegate {
  @_Concurrency.MainActor(unsafe) @objc dynamic public func routeController(_ routeController: OlaMapNavigationSDK.RouteController, didArriveAt waypoint: OlaMapDirectionFramework.Waypoint) -> Swift.Bool
}
@available(iOS 12.0, *)
@objc(MBNavigationCarPlayDelegate) public protocol CarPlayNavigationDelegate {
  @objc(carPlayNavigationViewControllerDidDismiss:byCanceling:) func carPlayNavigationViewControllerDidDismiss(_ carPlayNavigationViewController: OlaMapNavigationSDK.CarPlayNavigationViewController, byCanceling canceled: Swift.Bool)
  @objc func carPlayNavigationViewControllerDidArrive(_ carPlayNavigationViewController: OlaMapNavigationSDK.CarPlayNavigationViewController)
}
public enum PolylineType : Swift.Int {
  case solid
  case dashed
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
extension OlaMapNavigationSDK.OlaMapService {
  public func showSegmentedPolyline(_ routeInfo: OlaMapNavigationSDK.OlaMapNavigationResponseModel, onCompletion: (_ polylineID: [Swift.String]) -> Swift.Void)
  public func showTrafficPolyline(encodedPolyline: Swift.String, travelAdvisory: Swift.String, onCompletion: (_ polylineID: [Swift.String]) -> Swift.Void)
}
extension OlaMapNavigationSDK.OlaMapService {
  public func showPolyline(identifier: Swift.String, _ type: OlaMapNavigationSDK.PolylineType = .solid, _ coordinates: [OlaMapNavigationSDK.OlaCoordinate], _ color: UIKit.UIColor? = nil, _ width: CoreFoundation.CGFloat? = nil, _ alpha: CoreFoundation.CGFloat? = nil, _ isTrafficSupported: Swift.Bool = false)
  public func showPolyline(_ segment: OlaMapNavigationSDK.OlaStepRoute)
}
@objc(MBReplayLocationManager) open class ReplayLocationManager : OlaMapNavigationSDK.NavigationLocationManager {
  @objc public var speedMultiplier: Swift.Double
  @objc public var locations: [CoreLocation.CLLocation]! {
    @objc get
    @objc set
  }
  @objc override dynamic open var location: CoreLocation.CLLocation? {
    @objc get
  }
  public init(locations: [CoreLocation.CLLocation])
  @objc deinit
  @objc override dynamic open func startUpdatingLocation()
  @objc override dynamic open func stopUpdatingLocation()
}
@objc @_Concurrency.MainActor(unsafe) open class OlaAnnotationView : Mapbox.MGLAnnotationView {
  @_Concurrency.MainActor(unsafe) public init(identifier: Swift.String)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
  @_Concurrency.MainActor(unsafe) public var didSelectOnAnnotation: ((_ identifier: Swift.String) -> Swift.Void)?
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func prepareForReuse()
  @_Concurrency.MainActor(unsafe) public func addOffset(point: CoreFoundation.CGVector)
  @_Concurrency.MainActor(unsafe) public func updateColor(_ color: UIKit.UIColor)
  @_Concurrency.MainActor(unsafe) public func updateIdentifier(_ id: Swift.String)
  @_Concurrency.MainActor(unsafe) public func setRotate(_ value: Swift.Double)
  @objc deinit
}
extension OlaMapDirectionFramework.RouteOptions {
  public func without(waypoint: OlaMapDirectionFramework.Waypoint) -> OlaMapDirectionFramework.RouteOptions
}
public enum OlaMapGesture {
  case pan
  case oneFingerZoom
  case pinch
  case rotate
  case tilt
  case zoomIn
  case zoomOut
  case cancelled
  case resetNorth
  case programatic
  case unknown
  public static func == (a: OlaMapNavigationSDK.OlaMapGesture, b: OlaMapNavigationSDK.OlaMapGesture) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
@_hasMissingDesignatedInitializers public class PlaceService {
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @objc(MBUserPuckCourseView) @_Concurrency.MainActor(unsafe) public class UserPuckCourseView : UIKit.UIView {
  @_Concurrency.MainActor(unsafe) public func update(location: CoreLocation.CLLocation, pitch: CoreFoundation.CGFloat, direction: CoreLocation.CLLocationDegrees, animated: Swift.Bool, tracksUserCourse: Swift.Bool)
  @objc @_Concurrency.MainActor(unsafe) dynamic public var puckColor: UIKit.UIColor {
    @objc get
    @objc set
  }
  @objc @_Concurrency.MainActor(unsafe) dynamic public var fillColor: UIKit.UIColor {
    @objc get
    @objc set
  }
  @objc @_Concurrency.MainActor(unsafe) dynamic public var shadowColor: UIKit.UIColor {
    @objc get
    @objc set
  }
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @objc deinit
}
extension OlaMapNavigationSDK.OlaMapService {
  public func isOlaAnnotation(byId id: Swift.String) -> Swift.Bool
  public func setCustomAnnotationMarker(at olaCoordinates: [OlaMapNavigationSDK.OlaCoordinate], annotationView: OlaMapNavigationSDK.OlaAnnotationView)
  public func setAnnotationMarker(at olaCoordinates: OlaMapNavigationSDK.OlaCoordinate, annotationView: OlaMapNavigationSDK.OlaAnnotationView, identifier: Swift.String)
  public func removeAnnotations()
  public func removeAnnotation(by id: Swift.String)
  public func updateAnnotationMarker(at: OlaMapNavigationSDK.OlaCoordinate, annotationView: OlaMapNavigationSDK.OlaAnnotationView, identifier: Swift.String)
}
@objc(MBMapboxVoiceController) open class MapboxVoiceController : OlaMapNavigationSDK.RouteVoiceController, AVFAudio.AVAudioPlayerDelegate {
  @objc public var timeoutIntervalForRequest: Swift.Double
  @objc public var stepsAheadToCache: Swift.Int
  @objc public var audioPlayer: AVFAudio.AVAudioPlayer?
  @objc public init(speechClient: OlaMapNavigationSDK.SpeechSynthesizer = SpeechSynthesizer(accessToken: nil), dataCache: any OlaMapNavigationSDK.BimodalDataCache = DataCache(), audioPlayerType: AVFAudio.AVAudioPlayer.Type? = nil)
  @objc deinit
  @objc public func audioPlayerDidFinishPlaying(_ player: AVFAudio.AVAudioPlayer, successfully flag: Swift.Bool)
  @objc override open func didPassSpokenInstructionPoint(notification: Foundation.NSNotification)
  @objc override open func speak(_ instruction: OlaMapDirectionFramework.SpokenInstruction)
  @objc open func speakWithDefaultSpeechSynthesizer(_ instruction: OlaMapDirectionFramework.SpokenInstruction, error: (any Swift.Error)?)
  @objc open func fetchAndSpeak(instruction: OlaMapDirectionFramework.SpokenInstruction)
  @objc open func downloadAndCacheSpokenInstruction(instruction: OlaMapDirectionFramework.SpokenInstruction)
  @objc open func play(_ data: Foundation.Data)
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @_Concurrency.MainActor(unsafe) public class BikeAnnotationView : OlaMapNavigationSDK.OlaAnnotationView {
  @_Concurrency.MainActor(unsafe) convenience public init(identifier: Swift.String, bikeImage: UIKit.UIImage?, color: UIKit.UIColor? = nil, opacity: CoreFoundation.CGFloat? = nil)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func layoutSubviews()
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func setSelected(_ selected: Swift.Bool, animated: Swift.Bool)
  @objc deinit
}
extension UIKit.UIWindow {
  @_Concurrency.MainActor(unsafe) public func capture() -> UIKit.UIImage?
}
@objc @_inheritsConvenienceInitializers open class NavigationRouteOptions : OlaMapDirectionFramework.RouteOptions {
  @objc required public init(waypoints: [OlaMapDirectionFramework.Waypoint], profileIdentifier: OlaMapDirectionFramework.MBDirectionsProfileIdentifier? = .automobileAvoidingTraffic)
  @objc convenience public init(locations: [CoreLocation.CLLocation], profileIdentifier: OlaMapDirectionFramework.MBDirectionsProfileIdentifier? = .automobileAvoidingTraffic)
  @objc convenience public init(coordinates: [CoreLocation.CLLocationCoordinate2D], profileIdentifier: OlaMapDirectionFramework.MBDirectionsProfileIdentifier? = .automobileAvoidingTraffic)
  @objc required public init?(coder decoder: Foundation.NSCoder)
  @objc deinit
}
@_inheritsConvenienceInitializers @objc(MBNavigationMatchOptions) open class NavigationMatchOptions : OlaMapDirectionFramework.MatchOptions {
  @objc required public init(waypoints: [OlaMapDirectionFramework.Waypoint], profileIdentifier: OlaMapDirectionFramework.MBDirectionsProfileIdentifier? = .automobileAvoidingTraffic)
  @objc convenience public init(locations: [CoreLocation.CLLocation], profileIdentifier: OlaMapDirectionFramework.MBDirectionsProfileIdentifier? = .automobileAvoidingTraffic)
  @objc convenience public init(coordinates: [CoreLocation.CLLocationCoordinate2D], profileIdentifier: OlaMapDirectionFramework.MBDirectionsProfileIdentifier? = .automobileAvoidingTraffic)
  @objc required public init?(coder decoder: Foundation.NSCoder)
  @objc deinit
}
@objc(MBInstructionsBannerViewDelegate) public protocol InstructionsBannerViewDelegate {
  @objc(didTapInstructionsBanner:) optional func didTapInstructionsBanner(_ sender: OlaMapNavigationSDK.BaseInstructionsBannerView)
  @objc(didDragInstructionsBanner:) optional func didDragInstructionsBanner(_ sender: OlaMapNavigationSDK.BaseInstructionsBannerView)
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @IBDesignable @objc(MBInstructionsBannerView) @_Concurrency.MainActor(unsafe) open class InstructionsBannerView : OlaMapNavigationSDK.BaseInstructionsBannerView {
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @_Concurrency.MainActor(unsafe) open class BaseInstructionsBannerView : UIKit.UIControl {
  @_Concurrency.MainActor(unsafe) weak public var delegate: (any OlaMapNavigationSDK.InstructionsBannerViewDelegate)? {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @objc(updateForVisualInstructionBanner:) @_Concurrency.MainActor(unsafe) public func update(for instruction: OlaMapDirectionFramework.VisualInstructionBanner?)
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func prepareForInterfaceBuilder()
  @_Concurrency.MainActor(unsafe) public func updateDistance(for currentStepProgress: OlaMapNavigationSDK.RouteStepProgress)
  @objc deinit
}
@objc(MBNavigationViewController) @_Concurrency.MainActor(unsafe) open class NavigationViewController : UIKit.UIViewController {
  @objc @_Concurrency.MainActor(unsafe) public var route: OlaMapDirectionFramework.Route! {
    @objc get
    @objc set
  }
  @objc @_Concurrency.MainActor(unsafe) public var directions: OlaMapDirectionFramework.Directions!
  @objc @_Concurrency.MainActor(unsafe) public var pendingCamera: Mapbox.MGLMapCamera?
  @objc @_Concurrency.MainActor(unsafe) public var origin: (any Mapbox.MGLAnnotation)?
  @objc @_Concurrency.MainActor(unsafe) public var voiceController: OlaMapNavigationSDK.RouteVoiceController!
  @objc @_Concurrency.MainActor(unsafe) public var routeController: OlaMapNavigationSDK.RouteController! {
    @objc get
    @objc set
  }
  @objc @_Concurrency.MainActor(unsafe) public var mapView: OlaMapNavigationSDK.NavigationMapView? {
    @objc get
  }
  @objc @_Concurrency.MainActor(unsafe) public var snapsUserLocationAnnotationToRoute: Swift.Bool
  @objc @_Concurrency.MainActor(unsafe) public var sendsNotifications: Swift.Bool
  @objc @_Concurrency.MainActor(unsafe) public var showsReportFeedback: Swift.Bool {
    @objc get
    @objc set
  }
  @objc @_Concurrency.MainActor(unsafe) public var showsEndOfRouteFeedback: Swift.Bool {
    @objc get
    @objc set
  }
  @objc @_Concurrency.MainActor(unsafe) public var automaticallyAdjustsStyleForTimeOfDay: Swift.Bool {
    @objc get
    @objc set
  }
  @objc @_Concurrency.MainActor(unsafe) public var shouldManageApplicationIdleTimer: Swift.Bool
  @objc @_Concurrency.MainActor(unsafe) public var isUsedInConjunctionWithCarPlayWindow: Swift.Bool {
    @objc get
    @objc set
  }
  @objc @_Concurrency.MainActor(unsafe) public var annotatesSpokenInstructions: Swift.Bool
  @_Concurrency.MainActor(unsafe) @objc override dynamic open var preferredStatusBarStyle: UIKit.UIStatusBarStyle {
    @objc get
  }
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @_Concurrency.MainActor(unsafe) required public init(for route: OlaMapDirectionFramework.Route, directions: OlaMapDirectionFramework.Directions = Directions(), styles: [OlaMapNavigationSDK.Style]? = [DayStyle(), NightStyle()], routeController: OlaMapNavigationSDK.RouteController? = nil, locationManager: OlaMapNavigationSDK.NavigationLocationManager? = nil, voiceController: OlaMapNavigationSDK.RouteVoiceController? = nil, mapDecorator: OlaMapNavigationSDK.MapDecorator = MapDecorator())
  @objc deinit
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func viewDidLoad()
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func viewWillAppear(_ animated: Swift.Bool)
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func viewWillDisappear(_ animated: Swift.Bool)
  @available(iOS 12.0, *)
  @_Concurrency.MainActor(unsafe) public class func carPlayManager(_ carPlayManager: OlaMapNavigationSDK.CarPlayManager, didBeginNavigationWith routeController: OlaMapNavigationSDK.RouteController, window: UIKit.UIWindow)
  @available(iOS 12.0, *)
  @_Concurrency.MainActor(unsafe) public class func carPlayManagerDidEndNavigation(_ carPlayManager: OlaMapNavigationSDK.CarPlayManager, window: UIKit.UIWindow)
}
extension OlaMapNavigationSDK.NavigationViewController {
  @_Concurrency.MainActor(unsafe) @objc dynamic public func navigationMapView(_ mapView: OlaMapNavigationSDK.NavigationMapView, routeCasingStyleLayerWithIdentifier identifier: Swift.String, source: Mapbox.MGLSource) -> Mapbox.MGLStyleLayer?
  @_Concurrency.MainActor(unsafe) @objc dynamic public func navigationMapView(_ mapView: OlaMapNavigationSDK.NavigationMapView, routeStyleLayerWithIdentifier identifier: Swift.String, source: Mapbox.MGLSource) -> Mapbox.MGLStyleLayer?
  @_Concurrency.MainActor(unsafe) @objc dynamic public func navigationMapView(_ mapView: OlaMapNavigationSDK.NavigationMapView, didSelect route: OlaMapDirectionFramework.Route)
  @_Concurrency.MainActor(unsafe) @objc dynamic public func navigationMapView(_ mapView: OlaMapNavigationSDK.NavigationMapView, shapeFor routes: [OlaMapDirectionFramework.Route]) -> Mapbox.MGLShape?
  @_Concurrency.MainActor(unsafe) @objc dynamic public func navigationMapView(_ mapView: OlaMapNavigationSDK.NavigationMapView, simplifiedShapeFor route: OlaMapDirectionFramework.Route) -> Mapbox.MGLShape?
  @_Concurrency.MainActor(unsafe) @objc dynamic public func navigationMapView(_ mapView: OlaMapNavigationSDK.NavigationMapView, waypointStyleLayerWithIdentifier identifier: Swift.String, source: Mapbox.MGLSource) -> Mapbox.MGLStyleLayer?
  @_Concurrency.MainActor(unsafe) @objc dynamic public func navigationMapView(_ mapView: OlaMapNavigationSDK.NavigationMapView, waypointSymbolStyleLayerWithIdentifier identifier: Swift.String, source: Mapbox.MGLSource) -> Mapbox.MGLStyleLayer?
  @_Concurrency.MainActor(unsafe) @objc dynamic public func navigationMapView(_ mapView: OlaMapNavigationSDK.NavigationMapView, shapeFor waypoints: [OlaMapDirectionFramework.Waypoint], legIndex: Swift.Int) -> Mapbox.MGLShape?
  @_Concurrency.MainActor(unsafe) @objc dynamic public func navigationMapView(_ mapView: Mapbox.MGLMapView, imageFor annotation: any Mapbox.MGLAnnotation) -> Mapbox.MGLAnnotationImage?
  @_Concurrency.MainActor(unsafe) @objc dynamic public func navigationMapView(_ mapView: Mapbox.MGLMapView, viewFor annotation: any Mapbox.MGLAnnotation) -> Mapbox.MGLAnnotationView?
  @_Concurrency.MainActor(unsafe) @objc dynamic public func navigationMapViewUserAnchorPoint(_ mapView: OlaMapNavigationSDK.NavigationMapView) -> CoreFoundation.CGPoint
  @_Concurrency.MainActor(unsafe) @objc dynamic public func label(_ label: OlaMapNavigationSDK.InstructionLabel, willPresent instruction: OlaMapDirectionFramework.VisualInstruction, as presented: Foundation.NSAttributedString) -> Foundation.NSAttributedString?
  @_Concurrency.MainActor(unsafe) @objc dynamic public func navigationMapView(_ mapView: Mapbox.MGLMapView, regionDidChangeWith reason: Mapbox.MGLCameraChangeReason, animated: Swift.Bool)
}
extension OlaMapNavigationSDK.NavigationViewController : OlaMapNavigationSDK.RouteControllerDelegate {
  @_Concurrency.MainActor(unsafe) @objc dynamic public func routeController(_ routeController: OlaMapNavigationSDK.RouteController, shouldRerouteFrom location: CoreLocation.CLLocation) -> Swift.Bool
  @_Concurrency.MainActor(unsafe) @objc dynamic public func routeController(_ routeController: OlaMapNavigationSDK.RouteController, willRerouteFrom location: CoreLocation.CLLocation)
  @objc @_Concurrency.MainActor(unsafe) dynamic public func routeController(_ routeController: OlaMapNavigationSDK.RouteController, didRerouteAlong route: OlaMapDirectionFramework.Route)
  @_Concurrency.MainActor(unsafe) @objc dynamic public func routeController(_ routeController: OlaMapNavigationSDK.RouteController, didFailToRerouteWith error: any Swift.Error)
  @_Concurrency.MainActor(unsafe) @objc dynamic public func routeController(_ routeController: OlaMapNavigationSDK.RouteController, shouldDiscard location: CoreLocation.CLLocation) -> Swift.Bool
  @_Concurrency.MainActor(unsafe) @objc dynamic public func routeController(_ routeController: OlaMapNavigationSDK.RouteController, didUpdate locations: [CoreLocation.CLLocation])
  @_Concurrency.MainActor(unsafe) @objc dynamic public func routeController(_ routeController: OlaMapNavigationSDK.RouteController, didArriveAt waypoint: OlaMapDirectionFramework.Waypoint) -> Swift.Bool
}
extension OlaMapNavigationSDK.NavigationViewController : OlaMapNavigationSDK.TunnelIntersectionManagerDelegate {
  @_Concurrency.MainActor(unsafe) @objc dynamic public func tunnelIntersectionManager(_ manager: OlaMapNavigationSDK.TunnelIntersectionManager, willEnableAnimationAt location: CoreLocation.CLLocation)
  @_Concurrency.MainActor(unsafe) @objc dynamic public func tunnelIntersectionManager(_ manager: OlaMapNavigationSDK.TunnelIntersectionManager, willDisableAnimationAt location: CoreLocation.CLLocation)
}
extension OlaMapNavigationSDK.NavigationViewController : OlaMapNavigationSDK.StyleManagerDelegate {
  @_Concurrency.MainActor(unsafe) @objc dynamic public func locationFor(styleManager: OlaMapNavigationSDK.StyleManager) -> CoreLocation.CLLocation?
  @_Concurrency.MainActor(unsafe) @objc dynamic public func styleManager(_ styleManager: OlaMapNavigationSDK.StyleManager, didApply style: OlaMapNavigationSDK.Style)
  @_Concurrency.MainActor(unsafe) @objc dynamic public func styleManagerDidRefreshAppearance(_ styleManager: OlaMapNavigationSDK.StyleManager)
}
extension OlaMapNavigationSDK.NavigationViewController {
  @_Concurrency.MainActor(unsafe) @objc dynamic public func routeControllerUpdateUserLocation(_ routeController: OlaMapNavigationSDK.RouteController, didUpdateUserLocation locations: CoreLocation.CLLocation)
}
extension Foundation.NSAttributedString {
  @available(iOS 10.0, *)
  public func pronounced(_ pronunciation: Swift.String) -> Foundation.NSAttributedString
}
@_inheritsConvenienceInitializers @objc(MBRouteVoiceController) open class RouteVoiceController : ObjectiveC.NSObject, AVFAudio.AVSpeechSynthesizerDelegate {
  @objc public var playRerouteSound: Swift.Bool
  @objc public var rerouteSoundPlayer: AVFAudio.AVAudioPlayer
  weak public var voiceControllerDelegate: (any OlaMapNavigationSDK.VoiceControllerDelegate)?
  @objc override dynamic public init()
  @objc deinit
  @objc public func speechSynthesizer(_ synthesizer: AVFAudio.AVSpeechSynthesizer, didFinish utterance: AVFAudio.AVSpeechUtterance)
  @objc open func didPassSpokenInstructionPoint(notification: Foundation.NSNotification)
  open func speak(_ instruction: OlaMapDirectionFramework.SpokenInstruction)
}
@objc(MBVoiceControllerDelegate) public protocol VoiceControllerDelegate {
  @objc(voiceController:spokenInstrucionsDidFailWithError:) optional func voiceController(_ voiceController: OlaMapNavigationSDK.RouteVoiceController, spokenInstructionsDidFailWith error: any Swift.Error)
  @objc(voiceController:didInterruptSpokenInstruction:withInstruction:) optional func voiceController(_ voiceController: OlaMapNavigationSDK.RouteVoiceController, didInterrupt interruptedInstruction: OlaMapDirectionFramework.SpokenInstruction, with interruptingInstruction: OlaMapDirectionFramework.SpokenInstruction)
  @objc(voiceController:willSpeakSpokenInstruction:routeProgress:) optional func voiceController(_ voiceController: OlaMapNavigationSDK.RouteVoiceController, willSpeak instruction: OlaMapDirectionFramework.SpokenInstruction, routeProgress: OlaMapNavigationSDK.RouteProgress) -> OlaMapDirectionFramework.SpokenInstruction?
}
@objc(MBTunnelIntersectionManagerDelegate) public protocol TunnelIntersectionManagerDelegate {
  @objc(tunnelIntersectionManager:willEnableAnimationAtLocation:) optional func tunnelIntersectionManager(_ manager: OlaMapNavigationSDK.TunnelIntersectionManager, willEnableAnimationAt location: CoreLocation.CLLocation)
  @objc(tunnelIntersectionManager:willDisableAnimationAtLocation:) optional func tunnelIntersectionManager(_ manager: OlaMapNavigationSDK.TunnelIntersectionManager, willDisableAnimationAt location: CoreLocation.CLLocation)
}
@_inheritsConvenienceInitializers @objc(MBTunnelIntersectionManager) open class TunnelIntersectionManager : ObjectiveC.NSObject {
  @objc weak public var delegate: (any OlaMapNavigationSDK.TunnelIntersectionManagerDelegate)?
  @objc public var animatedLocationManager: OlaMapNavigationSDK.SimulatedLocationManager?
  @objc public var tunnelExitLocations: [CoreLocation.CLLocation]
  @objc public var tunnelSimulationEnabled: Swift.Bool
  @objc public func userWithinTunnelEntranceRadius(at location: CoreLocation.CLLocation, routeProgress: OlaMapNavigationSDK.RouteProgress) -> Swift.Bool
  @objc public func enableTunnelAnimation(routeController: OlaMapNavigationSDK.RouteController, routeProgress: OlaMapNavigationSDK.RouteProgress)
  @objc public func suspendTunnelAnimation(at location: CoreLocation.CLLocation, routeController: OlaMapNavigationSDK.RouteController)
  @objc override dynamic public init()
  @objc deinit
}
public enum GeofenceRegionType {
  case circular(radius: Swift.Double)
  case rectanguler(length: Swift.Double, breadth: Swift.Double)
  case none
}
public struct OlaGeofenceRegion {
  public let uniqueName: Swift.String
  public let centerPoint: CoreLocation.CLLocationCoordinate2D
  public let type: OlaMapNavigationSDK.GeofenceRegionType
  public let notifiyOnEntry: Swift.Bool
  public let notifiyOnExit: Swift.Bool
  public init(_ name: Swift.String, _ centerPoint: OlaMapNavigationSDK.OlaCoordinate, _ type: OlaMapNavigationSDK.GeofenceRegionType, notifyOnEntry: Swift.Bool = true, notifyOnExit: Swift.Bool = true)
  public init(_ region: CoreLocation.CLRegion)
}
@objc @_inheritsConvenienceInitializers public class OlaGeofence : ObjectiveC.NSObject {
  public var handlerOnExit: ((_ region: OlaMapNavigationSDK.OlaGeofenceRegion) -> Swift.Void)?
  public var handlerOnEnter: ((_ region: OlaMapNavigationSDK.OlaGeofenceRegion) -> Swift.Void)?
  public func monitor(_ olaRegion: OlaMapNavigationSDK.OlaGeofenceRegion)
  @objc override dynamic public init()
  @objc deinit
}
extension OlaMapNavigationSDK.OlaGeofence : CoreLocation.CLLocationManagerDelegate {
  @objc dynamic public func locationManager(_ manager: CoreLocation.CLLocationManager, didExitRegion region: CoreLocation.CLRegion)
  @objc dynamic public func locationManager(_ manager: CoreLocation.CLLocationManager, didEnterRegion region: CoreLocation.CLRegion)
}
public enum UserPuckIconType {
  case arrowIcon
  case circularSolidDot
  case custom(UIKit.UIImage, CoreFoundation.CGRect)
  case testAppIcon
}
public enum DestinatioIconType {
  case scoterIcon
  case dropIcon
  case custom(UIKit.UIImage)
}
public struct MapDecorator {
  public let userPuckIcon: OlaMapNavigationSDK.UserPuckIconType
  public let destinationIcon: OlaMapNavigationSDK.DestinatioIconType
  public let polylineType: OlaMapNavigationSDK.PolylineType
  public let isAllowTilt: Swift.Bool
  public let distanceToDrawTraffic: Swift.Double
  public init(userPuckIcon: OlaMapNavigationSDK.UserPuckIconType = .arrowIcon, destinationIcon: OlaMapNavigationSDK.DestinatioIconType = .dropIcon, polylineType: OlaMapNavigationSDK.PolylineType = .solid, isAllowTilt: Swift.Bool = true, distanceToDrawTraffic: Swift.Double = 10000.0)
}
public struct OlaMapNavigationResponseModel : Swift.Codable {
  public let status: Swift.String?
  public let geocodedWaypoints: [OlaMapNavigationSDK.GeocodedWaypoint]?
  public var routes: [OlaMapNavigationSDK.OlaRoute]?
  public let sourceFrom: Swift.String?
  public let message: Swift.String?
  public let exception: Swift.String?
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct GeocodedWaypoint : Swift.Codable {
  public let geocoderStatus: Swift.String?, placeID: Swift.String?
  public let types: [Swift.String?]?
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct OlaRoute : Swift.Codable {
  public let summary: Swift.String?
  public var legs: [OlaMapNavigationSDK.OlaLeg?]?
  public let overviewPolyline: Swift.String?, travelAdvisory: Swift.String?
  public let bounds: OlaMapNavigationSDK.Bounds?
  public let copyrights: Swift.String?
  public let warnings: [Swift.String]?
  public let duration: Swift.Double?
  public let distance: Swift.Double?
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct OlaLeg : Swift.Codable {
  public let steps: [OlaMapNavigationSDK.Step]?
  public let distance: Swift.Int?
  public let readableDistance: Swift.String?
  public let duration: Swift.Double?
  public let readableDuration: Swift.String?
  public let startLocation: OlaMapNavigationSDK.DirectionLocation?, endLocation: OlaMapNavigationSDK.DirectionLocation?
  public let startAddress: Swift.String?, endAddress: Swift.String?
  public var congestions: [OlaMapNavigationSDK.OlaTrafficType]?
  public var trafficModels: [OlaMapNavigationSDK.OLATrafficModel]?
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct DirectionLocation : Swift.Codable {
  public let lat: Swift.Double?, lng: Swift.Double?
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct Step : Swift.Codable {
  public let instructions: Swift.String?
  public let distance: Swift.Int?
  public let readableDistance: Swift.String?
  public let maneuver: OlaMapNavigationSDK.Maneuver?
  public let duration: Swift.Int?
  public let readableDuration: Swift.String?
  public let startLocation: OlaMapNavigationSDK.DirectionLocation?, endLocation: OlaMapNavigationSDK.DirectionLocation?
  public let geometry: Swift.String?
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public enum Maneuver : Swift.String, Swift.Codable {
  case arrive
  case depart
  case enterRoundabout
  case maneuverContinue
  case turnLeft
  case turnRight
  case turnSharpLeft
  case turnSharpRight
  case turnSlightLeft
  case turnSlightRight
  case uTurn
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
@_hasMissingDesignatedInitializers public class OLATrafficModel {
  @objc deinit
}
@objc(MBFeedbackItem) public class FeedbackItem : ObjectiveC.NSObject {
  @objc public var title: Swift.String
  @objc public var image: UIKit.UIImage
  @objc public var feedbackType: OlaMapNavigationSDK.FeedbackType
  @objc public init(title: Swift.String, image: UIKit.UIImage, feedbackType: OlaMapNavigationSDK.FeedbackType)
  @objc deinit
}
extension Swift.String {
  public var encode: Swift.String {
    get
  }
}
extension Swift.Optional where Wrapped == Swift.String {
  public var defaultValue: Swift.String {
    get
  }
}
extension Swift.Double {
  public var toKilometers: Swift.Double {
    get
  }
}
extension Swift.Int {
  public var toKilometers: Swift.Int {
    get
  }
}
@objc public class OlaMapService : ObjectiveC.NSObject, OlaMapNavigationSDK.MapServiceProtocol {
  public var mglMapView: Mapbox.MGLMapView? {
    get
    set
  }
  weak public var delegate: (any OlaMapNavigationSDK.OlaMapServiceDelegate)?
  public var subviewsManager: any OlaMapNavigationSDK.OLAMapSubviewsProtocol
  public var showCompassVisibility: Swift.Bool {
    get
    set
  }
  public var compassViewPosition: Mapbox.MGLOrnamentPosition {
    get
    set
  }
  public var compassViewMargin: CoreFoundation.CGPoint {
    get
    set
  }
  public var allowMapTilting: Swift.Bool {
    get
    set
  }
  public var tapGestureEnable: Swift.Bool {
    get
    set
  }
  public init(token: Swift.String, tileURL: Foundation.URL, env: OlaMapNavigationSDK.ConfigEnvironment = .production, clientId: Swift.String, userId: Swift.String? = "NA")
  public init(token: Swift.String, tileURL: Foundation.URL, env: OlaMapNavigationSDK.ConfigEnvironment = .production, clientId: Swift.String = "NA")
  public init(token: Swift.String, config: OlaMapNavigationSDK.Configuration, tileURL: Foundation.URL, clientId: Swift.String, userId: Swift.String? = "NA")
  public func loadMap(onView: UIKit.UIView, coordinate: OlaMapNavigationSDK.OlaCoordinate? = nil, showWaterMark: Swift.Bool = true, showCurrentLocationIcon: Swift.Bool = true, loadStyleFromLocale: Swift.Bool = false)
  public func refreshMap()
  public func setDebugLogs(_ isEnabled: Swift.Bool)
  public var compassView: UIKit.UIView? {
    get
  }
  public func clearPOIs()
  public func disablePOIs()
  public func enablePOIs()
  @objc deinit
}
extension OlaMapNavigationSDK.OlaMapService {
  public var padding: UIKit.UIEdgeInsets? {
    get
    set
  }
  public var frame: CoreFoundation.CGRect? {
    get
    set
  }
  public var cameraZoom: Swift.Double? {
    get
  }
  public var centerCoordinateOfMap: CoreLocation.CLLocationCoordinate2D? {
    get
  }
  public var userLocation: CoreLocation.CLLocation? {
    get
  }
  public var getCurrentLocationCoordinate: CoreLocation.CLLocationCoordinate2D? {
    get
  }
  public func toPoint(_ coordinate: CoreLocation.CLLocationCoordinate2D) -> CoreFoundation.CGPoint?
  public func toCoordinate(_ points: CoreFoundation.CGPoint) -> CoreLocation.CLLocationCoordinate2D?
  public func getCurrentLocation(onCompletion: @escaping (_ coordinate: OlaMapNavigationSDK.OlaCoordinate?) -> Swift.Void)
  public func getCurrentZoomLevel() -> Swift.Double
  public func setCustomCompassImage(_ image: UIKit.UIImage)
}
extension OlaMapNavigationSDK.OlaMapService {
  public func setEnableTraffic(_ showTraffic: Swift.Bool)
  public func setEnableLocation(_ state: Swift.Bool)
  public func setZoomLevel(_ zoomLevel: Swift.Double)
  public func setMinimumZoomLevel(_ zoomLevel: Swift.Double)
  public func setMaxZoomLevel(_ zoom: Swift.Double)
  public func setAnnotationCalloutEnable(_ state: Swift.Bool)
  public func setMarkerColor(_ color: UIKit.UIColor)
  public func setInstrumentation(_ client: any OlaMapNavigationSDK.OlaMapInstrumentationDelegate)
  public func setRotatingGesture(_ state: Swift.Bool)
  public func setJWT(_ token: Swift.String)
}
extension OlaMapNavigationSDK.OlaMapService {
  @available(iOS 13, *)
  public func olaMapBrand() -> UIKit.UIImage?
  public func addWaterMark(_ view: UIKit.UIView)
}
extension OlaMapNavigationSDK.OlaMapService {
  public func deleteRoutePreview()
  public func showRoutePreview(jsonData: Foundation.Data, popupDecorator: OlaMapNavigationSDK.PopupDecoratedModel = PopupDecoratedModel(), polylineDecorator: OlaMapNavigationSDK.PolylineDecorator? = nil, isTrafficSupported: Swift.Bool = false, isEtaBadge: Swift.Bool = false, edgePadding: UIKit.UIEdgeInsets = UIEdgeInsets(top: 30, left: 30, bottom: 30, right: 30))
}
public enum NavigationTrackingMode {
  case modeNone
  case modeFollow
  case followWithHeading
  case followWithCourse
  public static func == (a: OlaMapNavigationSDK.NavigationTrackingMode, b: OlaMapNavigationSDK.NavigationTrackingMode) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public protocol OlaMapServiceDelegate : AnyObject {
  func mapViewDidChange(gesture: OlaMapNavigationSDK.OlaMapGesture)
  func mapViewDidBecomeIdle()
  func didChangeLocationManagerAuthorization(_ state: CoreLocation.CLAuthorizationStatus)
  func regionDidChangeAnimated()
  func didChangeCamera()
  func regionIsChanging(_ gesture: OlaMapNavigationSDK.OlaMapGesture)
  func didAddAnnotationViewsOnMap()
  func regionDidChangeAnimated(_ mode: OlaMapNavigationSDK.NavigationTrackingMode)
  func didTapOnMap(_ coordinate: OlaMapNavigationSDK.OlaCoordinate)
  func didLongTapOnMap(_ coordinate: OlaMapNavigationSDK.OlaCoordinate)
  func didRouteSelected(_ route: OlaMapNavigationSDK.OlaRoute)
  func mapFailedToLoad(_ error: any Swift.Error)
  func mapSuccessfullyLoaded()
  func mapSuccessfullyLoadedStyle()
  func didSelectAnnotationView(_ annotationId: Swift.String)
}
extension OlaMapNavigationSDK.OlaMapServiceDelegate {
  public func mapViewDidChange(gesture: OlaMapNavigationSDK.OlaMapGesture)
  public func mapViewDidBecomeIdle()
  public func didAddAnnotationViewsOnMap()
  public func didChangeLocationManagerAuthorization(_ state: CoreLocation.CLAuthorizationStatus)
  public func regionDidChangeAnimated()
  public func regionDidChangeAnimated(_ mode: OlaMapNavigationSDK.NavigationTrackingMode)
  public func didTapOnMap(_ coordinate: OlaMapNavigationSDK.OlaCoordinate)
  public func didLongTapOnMap(_ coordinate: OlaMapNavigationSDK.OlaCoordinate)
  public func didRouteSelected(_ route: OlaMapNavigationSDK.OlaRoute)
  public func mapSuccessfullyLoaded()
  public func mapSuccessfullyLoadedStyle()
  public func didSelectAnnotationView(_ annotationId: Swift.String)
}
public protocol OLAMapSubviewsProtocol {
  var mapView: Mapbox.MGLMapView? { get set }
  func configureMapButtons(buttons: [OlaMapNavigationSDK.OLAMapButton], point: CoreFoundation.CGPoint?) -> UIKit.UIView
  func regionIsChanging()
}
extension OlaMapNavigationSDK.OLAMapSubviewsProtocol {
  public func configureMapButtons(buttons: [OlaMapNavigationSDK.OLAMapButton]) -> UIKit.UIView
}
final public class OLAMapSubviewsManager : OlaMapNavigationSDK.OLAMapSubviewsProtocol {
  final public var mapView: Mapbox.MGLMapView? {
    get
    set
  }
  public init(mapView: Mapbox.MGLMapView? = nil)
  final public func configureMapButtons(buttons: [OlaMapNavigationSDK.OLAMapButton], point: CoreFoundation.CGPoint?) -> UIKit.UIView
  final public func regionIsChanging()
  @objc deinit
}
@_inheritsConvenienceInitializers @objc(MBStyleKitMarker) public class StyleKitMarker : ObjectiveC.NSObject {
  @objc dynamic public class func drawMarker(frame: CoreFoundation.CGRect = CGRect(x: 57, y: 27, width: 50, height: 50), innerColor: UIKit.UIColor = UIColor(red: 1.000, green: 1.000, blue: 1.000, alpha: 1.000), shadowColor: UIKit.UIColor = UIColor(red: 0.000, green: 0.000, blue: 0.000, alpha: 1.000), pinColor: UIKit.UIColor = UIColor(red: 0.290, green: 0.565, blue: 0.886, alpha: 1.000), strokeColor: UIKit.UIColor = UIColor(red: 1.000, green: 1.000, blue: 1.000, alpha: 1.000))
  @objc override dynamic public init()
  @objc deinit
}
@_inheritsConvenienceInitializers @objc(MBNavigationLocationManager) open class NavigationLocationManager : CoreLocation.CLLocationManager, Foundation.NSCopying {
  @objc public func copy(with zone: ObjectiveC.NSZone? = nil) -> Any
  @objc override dynamic public init()
  @objc deinit
}
extension CoreFoundation.CGSize : Swift.ExpressibleByFloatLiteral {
  public typealias FloatLiteralType = Swift.Double
  public init(size: Swift.Double)
  public init(floatLiteral value: CoreFoundation.CGSize.FloatLiteralType)
}
@objc(MBStyleManagerDelegate) public protocol StyleManagerDelegate : ObjectiveC.NSObjectProtocol {
  @objc func locationFor(styleManager: OlaMapNavigationSDK.StyleManager) -> CoreLocation.CLLocation?
  @objc optional func styleManager(_ styleManager: OlaMapNavigationSDK.StyleManager, didApply style: OlaMapNavigationSDK.Style)
  @objc optional func styleManagerDidRefreshAppearance(_ styleManager: OlaMapNavigationSDK.StyleManager)
}
@objc(MBStyleManager) open class StyleManager : ObjectiveC.NSObject {
  @objc weak public var delegate: (any OlaMapNavigationSDK.StyleManagerDelegate)?
  @objc public var automaticallyAdjustsStyleForTimeOfDay: Swift.Bool {
    @objc get
    @objc set
  }
  @objc public var styles: [OlaMapNavigationSDK.Style] {
    @objc get
    @objc set
  }
  required public init(_ delegate: any OlaMapNavigationSDK.StyleManagerDelegate)
  @objc deinit
}
@available(iOS 12.0, *)
@objc(MBCarPlayActivity) public enum CarPlayActivity : Swift.Int {
  case browsing
  case previewing
  case navigating
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@available(iOS 12.0, *)
@objc(MBCarPlayManagerDelegate) public protocol CarPlayManagerDelegate {
  @objc(carPlayManager:leadingNavigationBarButtonsWithTraitCollection:inTemplate:forActivity:) optional func carPlayManager(_ carPlayManager: OlaMapNavigationSDK.CarPlayManager, leadingNavigationBarButtonsCompatibleWith traitCollection: UIKit.UITraitCollection, in template: CarPlay.CPTemplate, for activity: OlaMapNavigationSDK.CarPlayActivity) -> [CarPlay.CPBarButton]?
  @objc(carPlayManager:trailingNavigationBarButtonsWithTraitCollection:inTemplate:forActivity:) optional func carPlayManager(_ carPlayManager: OlaMapNavigationSDK.CarPlayManager, trailingNavigationBarButtonsCompatibleWith traitCollection: UIKit.UITraitCollection, in template: CarPlay.CPTemplate, for activity: OlaMapNavigationSDK.CarPlayActivity) -> [CarPlay.CPBarButton]?
  @objc(carPlayManager:mapButtonsCompatibleWithTraitCollection:inTemplate:forActivity:) optional func carPlayManager(_ carplayManager: OlaMapNavigationSDK.CarPlayManager, mapButtonsCompatibleWith traitCollection: UIKit.UITraitCollection, in template: CarPlay.CPTemplate, for activity: OlaMapNavigationSDK.CarPlayActivity) -> [CarPlay.CPMapButton]?
  @objc(carPlayManager:routeControllerAlongRoute:) optional func carPlayManager(_ carPlayManager: OlaMapNavigationSDK.CarPlayManager, routeControllerAlong route: OlaMapDirectionFramework.Route) -> OlaMapNavigationSDK.RouteController
  @objc(carPlayManager:searchTemplate:updatedSearchText:completionHandler:) optional func carPlayManager(_ carPlayManager: OlaMapNavigationSDK.CarPlayManager, searchTemplate: CarPlay.CPSearchTemplate, updatedSearchText searchText: Swift.String, completionHandler: @escaping ([CarPlay.CPListItem]) -> Swift.Void)
  @objc(carPlayManager:searchTemplate:selectedResult:completionHandler:) optional func carPlayManager(_ carPlayManager: OlaMapNavigationSDK.CarPlayManager, searchTemplate: CarPlay.CPSearchTemplate, selectedResult item: CarPlay.CPListItem, completionHandler: @escaping () -> Swift.Void)
  @objc(carPlayManager:didBeginNavigationWithRouteController:) func carPlayManager(_ carPlayManager: OlaMapNavigationSDK.CarPlayManager, didBeginNavigationWith routeController: OlaMapNavigationSDK.RouteController)
  @objc func carPlayManagerDidEndNavigation(_ carPlayManager: OlaMapNavigationSDK.CarPlayManager)
  @objc optional func carplayManagerShouldDisableIdleTimer(_ carPlayManager: OlaMapNavigationSDK.CarPlayManager) -> Swift.Bool
}
@_inheritsConvenienceInitializers @available(iOS 12.0, *)
@objc(MBCarPlayManager) public class CarPlayManager : ObjectiveC.NSObject {
  public var interfaceController: CarPlay.CPInterfaceController? {
    get
  }
  public var carWindow: UIKit.UIWindow? {
    get
  }
  public var routeController: OlaMapNavigationSDK.RouteController? {
    get
  }
  @objc weak public var delegate: (any OlaMapNavigationSDK.CarPlayManagerDelegate)?
  @objc public var simulatesLocations: Swift.Bool
  @objc public var simulatedSpeedMultiplier: Swift.Double
  @objc(sharedManager) public static var shared: OlaMapNavigationSDK.CarPlayManager
  public var mainMapTemplate: CarPlay.CPMapTemplate? {
    get
  }
  weak public var currentNavigator: OlaMapNavigationSDK.CarPlayNavigationViewController? {
    get
  }
  public static let CarPlayWaypointKey: Swift.String
  public static func resetSharedInstance()
  @objc public var isConnectedToCarPlay: Swift.Bool
  @objc override dynamic public init()
  @objc deinit
}
@available(iOS 12.0, *)
extension OlaMapNavigationSDK.CarPlayManager : CarPlay.CPApplicationDelegate {
  @objc dynamic public func application(_ application: UIKit.UIApplication, didConnectCarInterfaceController interfaceController: CarPlay.CPInterfaceController, to window: CarPlay.CPWindow)
  @objc dynamic public func application(_ application: UIKit.UIApplication, didDisconnectCarInterfaceController interfaceController: CarPlay.CPInterfaceController, from window: CarPlay.CPWindow)
}
@available(iOS 12.0, *)
extension OlaMapNavigationSDK.CarPlayManager : CarPlay.CPInterfaceControllerDelegate {
  @objc dynamic public func templateWillAppear(_ template: CarPlay.CPTemplate, animated: Swift.Bool)
  @objc dynamic public func templateDidAppear(_ template: CarPlay.CPTemplate, animated: Swift.Bool)
  @objc dynamic public func templateWillDisappear(_ template: CarPlay.CPTemplate, animated: Swift.Bool)
}
@available(iOS 12.0, *)
extension OlaMapNavigationSDK.CarPlayManager : CarPlay.CPListTemplateDelegate {
  @objc dynamic public func listTemplate(_ listTemplate: CarPlay.CPListTemplate, didSelect item: CarPlay.CPListItem, completionHandler: @escaping () -> Swift.Void)
  public func calculateRouteAndStart(from fromWaypoint: OlaMapDirectionFramework.Waypoint? = nil, to toWaypoint: OlaMapDirectionFramework.Waypoint, completionHandler: @escaping () -> Swift.Void)
}
@available(iOS 12.0, *)
extension OlaMapNavigationSDK.CarPlayManager : CarPlay.CPMapTemplateDelegate {
  @objc dynamic public func mapTemplate(_ mapTemplate: CarPlay.CPMapTemplate, startedTrip trip: CarPlay.CPTrip, using routeChoice: CarPlay.CPRouteChoice)
  @objc dynamic public func mapTemplate(_ mapTemplate: CarPlay.CPMapTemplate, selectedPreviewFor trip: CarPlay.CPTrip, using routeChoice: CarPlay.CPRouteChoice)
  @objc dynamic public func mapTemplateDidCancelNavigation(_ mapTemplate: CarPlay.CPMapTemplate)
  @objc dynamic public func mapTemplateDidBeginPanGesture(_ mapTemplate: CarPlay.CPMapTemplate)
  @objc dynamic public func mapTemplate(_ mapTemplate: CarPlay.CPMapTemplate, didEndPanGestureWithVelocity velocity: CoreFoundation.CGPoint)
  @objc dynamic public func mapTemplateWillDismissPanningInterface(_ mapTemplate: CarPlay.CPMapTemplate)
  @objc dynamic public func mapTemplate(_ mapTemplate: CarPlay.CPMapTemplate, didUpdatePanGestureWithTranslation translation: CoreFoundation.CGPoint, velocity: CoreFoundation.CGPoint)
  @objc dynamic public func mapTemplate(_ mapTemplate: CarPlay.CPMapTemplate, panWith direction: CarPlay.CPMapTemplate.PanDirection)
}
@available(iOS 12.0, *)
extension OlaMapNavigationSDK.CarPlayManager : OlaMapNavigationSDK.CarPlayNavigationDelegate {
  @objc dynamic public func carPlayNavigationViewControllerDidArrive(_: OlaMapNavigationSDK.CarPlayNavigationViewController)
  @objc dynamic public func carPlayNavigationViewControllerDidDismiss(_ carPlayNavigationViewController: OlaMapNavigationSDK.CarPlayNavigationViewController, byCanceling canceled: Swift.Bool)
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @_Concurrency.MainActor(unsafe) public class GenericRouteShield : OlaMapNavigationSDK.StylableView {
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @objc deinit
}
public enum OlaMapError : Swift.Error {
  case noApiKey
  case noInternet
  case noStyle
  case jsonParsing
  case noMapView
  case noMarkerID
  case invalidPolygon
  case invalidRoute(OlaMapNavigationSDK.RouteInValidType)
  case errorStatus(OlaMapNavigationSDK.GeoCodingResponseStatus, Swift.String)
  case custom(Swift.String)
  public var message: Swift.String {
    get
  }
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @IBDesignable @objc(MBBottomBannerView) @_Concurrency.MainActor(unsafe) open class BottomBannerView : UIKit.UIView {
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func prepareForInterfaceBuilder()
  @objc deinit
}
extension UIKit.UIColor {
  convenience public init?(hex: Swift.String)
}
extension Foundation.NSNotification.Name {
  public static let olaMapDebugLogs: Foundation.Notification.Name
  public static let olaMapInfoLogs: Foundation.Notification.Name
}
@_hasMissingDesignatedInitializers public class MapUtility {
  public class func calculateStraightDistance(_ to: OlaMapNavigationSDK.OlaCoordinate, from: OlaMapNavigationSDK.OlaCoordinate) -> Swift.Double
  public class func loadMockJSON(_ fileName: Swift.String) -> Foundation.Data?
  public class func toDictionary(data: Foundation.Data) -> [Swift.String : Any]?
  public class func getOlaMapVersion() -> Swift.String
  public class func createArcPolyline(startPoint: CoreLocation.CLLocationCoordinate2D, toEnd endPoint: CoreLocation.CLLocationCoordinate2D, withAngle angle: Swift.Float) -> [CoreLocation.CLLocationCoordinate2D]
  @objc deinit
}
extension OlaMapNavigationSDK.MapUtility {
  public class func decodePolyline(_ encodedPolyline: Swift.String, precision: Swift.Double = 10) -> [CoreLocation.CLLocationCoordinate2D]?
  public class func getHeadingForDirection(from: CoreLocation.CLLocationCoordinate2D, to: CoreLocation.CLLocationCoordinate2D) -> Swift.Double
  public class func getUncommonRoute(_ route1: [OlaMapNavigationSDK.OlaCoordinate], _ route2: [OlaMapNavigationSDK.OlaCoordinate]) -> ([OlaMapNavigationSDK.OlaCoordinate], [OlaMapNavigationSDK.OlaCoordinate])
  public static func willIntersect(_ point11: OlaMapNavigationSDK.OlaCoordinate, _ point12: OlaMapNavigationSDK.OlaCoordinate, _ point21: OlaMapNavigationSDK.OlaCoordinate, _ point22: OlaMapNavigationSDK.OlaCoordinate) -> Swift.Bool
}
extension Foundation.Data {
  public var prettyPrintedJSON: Foundation.NSString? {
    get
  }
}
extension UIKit.UIView {
  @_Concurrency.MainActor(unsafe) public func placeViewAtCenter(of parentView: UIKit.UIView)
  @_Concurrency.MainActor(unsafe) public func rotate(angle: CoreFoundation.CGFloat)
  @_Concurrency.MainActor(unsafe) public var isDarkModeOn: Swift.Bool {
    get
  }
  @_Concurrency.MainActor(unsafe) public var safeAreaBottom: CoreFoundation.CGFloat {
    get
  }
  @_Concurrency.MainActor(unsafe) public var safeAreaTop: CoreFoundation.CGFloat {
    get
  }
}
public class MapPickerViewModel {
  public var onBackTap: (() -> Swift.Void)?
  public init()
  @objc deinit
}
public var RouteControllerMaximumDistanceBeforeRecalculating: Swift.Double
public var RouteControllerMaximumAllowedDegreeOffsetForTurnCompletion: Swift.Double
public var RouteControllerMediumAlertInterval: Swift.Double
public var RouteControllerHighAlertInterval: Swift.Double
public var RouteControllerManeuverZoneRadius: Swift.Double
public var RouteControllerDeadReckoningTimeInterval: Swift.Double
public var NavigationMetricsDebugLoggingEnabled: Swift.String
public let RouteControllerLinkedInstructionBufferMultiplier: Swift.Double
public var RouteSnappingMinimumSpeed: Swift.Double
public var RouteControllerMinimumDistanceForContinueInstruction: Swift.Double
public var RouteControllerMinimumBacktrackingDistanceForRerouting: Swift.Double
public var RouteControllerMinimumNumberLocationUpdatesBackwards: Swift.Int
public var RouteControllerNumberOfSecondsForRerouteFeedback: Swift.Double
public var RouteControllerUserLocationSnappingDistance: Swift.Double
public var RouteSnappingMaxManipulatedCourseAngle: Swift.Double
public var RouteSnappingMinimumHorizontalAccuracy: Swift.Double
public var RouteControllerMinNumberOfInCorrectCourses: Swift.Int
public var RouteControllerIncorrectCourseMultiplier: Swift.Int
public var RouteControllerMinimumDistanceToTunnelEntrance: Swift.Double
public var RouteControllerMinimumSpeedAtTunnelEntranceRadius: Swift.Double
public var RouteControllerMaximumSpeedForUsingCurrentStep: Swift.Double
public var UserLocationThresholdDistanceAwayFromRoute: Swift.Double
public var MinimumNumberOfTimeUserLocationAwayFromRoute: Swift.Int
public typealias RouteControllerNotificationUserInfoKey = OlaMapNavigationSDK.MBRouteControllerNotificationUserInfoKey
extension Foundation.NSNotification.Name {
  public static let routeControllerDidFailToReroute: Foundation.NSNotification.Name
  public static let routeControllerWillReroute: Foundation.NSNotification.Name
  public static let routeControllerDidReroute: Foundation.NSNotification.Name
  public static let routeControllerProgressDidChange: Foundation.NSNotification.Name
  public static let routeControllerDidPassSpokenInstructionPoint: Foundation.NSNotification.Name
  public static let routeControllerDidPassVisualInstructionPoint: Foundation.NSNotification.Name
}
extension OlaMapNavigationSDK.CommuteMode : Swift.Equatable {}
extension OlaMapNavigationSDK.CommuteMode : Swift.Hashable {}
extension OlaMapNavigationSDK.OlaMapNavigationService : OlaMapNavigationSDK.VisualInstructionDelegate {}
extension OlaMapNavigationSDK.ManeuversStyleKit.ResizingBehavior : Swift.Equatable {}
extension OlaMapNavigationSDK.ManeuversStyleKit.ResizingBehavior : Swift.Hashable {}
extension OlaMapNavigationSDK.ManeuversStyleKit.ResizingBehavior : Swift.RawRepresentable {}
extension OlaMapNavigationSDK.RouteInValidType : Swift.Equatable {}
extension OlaMapNavigationSDK.RouteInValidType : Swift.Hashable {}
extension OlaMapNavigationSDK.RouteInValidType : Swift.RawRepresentable {}
extension OlaMapNavigationSDK.StyleType : Swift.Equatable {}
extension OlaMapNavigationSDK.StyleType : Swift.Hashable {}
extension OlaMapNavigationSDK.StyleType : Swift.RawRepresentable {}
extension OlaMapNavigationSDK.OlaTrafficType : Swift.Equatable {}
extension OlaMapNavigationSDK.OlaTrafficType : Swift.Hashable {}
extension OlaMapNavigationSDK.ToastPosition : Swift.Equatable {}
extension OlaMapNavigationSDK.ToastPosition : Swift.Hashable {}
extension OlaMapNavigationSDK.TextType : Swift.Equatable {}
extension OlaMapNavigationSDK.TextType : Swift.Hashable {}
extension OlaMapNavigationSDK.TextType : Swift.RawRepresentable {}
extension OlaMapNavigationSDK.AudioFormat : Swift.Equatable {}
extension OlaMapNavigationSDK.AudioFormat : Swift.Hashable {}
extension OlaMapNavigationSDK.AudioFormat : Swift.RawRepresentable {}
extension OlaMapNavigationSDK.SpeechGender : Swift.Equatable {}
extension OlaMapNavigationSDK.SpeechGender : Swift.Hashable {}
extension OlaMapNavigationSDK.SpeechGender : Swift.RawRepresentable {}
extension OlaMapNavigationSDK.OLAMapButton : Swift.Equatable {}
extension OlaMapNavigationSDK.OLAMapButton : Swift.Hashable {}
extension OlaMapNavigationSDK.FeedbackType : Swift.Equatable {}
extension OlaMapNavigationSDK.FeedbackType : Swift.Hashable {}
extension OlaMapNavigationSDK.FeedbackType : Swift.RawRepresentable {}
extension OlaMapNavigationSDK.FeedbackSource : Swift.Equatable {}
extension OlaMapNavigationSDK.FeedbackSource : Swift.Hashable {}
extension OlaMapNavigationSDK.FeedbackSource : Swift.RawRepresentable {}
extension OlaMapNavigationSDK.SpokenInstructionErrorCode : Swift.Equatable {}
extension OlaMapNavigationSDK.SpokenInstructionErrorCode : Swift.Hashable {}
extension OlaMapNavigationSDK.SpokenInstructionErrorCode : Swift.RawRepresentable {}
extension OlaMapNavigationSDK.MBErrorCode : Swift.Equatable {}
extension OlaMapNavigationSDK.MBErrorCode : Swift.Hashable {}
extension OlaMapNavigationSDK.MBErrorCode : Swift.RawRepresentable {}
extension OlaMapNavigationSDK.OlaMapStyle : Swift.Equatable {}
extension OlaMapNavigationSDK.OlaMapStyle : Swift.Hashable {}
extension OlaMapNavigationSDK.ConfigEnvironment : Swift.Equatable {}
extension OlaMapNavigationSDK.ConfigEnvironment : Swift.Hashable {}
extension OlaMapNavigationSDK.OlaManeuverType : Swift.Equatable {}
extension OlaMapNavigationSDK.OlaManeuverType : Swift.Hashable {}
extension OlaMapNavigationSDK.OlaManeuverType : Swift.RawRepresentable {}
extension OlaMapNavigationSDK.RouteController.RerouteReason : Swift.Equatable {}
extension OlaMapNavigationSDK.RouteController.RerouteReason : Swift.Hashable {}
extension OlaMapNavigationSDK.RouteController.RerouteReason : Swift.RawRepresentable {}
extension OlaMapNavigationSDK.PolylineType : Swift.Equatable {}
extension OlaMapNavigationSDK.PolylineType : Swift.Hashable {}
extension OlaMapNavigationSDK.PolylineType : Swift.RawRepresentable {}
extension OlaMapNavigationSDK.OlaMapGesture : Swift.Equatable {}
extension OlaMapNavigationSDK.OlaMapGesture : Swift.Hashable {}
extension OlaMapNavigationSDK.NavigationViewController : OlaMapNavigationSDK.VisualInstructionDelegate {}
extension OlaMapNavigationSDK.NavigationViewController : Mapbox.MGLMapViewDelegate {}
extension OlaMapNavigationSDK.Maneuver : Swift.Equatable {}
extension OlaMapNavigationSDK.Maneuver : Swift.Hashable {}
extension OlaMapNavigationSDK.Maneuver : Swift.RawRepresentable {}
extension OlaMapNavigationSDK.NavigationTrackingMode : Swift.Equatable {}
extension OlaMapNavigationSDK.NavigationTrackingMode : Swift.Hashable {}
@available(iOS 12.0, *)
extension OlaMapNavigationSDK.CarPlayActivity : Swift.Equatable {}
@available(iOS 12.0, *)
extension OlaMapNavigationSDK.CarPlayActivity : Swift.Hashable {}
@available(iOS 12.0, *)
extension OlaMapNavigationSDK.CarPlayActivity : Swift.RawRepresentable {}
