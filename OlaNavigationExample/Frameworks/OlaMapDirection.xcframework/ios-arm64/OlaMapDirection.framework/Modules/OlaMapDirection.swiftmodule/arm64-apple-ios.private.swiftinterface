// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 6.1 effective-5.10 (swiftlang-6.1.0.110.21 clang-1700.0.13.3)
// swift-module-flags: -target arm64-apple-ios13.0 -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -enable-experimental-feature DebugDescriptionMacro -enable-bare-slash-regex -module-name OlaMapDirection
// swift-module-flags-ignorable: -no-verify-emitted-module-interface -interface-compiler-version 6.1
import CoreLocation
import Foundation
@_exported import OlaMapDirection
import OlaMapPolyline
import Swift
import UIKit
import _Concurrency
import _StringProcessing
import _SwiftConcurrencyShims
@objc(MBCongestionLevel) public enum CongestionLevel : Swift.Int, Swift.CustomStringConvertible {
  case unknown
  case low
  case moderate
  case heavy
  case severe
  public init?(description: Swift.String)
  public var description: Swift.String {
    get
  }
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@_inheritsConvenienceInitializers @objc(MBRouteOptions) open class RouteOptions : OlaMapDirection.DirectionsOptions {
  @objc convenience public init(locations: [CoreLocation.CLLocation], profileIdentifier: OlaMapDirection.MBDirectionsProfileIdentifier? = nil)
  @objc convenience public init(coordinates: [CoreLocation.CLLocationCoordinate2D], profileIdentifier: OlaMapDirection.MBDirectionsProfileIdentifier? = nil)
  @objc required public init(waypoints: [OlaMapDirection.Waypoint], profileIdentifier: OlaMapDirection.MBDirectionsProfileIdentifier? = nil)
  @objc required public init?(coder decoder: Foundation.NSCoder)
  @objc override public func encode(with coder: Foundation.NSCoder)
  @objc open var allowsUTurnAtWaypoint: Swift.Bool
  @objc open var includesAlternativeRoutes: Swift.Bool
  @objc open var includesExitRoundaboutManeuver: Swift.Bool
  @objc open var roadClassesToAvoid: OlaMapDirection.RoadClasses
  @objc override public class var supportsSecureCoding: Swift.Bool {
    @objc get
  }
  @objc override open func copy(with zone: ObjectiveC.NSZone? = nil) -> Any
  @objc override dynamic open func isEqual(_ object: Any?) -> Swift.Bool
  @objc(isEqualToRouteOptions:) open func isEqual(to routeOptions: OlaMapDirection.RouteOptions?) -> Swift.Bool
  @objc deinit
}
@_inheritsConvenienceInitializers @objc(MBRouteOptionsV4) open class RouteOptionsV4 : OlaMapDirection.RouteOptions {
  @objc open var instructionFormat: OlaMapDirection.InstructionFormat
  @objc open var includesShapes: Swift.Bool
  @objc required public init(waypoints: [OlaMapDirection.Waypoint], profileIdentifier: OlaMapDirection.MBDirectionsProfileIdentifier? = nil)
  @objc required public init?(coder decoder: Foundation.NSCoder)
  @objc deinit
}
public typealias RoadClasses = OlaMapDirection.MBRoadClasses
extension OlaMapDirection.MBRoadClasses : Swift.CustomStringConvertible {
  public init?(descriptions: [Swift.String])
  public var description: Swift.String {
    get
  }
}
@_hasMissingDesignatedInitializers @objc(MBMatch) open class Match : OlaMapDirection.DirectionsResult {
  @objc(initWithJSON:tracepoints:waypointIndices:matchOptions:) convenience public init(json: [Swift.String : Any], tracepoints: [OlaMapDirection.Tracepoint], waypointIndices: Foundation.IndexSet, matchOptions: OlaMapDirection.MatchOptions)
  @objc open var confidence: Swift.Float
  @objc open var tracepoints: [OlaMapDirection.Tracepoint]
  @objc open var waypointIndices: Foundation.IndexSet?
  public var matchOptions: OlaMapDirection.MatchOptions {
    get
  }
  @objc required public init?(coder decoder: Foundation.NSCoder)
  @objc override public class var supportsSecureCoding: Swift.Bool {
    @objc get
  }
  @objc override public func encode(with coder: Foundation.NSCoder)
  @objc override dynamic open func isEqual(_ object: Any?) -> Swift.Bool
  @objc(isEqualToMatch:) open func isEqual(to match: OlaMapDirection.Match?) -> Swift.Bool
  @objc deinit
}
@objc(MBVisualInstructionComponentType) public enum VisualInstructionComponentType : Swift.Int, Swift.CustomStringConvertible {
  case delimiter
  case text
  case image
  case exit
  case exitCode
  public init?(description: Swift.String)
  public var description: Swift.String {
    get
  }
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
public let MBDirectionsErrorDomain: Swift.String
@_inheritsConvenienceInitializers @objc(MBDirections) open class Directions : ObjectiveC.NSObject {
  public typealias RouteCompletionHandler = (_ waypoints: [OlaMapDirection.Waypoint]?, _ routes: [OlaMapDirection.Route]?, _ error: Foundation.NSError?) -> Swift.Void
  public typealias MatchCompletionHandler = (_ matches: [OlaMapDirection.Match]?, _ error: Foundation.NSError?) -> Swift.Void
  @objc override dynamic public init()
  @objc deinit
}
@_inheritsConvenienceInitializers @objc(MBMatchOptions) open class MatchOptions : OlaMapDirection.DirectionsOptions {
  @objc convenience public init(locations: [CoreLocation.CLLocation], profileIdentifier: OlaMapDirection.MBDirectionsProfileIdentifier? = nil)
  @objc convenience public init(coordinates: [CoreLocation.CLLocationCoordinate2D], profileIdentifier: OlaMapDirection.MBDirectionsProfileIdentifier? = nil)
  @objc required public init(waypoints: [OlaMapDirection.Waypoint], profileIdentifier: OlaMapDirection.MBDirectionsProfileIdentifier?)
  @objc open var resamplesTraces: Swift.Bool
  @objc open var waypointIndices: Foundation.IndexSet?
  @objc required public init?(coder decoder: Foundation.NSCoder)
  @objc override public func encode(with coder: Foundation.NSCoder)
  @objc override public class var supportsSecureCoding: Swift.Bool {
    @objc get
  }
  @objc deinit
}
public typealias AttributeOptions = OlaMapDirection.MBAttributeOptions
extension OlaMapDirection.MBAttributeOptions : Swift.CustomStringConvertible {
  public init?(descriptions: [Swift.String])
  public var description: Swift.String {
    get
  }
}
@objc(MBLane) public class Lane : ObjectiveC.NSObject, Foundation.NSSecureCoding {
  @objc final public let indications: OlaMapDirection.LaneIndication
  @objc public init(indications: OlaMapDirection.LaneIndication)
  @objc required public init?(coder decoder: Foundation.NSCoder)
  @objc public static var supportsSecureCoding: Swift.Bool
  @objc public func encode(with coder: Foundation.NSCoder)
  @objc deinit
}
public typealias LaneIndication = OlaMapDirection.MBLaneIndication
extension OlaMapDirection.MBLaneIndication : Swift.CustomStringConvertible {
  public init?(descriptions: [Swift.String])
  public var description: Swift.String {
    get
  }
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @objc(MBRoute) open class Route : OlaMapDirection.DirectionsResult {
  @objc(initWithJSON:waypoints:routeOptions:) public init(json: [Swift.String : Any], waypoints: [OlaMapDirection.Waypoint], options: OlaMapDirection.RouteOptions)
  public var routeOptions: OlaMapDirection.RouteOptions {
    get
  }
  @objc required public init?(coder decoder: Foundation.NSCoder)
  @objc deinit
}
@_hasMissingDesignatedInitializers @objc(MBRouteLeg) open class RouteLeg : ObjectiveC.NSObject, Foundation.NSSecureCoding {
  @objc(initWithJSON:source:destination:options:) convenience public init(json: [Swift.String : Any], source: OlaMapDirection.Waypoint, destination: OlaMapDirection.Waypoint, options: OlaMapDirection.RouteOptions)
  @objc required public init?(coder decoder: Foundation.NSCoder)
  @objc public static var supportsSecureCoding: Swift.Bool
  @objc public func encode(with coder: Foundation.NSCoder)
  @objc final public let source: OlaMapDirection.Waypoint
  @objc final public let destination: OlaMapDirection.Waypoint
  @objc final public let steps: [OlaMapDirection.RouteStep]
  @objc final public let segmentDistances: [CoreLocation.CLLocationDistance]?
  @objc final public let expectedSegmentTravelTimes: [Foundation.TimeInterval]?
  @objc final public let segmentSpeeds: [CoreLocation.CLLocationSpeed]?
  final public let segmentCongestionLevels: [OlaMapDirection.CongestionLevel]?
  @objc final public let name: Swift.String
  @objc override dynamic open var description: Swift.String {
    @objc get
  }
  @objc final public let distance: CoreLocation.CLLocationDistance
  @objc final public let expectedTravelTime: Foundation.TimeInterval
  @objc final public let profileIdentifier: OlaMapDirection.MBDirectionsProfileIdentifier
  @objc deinit
}
@objc(MBVisualInstruction) open class VisualInstruction : ObjectiveC.NSObject, Foundation.NSSecureCoding {
  @objc public static var supportsSecureCoding: Swift.Bool
  @objc final public let text: Swift.String?
  @objc public var maneuverType: OlaMapDirection.ManeuverType
  @objc public var maneuverDirection: OlaMapDirection.ManeuverDirection
  @objc final public let components: [any OlaMapDirection.ComponentRepresentable]
  @objc public var finalHeading: Swift.Double
  @objc public init(text: Swift.String?, maneuverType: OlaMapDirection.ManeuverType, maneuverDirection: OlaMapDirection.ManeuverDirection, components: [any OlaMapDirection.ComponentRepresentable], degrees: CoreLocation.CLLocationDegrees = 180)
  @objc(initWithJSON:) convenience public init(json: [Swift.String : Any])
  @objc required public init?(coder decoder: Foundation.NSCoder)
  @objc public func encode(with coder: Foundation.NSCoder)
  @objc deinit
}
@_hasMissingDesignatedInitializers @objc(MBTracepoint) public class Tracepoint : OlaMapDirection.Waypoint {
  @objc open var alternateCount: Swift.Int
  @objc required public init?(coder decoder: Foundation.NSCoder)
  @objc override public func encode(with coder: Foundation.NSCoder)
  @objc override public class var supportsSecureCoding: Swift.Bool {
    @objc get
  }
  @objc deinit
}
@_hasMissingDesignatedInitializers @objc(MBIntersection) public class Intersection : ObjectiveC.NSObject, Foundation.NSSecureCoding {
  @objc final public let location: CoreLocation.CLLocationCoordinate2D
  @objc final public let headings: [CoreLocation.CLLocationDirection]
  @objc final public let outletIndexes: Foundation.IndexSet
  @objc final public let approachIndex: Swift.Int
  @objc final public let outletIndex: Swift.Int
  @objc final public let approachLanes: [OlaMapDirection.Lane]?
  @objc final public let usableApproachLanes: Foundation.IndexSet?
  final public let outletRoadClasses: OlaMapDirection.RoadClasses?
  @objc required public init?(coder decoder: Foundation.NSCoder)
  @objc public static var supportsSecureCoding: Swift.Bool
  @objc public func encode(with coder: Foundation.NSCoder)
  @objc deinit
}
@objc(MBVisualInstructionBanner) open class VisualInstructionBanner : ObjectiveC.NSObject, Foundation.NSSecureCoding {
  @objc final public let distanceAlongStep: CoreLocation.CLLocationDistance
  @objc final public let primaryInstruction: OlaMapDirection.VisualInstruction
  @objc final public let secondaryInstruction: OlaMapDirection.VisualInstruction?
  @objc final public let tertiaryInstruction: OlaMapDirection.VisualInstruction?
  @objc public var drivingSide: OlaMapDirection.DrivingSide
  @objc(initWithJSON:drivingSide:) convenience public init(json: [Swift.String : Any], drivingSide: OlaMapDirection.DrivingSide)
  @objc public init(distanceAlongStep: CoreLocation.CLLocationDistance, primaryInstruction: OlaMapDirection.VisualInstruction, secondaryInstruction: OlaMapDirection.VisualInstruction?, tertiaryInstruction: OlaMapDirection.VisualInstruction?, drivingSide: OlaMapDirection.DrivingSide)
  @objc required public init?(coder decoder: Foundation.NSCoder)
  @objc public static var supportsSecureCoding: Swift.Bool
  @objc public func encode(with coder: Foundation.NSCoder)
  @objc deinit
}
@objc(MBSpokenInstruction) open class SpokenInstruction : ObjectiveC.NSObject, Foundation.NSSecureCoding {
  @objc final public let distanceAlongStep: CoreLocation.CLLocationDistance
  @objc final public let text: Swift.String
  @objc final public let ssmlText: Swift.String
  @objc(initWithJSON:) convenience public init(json: [Swift.String : Any])
  @objc public init(distanceAlongStep: CoreLocation.CLLocationDistance, text: Swift.String, ssmlText: Swift.String)
  @objc required public init?(coder decoder: Foundation.NSCoder)
  @objc public static var supportsSecureCoding: Swift.Bool
  @objc public func encode(with coder: Foundation.NSCoder)
  @objc deinit
}
@objc(MBVisualInstructionComponent) open class VisualInstructionComponent : ObjectiveC.NSObject, OlaMapDirection.ComponentRepresentable {
  @objc public var imageURL: Foundation.URL?
  @objc public var abbreviation: Swift.String?
  @objc public var abbreviationPriority: Swift.Int
  @objc public var text: Swift.String?
  @objc public var type: OlaMapDirection.VisualInstructionComponentType
  @objc public static var supportsSecureCoding: Swift.Bool
  @objc(initWithJSON:) convenience public init(json: [Swift.String : Any])
  @objc public init(type: OlaMapDirection.VisualInstructionComponentType, text: Swift.String?, imageURL: Foundation.URL?, abbreviation: Swift.String?, abbreviationPriority: Swift.Int)
  @objc required public init?(coder decoder: Foundation.NSCoder)
  @objc public func encode(with coder: Foundation.NSCoder)
  @objc deinit
}
@objc(MBTransportType) public enum TransportType : Swift.Int, Swift.CustomStringConvertible {
  case none
  case automobile
  case ferry
  case movableBridge
  case inaccessible
  case walking
  case cycling
  case train
  public init?(description: Swift.String)
  public var description: Swift.String {
    get
  }
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@objc(MBManeuverType) public enum ManeuverType : Swift.Int, Swift.CustomStringConvertible {
  case none
  case depart
  case turn
  case turnRight
  case turnLeft
  case turnSharpRight
  case turnSharpLeft
  case turnSlightRight
  case turnSlightLeft
  case uturn
  case `continue`
  case passNameChange
  case merge
  case takeOnRamp
  case takeOffRamp
  case reachFork
  case reachEnd
  case useLane
  case takeRoundabout
  case takeRotary
  case turnAtRoundabout
  case exitRoundabout
  case exitRotary
  case heedWarning
  case arrive
  case passWaypoint
  case continueFlyover
  case leftFlyover
  case rightFlyover
  case slightLeftFlyover
  case slightRightFlyover
  case sharpRightFlyover
  case sharpLeftFlyover
  public init?(description: Swift.String)
  public var description: Swift.String {
    get
  }
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@objc(MBManeuverDirection) public enum ManeuverDirection : Swift.Int, Swift.CustomStringConvertible {
  case none
  case sharpRight
  case right
  case slightRight
  case straightAhead
  case slightLeft
  case left
  case sharpLeft
  case uTurn
  public init?(description: Swift.String)
  public var description: Swift.String {
    get
  }
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@objc(MBDrivingSide) public enum DrivingSide : Swift.Int, Swift.CustomStringConvertible {
  case left
  case right
  public init?(description: Swift.String)
  public var description: Swift.String {
    get
  }
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@_hasMissingDesignatedInitializers @objc(MBRouteStep) open class RouteStep : ObjectiveC.NSObject, Foundation.NSSecureCoding {
  @objc(initWithJSON:options:) convenience public init(json: [Swift.String : Any], options: OlaMapDirection.RouteOptions)
  @objc required public init?(coder decoder: Foundation.NSCoder)
  @objc public static var supportsSecureCoding: Swift.Bool
  @objc public func encode(with coder: Foundation.NSCoder)
  @objc final public let coordinates: [CoreLocation.CLLocationCoordinate2D]?
  @objc open var coordinateCount: Swift.UInt {
    @objc get
  }
  @objc open func getCoordinates(_ coordinates: Swift.UnsafeMutablePointer<CoreLocation.CLLocationCoordinate2D>) -> Swift.Bool
  @objc final public let instructions: Swift.String
  @objc final public let instructionsSpokenAlongStep: [OlaMapDirection.SpokenInstruction]?
  @objc final public let instructionsDisplayedAlongStep: [OlaMapDirection.VisualInstructionBanner]?
  @objc override dynamic open var description: Swift.String {
    @objc get
  }
  final public let initialHeading: CoreLocation.CLLocationDirection?
  final public let finalHeading: CoreLocation.CLLocationDirection?
  @objc final public let maneuverType: OlaMapDirection.ManeuverType
  @objc final public let maneuverDirection: OlaMapDirection.ManeuverDirection
  final public let drivingSide: OlaMapDirection.DrivingSide
  @objc final public let maneuverLocation: CoreLocation.CLLocationCoordinate2D
  final public let exitIndex: Swift.Int?
  @objc final public let exitCodes: [Swift.String]?
  @objc final public let exitNames: [Swift.String]?
  @objc final public let phoneticExitNames: [Swift.String]?
  @objc final public let distance: CoreLocation.CLLocationDistance
  @objc final public let expectedTravelTime: Foundation.TimeInterval
  @objc final public let names: [Swift.String]?
  @objc final public let phoneticNames: [Swift.String]?
  @objc final public let codes: [Swift.String]?
  @objc final public let transportType: OlaMapDirection.TransportType
  @objc final public let destinationCodes: [Swift.String]?
  @objc final public let destinations: [Swift.String]?
  @objc final public let intersections: [OlaMapDirection.Intersection]?
  @objc deinit
}
@objc(MBComponentRepresentable) public protocol ComponentRepresentable : Foundation.NSSecureCoding {
}
@objc(MBWaypoint) open class Waypoint : ObjectiveC.NSObject, Foundation.NSCopying, Foundation.NSSecureCoding {
  @objc public class var supportsSecureCoding: Swift.Bool {
    @objc get
  }
  @objc public init(coordinate: CoreLocation.CLLocationCoordinate2D, coordinateAccuracy: CoreLocation.CLLocationAccuracy = -1, name: Swift.String? = nil)
  @objc public init(location: CoreLocation.CLLocation, heading: CoreLocation.CLHeading? = nil, name: Swift.String? = nil)
  @objc required public init?(coder decoder: Foundation.NSCoder)
  @objc open func encode(with coder: Foundation.NSCoder)
  @objc open func copy(with zone: ObjectiveC.NSZone?) -> Any
  @objc final public let coordinate: CoreLocation.CLLocationCoordinate2D
  @objc open var coordinateAccuracy: Swift.Double
  @objc open var heading: Swift.Double
  @objc open var headingAccuracy: Swift.Double
  @objc open var name: Swift.String?
  @objc open var allowsArrivingOnOppositeSide: Swift.Bool
  @objc override dynamic open var description: Swift.String {
    @objc get
  }
  @objc deinit
}
@objc(MBLaneIndicationComponent) open class LaneIndicationComponent : ObjectiveC.NSObject, OlaMapDirection.ComponentRepresentable {
  @objc public var indications: OlaMapDirection.LaneIndication
  @objc public var isUsable: Swift.Bool
  @objc public static var supportsSecureCoding: Swift.Bool
  @objc public init(indications: OlaMapDirection.LaneIndication, isUsable: Swift.Bool)
  @objc required public init?(coder decoder: Foundation.NSCoder)
  @objc public func encode(with coder: Foundation.NSCoder)
  @objc deinit
}
@_hasMissingDesignatedInitializers @objc(MBDirectionsResult) open class DirectionsResult : ObjectiveC.NSObject, Foundation.NSSecureCoding {
  @objc required public init?(coder decoder: Foundation.NSCoder)
  @objc public class var supportsSecureCoding: Swift.Bool {
    @objc get
  }
  @objc public func encode(with coder: Foundation.NSCoder)
  @objc final public let coordinates: [CoreLocation.CLLocationCoordinate2D]?
  @objc open var coordinateCount: Swift.UInt {
    @objc get
  }
  @objc open func getCoordinates(_ coordinates: Swift.UnsafeMutablePointer<CoreLocation.CLLocationCoordinate2D>)
  @objc final public let legs: [OlaMapDirection.RouteLeg]
  @objc override dynamic open var description: Swift.String {
    @objc get
  }
  @objc final public let distance: CoreLocation.CLLocationDistance
  @objc final public let expectedTravelTime: Foundation.TimeInterval
  @objc final public let directionsOptions: OlaMapDirection.DirectionsOptions
  @objc open var accessToken: Swift.String?
  @objc open var apiEndpoint: Foundation.URL?
  @objc open var routeIdentifier: Swift.String?
  @objc open var speechLocale: Foundation.Locale?
  @objc deinit
}
@objc(MBRouteShapeFormat) public enum RouteShapeFormat : Swift.UInt, Swift.CustomStringConvertible {
  case geoJSON
  case polyline
  case polyline6
  public init?(description: Swift.String)
  public var description: Swift.String {
    get
  }
  public init?(rawValue: Swift.UInt)
  public typealias RawValue = Swift.UInt
  public var rawValue: Swift.UInt {
    get
  }
}
@objc(MBRouteShapeResolution) public enum RouteShapeResolution : Swift.UInt, Swift.CustomStringConvertible {
  case none
  case low
  case full
  public init?(description: Swift.String)
  public var description: Swift.String {
    get
  }
  public init?(rawValue: Swift.UInt)
  public typealias RawValue = Swift.UInt
  public var rawValue: Swift.UInt {
    get
  }
}
@objc(MBMeasurementSystem) public enum MeasurementSystem : Swift.UInt, Swift.CustomStringConvertible {
  case imperial
  case metric
  public init?(description: Swift.String)
  public var description: Swift.String {
    get
  }
  public init?(rawValue: Swift.UInt)
  public typealias RawValue = Swift.UInt
  public var rawValue: Swift.UInt {
    get
  }
}
@objc(MBInstructionFormat) public enum InstructionFormat : Swift.UInt, Swift.CustomStringConvertible {
  case text
  case html
  public init?(description: Swift.String)
  public var description: Swift.String {
    get
  }
  public init?(rawValue: Swift.UInt)
  public typealias RawValue = Swift.UInt
  public var rawValue: Swift.UInt {
    get
  }
}
@objc(MBDirectionsOptions) open class DirectionsOptions : ObjectiveC.NSObject, Foundation.NSSecureCoding, Foundation.NSCopying {
  @objc required public init(waypoints: [OlaMapDirection.Waypoint], profileIdentifier: OlaMapDirection.MBDirectionsProfileIdentifier? = nil)
  @objc public class var supportsSecureCoding: Swift.Bool {
    @objc get
  }
  @objc open func copy(with zone: ObjectiveC.NSZone? = nil) -> Any
  @objc override dynamic open func isEqual(_ object: Any?) -> Swift.Bool
  @objc(isEqualToDirectionsOptions:) open func isEqual(to directionsOptions: OlaMapDirection.DirectionsOptions?) -> Swift.Bool
  @objc public func encode(with coder: Foundation.NSCoder)
  @objc required public init?(coder decoder: Foundation.NSCoder)
  @objc open var waypoints: [OlaMapDirection.Waypoint]
  @objc open var profileIdentifier: OlaMapDirection.MBDirectionsProfileIdentifier
  @objc open var includesSteps: Swift.Bool
  @objc open var shapeFormat: OlaMapDirection.RouteShapeFormat
  @objc open var routeShapeResolution: OlaMapDirection.RouteShapeResolution
  @objc open var attributeOptions: OlaMapDirection.AttributeOptions
  @objc open var locale: Foundation.Locale {
    @objc get
    @objc set
  }
  @objc open var includesSpokenInstructions: Swift.Bool
  @objc open var distanceMeasurementSystem: OlaMapDirection.MeasurementSystem
  @objc open var includesVisualInstructions: Swift.Bool
  @objc deinit
}
extension OlaMapDirection.CongestionLevel : Swift.Equatable {}
extension OlaMapDirection.CongestionLevel : Swift.Hashable {}
extension OlaMapDirection.CongestionLevel : Swift.RawRepresentable {}
extension OlaMapDirection.VisualInstructionComponentType : Swift.Equatable {}
extension OlaMapDirection.VisualInstructionComponentType : Swift.Hashable {}
extension OlaMapDirection.VisualInstructionComponentType : Swift.RawRepresentable {}
extension OlaMapDirection.TransportType : Swift.Equatable {}
extension OlaMapDirection.TransportType : Swift.Hashable {}
extension OlaMapDirection.TransportType : Swift.RawRepresentable {}
extension OlaMapDirection.ManeuverType : Swift.Equatable {}
extension OlaMapDirection.ManeuverType : Swift.Hashable {}
extension OlaMapDirection.ManeuverType : Swift.RawRepresentable {}
extension OlaMapDirection.ManeuverDirection : Swift.Equatable {}
extension OlaMapDirection.ManeuverDirection : Swift.Hashable {}
extension OlaMapDirection.ManeuverDirection : Swift.RawRepresentable {}
extension OlaMapDirection.DrivingSide : Swift.Equatable {}
extension OlaMapDirection.DrivingSide : Swift.Hashable {}
extension OlaMapDirection.DrivingSide : Swift.RawRepresentable {}
extension OlaMapDirection.RouteShapeFormat : Swift.Equatable {}
extension OlaMapDirection.RouteShapeFormat : Swift.Hashable {}
extension OlaMapDirection.RouteShapeFormat : Swift.RawRepresentable {}
extension OlaMapDirection.RouteShapeResolution : Swift.Equatable {}
extension OlaMapDirection.RouteShapeResolution : Swift.Hashable {}
extension OlaMapDirection.RouteShapeResolution : Swift.RawRepresentable {}
extension OlaMapDirection.MeasurementSystem : Swift.Equatable {}
extension OlaMapDirection.MeasurementSystem : Swift.Hashable {}
extension OlaMapDirection.MeasurementSystem : Swift.RawRepresentable {}
extension OlaMapDirection.InstructionFormat : Swift.Equatable {}
extension OlaMapDirection.InstructionFormat : Swift.Hashable {}
extension OlaMapDirection.InstructionFormat : Swift.RawRepresentable {}
